// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enumtag.proto

#include "enumtag.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace proto_plan {
}  // namespace proto_plan
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_enumtag_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_enumtag_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_enumtag_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_enumtag_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enumtag_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\renumtag.proto\022\nproto_plan*\340t\n\007NodeTag\022"
  "\r\n\tT_Invalid\020\000\022\017\n\013T_IndexInfo\020\n\022\021\n\rT_Exp"
  "rContext\020\013\022\024\n\020T_ProjectionInfo\020\014\022\020\n\014T_Ju"
  "nkFilter\020\r\022\023\n\017T_ResultRelInfo\020\016\022\014\n\010T_ESt"
  "ate\020\017\022\024\n\020T_TupleTableSlot\020\020\022\n\n\006T_Plan\020d\022"
  "\020\n\014T_BaseResult\020e\022\020\n\014T_ProjectSet\020f\022\021\n\rT"
  "_ModifyTable\020g\022\014\n\010T_Append\020h\022\022\n\016T_PartIt"
  "erator\020i\022\021\n\rT_MergeAppend\020j\022\024\n\020T_Recursi"
  "veUnion\020k\022\021\n\rT_StartWithOp\020l\022\017\n\013T_Bitmap"
  "And\020m\022\016\n\nT_BitmapOr\020n\022\n\n\006T_Scan\020o\022\r\n\tT_S"
  "eqScan\020p\022\017\n\013T_IndexScan\020q\022\023\n\017T_IndexOnly"
  "Scan\020r\022\025\n\021T_BitmapIndexScan\020s\022\024\n\020T_Bitma"
  "pHeapScan\020t\022\r\n\tT_TidScan\020u\022\022\n\016T_Subquery"
  "Scan\020v\022\022\n\016T_FunctionScan\020w\022\020\n\014T_ValuesSc"
  "an\020x\022\r\n\tT_CteScan\020y\022\023\n\017T_WorkTableScan\020z"
  "\022\021\n\rT_ForeignScan\020{\022\024\n\020T_ExtensiblePlan\020"
  "|\022\n\n\006T_Join\020}\022\016\n\nT_NestLoop\020~\022\017\n\013T_Merge"
  "Join\020\177\022\017\n\nT_HashJoin\020\200\001\022\017\n\nT_Material\020\201\001"
  "\022\013\n\006T_Sort\020\202\001\022\014\n\007T_Group\020\203\001\022\n\n\005T_Agg\020\204\001\022"
  "\020\n\013T_WindowAgg\020\205\001\022\r\n\010T_Unique\020\206\001\022\013\n\006T_Ha"
  "sh\020\207\001\022\014\n\007T_SetOp\020\210\001\022\017\n\nT_LockRows\020\211\001\022\014\n\007"
  "T_Limit\020\212\001\022\r\n\010T_Stream\020\213\001\022\020\n\013T_ExecNodes"
  "\020\214\001\022\024\n\017T_SliceBoundary\020\215\001\022\023\n\016T_ExecBound"
  "ary\020\216\001\022\021\n\014T_SimpleSort\020\217\001\022\022\n\rT_RemoteQue"
  "ry\020\220\001\022\025\n\020T_PGXCNodeHandle\020\221\001\022\024\n\017T_AlterN"
  "odeStmt\020\222\001\022\025\n\020T_CreateNodeStmt\020\223\001\022\023\n\016T_D"
  "ropNodeStmt\020\224\001\022\033\n\026T_AlterCoordinatorStmt"
  "\020\225\001\022\026\n\021T_CreateGroupStmt\020\226\001\022\025\n\020T_AlterGr"
  "oupStmt\020\227\001\022\024\n\017T_DropGroupStmt\020\230\001\022\035\n\030T_Cr"
  "eateResourcePoolStmt\020\231\001\022\034\n\027T_AlterResour"
  "cePoolStmt\020\232\001\022\033\n\026T_DropResourcePoolStmt\020"
  "\233\001\022\034\n\027T_AlterGlobalConfigStmt\020\234\001\022\033\n\026T_Dr"
  "opGlobalConfigStmt\020\235\001\022\036\n\031T_CreateWorkloa"
  "dGroupStmt\020\236\001\022\035\n\030T_AlterWorkloadGroupStm"
  "t\020\237\001\022\034\n\027T_DropWorkloadGroupStmt\020\240\001\022(\n#T_"
  "CreateAppWorkloadGroupMappingStmt\020\241\001\022\'\n\""
  "T_AlterAppWorkloadGroupMappingStmt\020\242\001\022&\n"
  "!T_DropAppWorkloadGroupMappingStmt\020\243\001\022\024\n"
  "\017T_NestLoopParam\020\244\001\022\030\n\023T_PartIteratorPar"
  "am\020\245\001\022\022\n\rT_PlanRowMark\020\246\001\022\024\n\017T_PlanInval"
  "Item\020\247\001\022\024\n\017T_FuncInvalItem\020\250\001\022\027\n\022T_Polic"
  "yFilterNode\020\251\001\022\034\n\027T_CreatePolicyLabelStm"
  "t\020\252\001\022\033\n\026T_AlterPolicyLabelStmt\020\253\001\022\032\n\025T_D"
  "ropPolicyLabelStmt\020\254\001\022\034\n\027T_CreateAuditPo"
  "licyStmt\020\255\001\022\033\n\026T_AlterAuditPolicyStmt\020\256\001"
  "\022\032\n\025T_DropAuditPolicyStmt\020\257\001\022\035\n\030T_Maskin"
  "gPolicyCondition\020\260\001\022\036\n\031T_CreateMaskingPo"
  "licyStmt\020\261\001\022\035\n\030T_AlterMaskingPolicyStmt\020"
  "\262\001\022\034\n\027T_DropMaskingPolicyStmt\020\263\001\022\037\n\032T_Cr"
  "eateSecurityPolicyStmt\020\264\001\022\036\n\031T_AlterSecu"
  "rityPolicyStmt\020\265\001\022\035\n\030T_DropSecurityPolic"
  "yStmt\020\266\001\022\026\n\021T_AlterSchemaStmt\020\267\001\022\020\n\013T_Pl"
  "anState\020\310\001\022\022\n\rT_ResultState\020\311\001\022\026\n\021T_Proj"
  "ectSetState\020\312\001\022\024\n\017T_VecToRowState\020\313\001\022\027\n\022"
  "T_MergeActionState\020\314\001\022\027\n\022T_ModifyTableSt"
  "ate\020\315\001\022\034\n\027T_DistInsertSelectState\020\316\001\022\022\n\r"
  "T_AppendState\020\317\001\022\030\n\023T_PartIteratorState\020"
  "\320\001\022\027\n\022T_MergeAppendState\020\321\001\022\032\n\025T_Recursi"
  "veUnionState\020\322\001\022\027\n\022T_StartWithOpState\020\323\001"
  "\022\025\n\020T_BitmapAndState\020\324\001\022\024\n\017T_BitmapOrSta"
  "te\020\325\001\022\020\n\013T_ScanState\020\326\001\022\023\n\016T_SeqScanStat"
  "e\020\327\001\022\025\n\020T_IndexScanState\020\330\001\022\031\n\024T_IndexOn"
  "lyScanState\020\331\001\022\033\n\026T_BitmapIndexScanState"
  "\020\332\001\022\032\n\025T_BitmapHeapScanState\020\333\001\022\023\n\016T_Tid"
  "ScanState\020\334\001\022\030\n\023T_SubqueryScanState\020\335\001\022\030"
  "\n\023T_FunctionScanState\020\336\001\022\026\n\021T_ValuesScan"
  "State\020\337\001\022\023\n\016T_CteScanState\020\340\001\022\031\n\024T_WorkT"
  "ableScanState\020\341\001\022\027\n\022T_ForeignScanState\020\342"
  "\001\022\032\n\025T_ExtensiblePlanState\020\343\001\022\020\n\013T_JoinS"
  "tate\020\344\001\022\024\n\017T_NestLoopState\020\345\001\022\025\n\020T_Merge"
  "JoinState\020\346\001\022\024\n\017T_HashJoinState\020\347\001\022\024\n\017T_"
  "MaterialState\020\350\001\022\020\n\013T_SortState\020\351\001\022\021\n\014T_"
  "GroupState\020\352\001\022\017\n\nT_AggState\020\353\001\022\025\n\020T_Wind"
  "owAggState\020\354\001\022\022\n\rT_UniqueState\020\355\001\022\020\n\013T_H"
  "ashState\020\356\001\022\021\n\014T_SetOpState\020\357\001\022\024\n\017T_Lock"
  "RowsState\020\360\001\022\021\n\014T_LimitState\020\361\001\022\027\n\022T_Rem"
  "oteQueryState\020\362\001\022\026\n\021T_TrainModelState\020\363\001"
  "\022\022\n\rT_StreamState\020\364\001\022\014\n\007T_Alias\020\254\002\022\017\n\nT_"
  "RangeVar\020\255\002\022\013\n\006T_Expr\020\256\002\022\n\n\005T_Var\020\257\002\022\014\n\007"
  "T_Const\020\260\002\022\014\n\007T_Param\020\261\002\022\r\n\010T_Aggref\020\262\002\022"
  "\023\n\016T_GroupingFunc\020\263\002\022\021\n\014T_WindowFunc\020\264\002\022"
  "\017\n\nT_InitList\020\265\002\022\017\n\nT_ArrayRef\020\266\002\022\017\n\nT_F"
  "uncExpr\020\267\002\022\023\n\016T_NamedArgExpr\020\270\002\022\r\n\010T_OpE"
  "xpr\020\271\002\022\023\n\016T_DistinctExpr\020\272\002\022\021\n\014T_NullIfE"
  "xpr\020\273\002\022\030\n\023T_ScalarArrayOpExpr\020\274\002\022\017\n\nT_Bo"
  "olExpr\020\275\002\022\016\n\tT_SubLink\020\276\002\022\016\n\tT_SubPlan\020\277"
  "\002\022\031\n\024T_AlternativeSubPlan\020\300\002\022\022\n\rT_FieldS"
  "elect\020\301\002\022\021\n\014T_FieldStore\020\302\002\022\022\n\rT_Relabel"
  "Type\020\303\002\022\022\n\rT_CoerceViaIO\020\304\002\022\026\n\021T_ArrayCo"
  "erceExpr\020\305\002\022\031\n\024T_ConvertRowtypeExpr\020\306\002\022\022"
  "\n\rT_CollateExpr\020\307\002\022\017\n\nT_CaseExpr\020\310\002\022\017\n\nT"
  "_CaseWhen\020\311\002\022\023\n\016T_CaseTestExpr\020\312\002\022\020\n\013T_A"
  "rrayExpr\020\313\002\022\016\n\tT_RowExpr\020\314\002\022\025\n\020T_RowComp"
  "areExpr\020\315\002\022\023\n\016T_CoalesceExpr\020\316\002\022\021\n\014T_Min"
  "MaxExpr\020\317\002\022\016\n\tT_XmlExpr\020\320\002\022\017\n\nT_NullTest"
  "\020\321\002\022\022\n\rT_BooleanTest\020\322\002\022\025\n\020T_CoerceToDom"
  "ain\020\323\002\022\032\n\025T_CoerceToDomainValue\020\324\002\022\023\n\016T_"
  "SetToDefault\020\325\002\022\024\n\017T_CurrentOfExpr\020\326\002\022\022\n"
  "\rT_TargetEntry\020\327\002\022\022\n\rT_RangeTblRef\020\330\002\022\017\n"
  "\nT_JoinExpr\020\331\002\022\017\n\nT_FromExpr\020\332\002\022\021\n\014T_Ups"
  "ertExpr\020\333\002\022\021\n\014T_IntoClause\020\334\002\022\017\n\nT_Index"
  "Var\020\335\002\022\023\n\016T_DistributeBy\020\336\002\022\025\n\020T_PGXCSub"
  "Cluster\020\337\002\022\020\n\013T_DistState\020\340\002\022\030\n\023T_ListSl"
  "iceDefState\020\341\002\022\021\n\014T_HashFilter\020\342\002\022\020\n\013T_E"
  "stSPNode\020\343\002\022\r\n\010T_Rownum\020\344\002\022\030\n\023T_PseudoTa"
  "rgetEntry\020\345\002\022\020\n\013T_PrefixKey\020\346\002\022\026\n\021T_SetV"
  "ariableExpr\020\347\002\022\020\n\013T_ExprState\020\220\003\022\027\n\022T_Ge"
  "nericExprState\020\221\003\022\026\n\021T_AggrefExprState\020\222"
  "\003\022\034\n\027T_GroupingFuncExprState\020\223\003\022\032\n\025T_Win"
  "dowFuncExprState\020\224\003\022\030\n\023T_ArrayRefExprSta"
  "te\020\225\003\022\024\n\017T_FuncExprState\020\226\003\022\035\n\030T_ScalarA"
  "rrayOpExprState\020\227\003\022\024\n\017T_BoolExprState\020\230\003"
  "\022\023\n\016T_SubPlanState\020\231\003\022\036\n\031T_AlternativeSu"
  "bPlanState\020\232\003\022\027\n\022T_FieldSelectState\020\233\003\022\026"
  "\n\021T_FieldStoreState\020\234\003\022\027\n\022T_CoerceViaIOS"
  "tate\020\235\003\022\033\n\026T_ArrayCoerceExprState\020\236\003\022\036\n\031"
  "T_ConvertRowtypeExprState\020\237\003\022\024\n\017T_CaseEx"
  "prState\020\240\003\022\024\n\017T_CaseWhenState\020\241\003\022\025\n\020T_Ar"
  "rayExprState\020\242\003\022\023\n\016T_RowExprState\020\243\003\022\032\n\025"
  "T_RowCompareExprState\020\244\003\022\030\n\023T_CoalesceEx"
  "prState\020\245\003\022\026\n\021T_MinMaxExprState\020\246\003\022\023\n\016T_"
  "XmlExprState\020\247\003\022\024\n\017T_NullTestState\020\250\003\022\026\n"
  "\021T_HashFilterState\020\251\003\022\032\n\025T_CoerceToDomai"
  "nState\020\252\003\022\034\n\027T_DomainConstraintState\020\253\003\022"
  "\033\n\026T_WholeRowVarExprState\020\254\003\022\035\n\030T_RangeP"
  "artitionDefState\020\255\003\022 \n\033T_IntervalPartiti"
  "onDefState\020\256\003\022\025\n\020T_PartitionState\020\257\003\022\"\n\035"
  "T_RangePartitionindexDefState\020\260\003\022\032\n\025T_Sp"
  "litPartitionState\020\261\003\022\030\n\023T_AddPartitionSt"
  "ate\020\262\003\022\033\n\026T_AddSubPartitionState\020\263\003\022%\n T"
  "_RangePartitionStartEndDefState\020\264\003\022\022\n\rT_"
  "RownumState\020\265\003\022\027\n\022T_UserSetElemState\020\266\003\022"
  "\034\n\027T_ListPartitionDefState\020\267\003\022\034\n\027T_HashP"
  "artitionDefState\020\270\003\022\025\n\020T_PrefixKeyState\020"
  "\271\003\022\022\n\rT_PlannerInfo\020\364\003\022\024\n\017T_PlannerGloba"
  "l\020\365\003\022\021\n\014T_RelOptInfo\020\366\003\022\023\n\016T_IndexOptInf"
  "o\020\367\003\022\024\n\017T_ParamPathInfo\020\370\003\022\013\n\006T_Path\020\371\003\022"
  "\020\n\013T_IndexPath\020\372\003\022\025\n\020T_BitmapHeapPath\020\373\003"
  "\022\024\n\017T_BitmapAndPath\020\374\003\022\023\n\016T_BitmapOrPath"
  "\020\375\003\022\017\n\nT_NestPath\020\376\003\022\020\n\013T_MergePath\020\377\003\022\017"
  "\n\nT_HashPath\020\200\004\022\016\n\tT_TidPath\020\201\004\022\022\n\rT_For"
  "eignPath\020\202\004\022\025\n\020T_ExtensiblePath\020\203\004\022\021\n\014T_"
  "AppendPath\020\204\004\022\026\n\021T_MergeAppendPath\020\205\004\022\021\n"
  "\014T_ResultPath\020\206\004\022\025\n\020T_ProjectionPath\020\207\004\022"
  "\025\n\020T_ProjectSetPath\020\210\004\022\023\n\016T_MaterialPath"
  "\020\211\004\022\021\n\014T_UniquePath\020\212\004\022\027\n\022T_PartIterator"
  "Path\020\213\004\022\027\n\022T_EquivalenceClass\020\214\004\022\030\n\023T_Eq"
  "uivalenceMember\020\215\004\022\016\n\tT_PathKey\020\216\004\022\021\n\014T_"
  "PathTarget\020\217\004\022\023\n\016T_RestrictInfo\020\220\004\022\025\n\020T_"
  "PlaceHolderVar\020\221\004\022\026\n\021T_SpecialJoinInfo\020\222"
  "\004\022\026\n\021T_LateralJoinInfo\020\223\004\022\024\n\017T_AppendRel"
  "Info\020\224\004\022\026\n\021T_PlaceHolderInfo\020\225\004\022\024\n\017T_Min"
  "MaxAggInfo\020\226\004\022\027\n\022T_PlannerParamItem\020\227\004\022\026"
  "\n\021T_RemoteQueryPath\020\230\004\022\021\n\014T_StreamPath\020\231"
  "\004\022\022\n\rT_MergeAction\020\232\004\022\022\n\rT_UpsertState\020\233"
  "\004\022\027\n\022T_SubqueryScanPath\020\234\004\022\024\n\017T_MemoryCo"
  "ntext\020\330\004\022\026\n\021T_AllocSetContext\020\331\004\022\025\n\020T_As"
  "anSetContext\020\332\004\022\033\n\026T_StackAllocSetContex"
  "t\020\333\004\022\034\n\027T_SharedAllocSetContext\020\334\004\022\036\n\031T_"
  "MemalignAllocSetContext\020\335\004\022$\n\037T_Memalign"
  "SharedAllocSetContext\020\336\004\022\025\n\020T_MemoryTrac"
  "king\020\337\004\022\025\n\020T_IndexAmRoutine\020\211\005\022\014\n\007T_Valu"
  "e\020\212\005\022\016\n\tT_Integer\020\213\005\022\014\n\007T_Float\020\214\005\022\r\n\010T_"
  "String\020\215\005\022\020\n\013T_BitString\020\216\005\022\013\n\006T_Null\020\217\005"
  "\022\013\n\006T_List\020\220\005\022\016\n\tT_IntList\020\221\005\022\016\n\tT_OidLi"
  "st\020\222\005\022\014\n\007T_DList\020\223\005\022\017\n\nT_IntDList\020\224\005\022\017\n\n"
  "T_OidDList\020\225\005\022\014\n\007T_Query\020\274\005\022\022\n\rT_Planned"
  "Stmt\020\275\005\022\021\n\014T_InsertStmt\020\276\005\022\021\n\014T_DeleteSt"
  "mt\020\277\005\022\021\n\014T_UpdateStmt\020\300\005\022\020\n\013T_MergeStmt\020"
  "\301\005\022\021\n\014T_SelectStmt\020\302\005\022\030\n\023T_SelectIntoVar"
  "List\020\303\005\022\025\n\020T_AlterTableStmt\020\304\005\022\024\n\017T_Alte"
  "rTableCmd\020\305\005\022\033\n\026T_AlterForeingTableCmd\020\306"
  "\005\022\034\n\027T_RenameForeingTableCmd\020\307\005\022\026\n\021T_Alt"
  "erDomainStmt\020\310\005\022\027\n\022T_SetOperationStmt\020\311\005"
  "\022\020\n\013T_GrantStmt\020\312\005\022\024\n\017T_GrantRoleStmt\020\313\005"
  "\022\022\n\rT_GrantDbStmt\020\314\005\022!\n\034T_AlterDefaultPr"
  "ivilegesStmt\020\315\005\022\026\n\021T_ClosePortalStmt\020\316\005\022"
  "\022\n\rT_ClusterStmt\020\317\005\022\017\n\nT_CopyStmt\020\320\005\022\021\n\014"
  "T_CreateStmt\020\321\005\022\021\n\014T_DefineStmt\020\322\005\022\017\n\nT_"
  "DropStmt\020\323\005\022\026\n\021T_DropForeignStmt\020\324\005\022\023\n\016T"
  "_TruncateStmt\020\325\005\022\020\n\013T_PurgeStmt\020\326\005\022\026\n\021T_"
  "TimeCapsuleStmt\020\327\005\022\022\n\rT_CommentStmt\020\330\005\022\020"
  "\n\013T_FetchStmt\020\331\005\022\020\n\013T_IndexStmt\020\332\005\022\031\n\024T_"
  "CreateFunctionStmt\020\333\005\022\030\n\023T_AlterFunction"
  "Stmt\020\334\005\022\026\n\021T_CreateEventStmt\020\335\005\022\025\n\020T_Alt"
  "erEventStmt\020\336\005\022\024\n\017T_DropEventStmt\020\337\005\022\024\n\017"
  "T_ShowEventStmt\020\340\005\022\022\n\rT_CompileStmt\020\341\005\022\r"
  "\n\010T_DoStmt\020\342\005\022\021\n\014T_RenameStmt\020\343\005\022\017\n\nT_Ru"
  "leStmt\020\344\005\022\021\n\014T_NotifyStmt\020\345\005\022\021\n\014T_Listen"
  "Stmt\020\346\005\022\023\n\016T_UnlistenStmt\020\347\005\022\026\n\021T_Transa"
  "ctionStmt\020\350\005\022\017\n\nT_ViewStmt\020\351\005\022\017\n\nT_LoadS"
  "tmt\020\352\005\022\027\n\022T_CreateDomainStmt\020\353\005\022\023\n\016T_Cre"
  "atedbStmt\020\354\005\022\021\n\014T_DropdbStmt\020\355\005\022\021\n\014T_Vac"
  "uumStmt\020\356\005\022\022\n\rT_ExplainStmt\020\357\005\022\030\n\023T_Crea"
  "teTableAsStmt\020\360\005\022\024\n\017T_CreateSeqStmt\020\361\005\022\023"
  "\n\016T_AlterSeqStmt\020\362\005\022\026\n\021T_VariableSetStmt"
  "\020\363\005\022\027\n\022T_VariableShowStmt\020\364\005\022\023\n\016T_Shutdo"
  "wnStmt\020\365\005\022\022\n\rT_DiscardStmt\020\366\005\022\025\n\020T_Creat"
  "eTrigStmt\020\367\005\022\026\n\021T_CreatePLangStmt\020\370\005\022\025\n\020"
  "T_CreateRoleStmt\020\371\005\022\024\n\017T_AlterRoleStmt\020\372"
  "\005\022\023\n\016T_DropRoleStmt\020\373\005\022\017\n\nT_LockStmt\020\374\005\022"
  "\031\n\024T_ConstraintsSetStmt\020\375\005\022\022\n\rT_ReindexS"
  "tmt\020\376\005\022\025\n\020T_CheckPointStmt\020\377\005\022\022\n\rT_Barri"
  "erStmt\020\200\006\022\027\n\022T_CreateSchemaStmt\020\201\006\022\030\n\023T_"
  "AlterDatabaseStmt\020\202\006\022\033\n\026T_AlterDatabaseS"
  "etStmt\020\203\006\022\027\n\022T_AlterRoleSetStmt\020\204\006\022\033\n\026T_"
  "CreateConversionStmt\020\205\006\022\025\n\020T_CreateCastS"
  "tmt\020\206\006\022\030\n\023T_CreateOpClassStmt\020\207\006\022\031\n\024T_Cr"
  "eateOpFamilyStmt\020\210\006\022\030\n\023T_AlterOpFamilySt"
  "mt\020\211\006\022\022\n\rT_PrepareStmt\020\212\006\022\022\n\rT_ExecuteSt"
  "mt\020\213\006\022\025\n\020T_DeallocateStmt\020\214\006\022\030\n\023T_Declar"
  "eCursorStmt\020\215\006\022\033\n\026T_CreateTableSpaceStmt"
  "\020\216\006\022\031\n\024T_DropTableSpaceStmt\020\217\006\022\034\n\027T_Alte"
  "rObjectSchemaStmt\020\220\006\022\025\n\020T_AlterOwnerStmt"
  "\020\221\006\022\024\n\017T_DropOwnedStmt\020\222\006\022\030\n\023T_ReassignO"
  "wnedStmt\020\223\006\022\030\n\023T_CompositeTypeStmt\020\224\006\022\026\n"
  "\021T_TableOfTypeStmt\020\225\006\022\025\n\020T_CreateEnumStm"
  "t\020\226\006\022\024\n\017T_CreateSetStmt\020\227\006\022\026\n\021T_CreateRa"
  "ngeStmt\020\230\006\022\024\n\017T_AlterEnumStmt\020\231\006\022\034\n\027T_Al"
  "terTSDictionaryStmt\020\232\006\022\037\n\032T_AlterTSConfi"
  "gurationStmt\020\233\006\022\024\n\017T_CreateFdwStmt\020\234\006\022\023\n"
  "\016T_AlterFdwStmt\020\235\006\022\036\n\031T_CreateForeignSer"
  "verStmt\020\236\006\022\035\n\030T_AlterForeignServerStmt\020\237"
  "\006\022\034\n\027T_CreateUserMappingStmt\020\240\006\022\033\n\026T_Alt"
  "erUserMappingStmt\020\241\006\022\032\n\025T_DropUserMappin"
  "gStmt\020\242\006\022\025\n\020T_ExecDirectStmt\020\243\006\022\024\n\017T_Cle"
  "anConnStmt\020\244\006\022!\n\034T_AlterTableSpaceOption"
  "sStmt\020\245\006\022\023\n\016T_SecLabelStmt\020\246\006\022\035\n\030T_Creat"
  "eForeignTableStmt\020\247\006\022\032\n\025T_CreateExtensio"
  "nStmt\020\250\006\022\031\n\024T_AlterExtensionStmt\020\251\006\022!\n\034T"
  "_AlterExtensionContentsStmt\020\252\006\022\032\n\025T_Crea"
  "teEventTrigStmt\020\253\006\022\031\n\024T_AlterEventTrigSt"
  "mt\020\254\006\022\033\n\026T_CreateDataSourceStmt\020\255\006\022\032\n\025T_"
  "AlterDataSourceStmt\020\256\006\022\032\n\025T_ReplicaIdent"
  "ityStmt\020\257\006\022\032\n\025T_CreateDirectoryStmt\020\260\006\022\030"
  "\n\023T_DropDirectoryStmt\020\261\006\022\032\n\025T_CreateRlsP"
  "olicyStmt\020\262\006\022\031\n\024T_AlterRlsPolicyStmt\020\263\006\022"
  "\031\n\024T_RefreshMatViewStmt\020\264\006\022\026\n\021T_AlterSys"
  "temStmt\020\265\006\022\'\n\"T_CreateWeakPasswordDictio"
  "naryStmt\020\266\006\022%\n T_DropWeakPasswordDiction"
  "aryStmt\020\267\006\022\030\n\023T_CreatePackageStmt\020\270\006\022\034\n\027"
  "T_CreatePackageBodyStmt\020\271\006\022\033\n\026T_AddTable"
  "IntoCBIState\020\272\006\022\034\n\027T_CreatePublicationSt"
  "mt\020\273\006\022\033\n\026T_AlterPublicationStmt\020\274\006\022\035\n\030T_"
  "CreateSubscriptionStmt\020\275\006\022\034\n\027T_AlterSubs"
  "criptionStmt\020\276\006\022\033\n\026T_DropSubscriptionStm"
  "t\020\277\006\022\021\n\014T_ShrinkStmt\020\300\006\022\033\n\026T_VariableMul"
  "tiSetStmt\020\301\006\022\r\n\010T_A_Expr\020\204\007\022\020\n\013T_ColumnR"
  "ef\020\205\007\022\017\n\nT_ParamRef\020\206\007\022\016\n\tT_A_Const\020\207\007\022\017"
  "\n\nT_FuncCall\020\210\007\022\r\n\010T_A_Star\020\211\007\022\020\n\013T_A_In"
  "dices\020\212\007\022\024\n\017T_A_Indirection\020\213\007\022\022\n\rT_A_Ar"
  "rayExpr\020\214\007\022\020\n\013T_ResTarget\020\215\007\022\017\n\nT_TypeCa"
  "st\020\216\007\022\024\n\017T_CollateClause\020\217\007\022\r\n\010T_SortBy\020"
  "\220\007\022\020\n\013T_WindowDef\020\221\007\022\025\n\020T_RangeSubselect"
  "\020\222\007\022\024\n\017T_RangeFunction\020\223\007\022\027\n\022T_RangeTabl"
  "eSample\020\224\007\022\027\n\022T_RangeTimeCapsule\020\225\007\022\017\n\nT"
  "_TypeName\020\226\007\022\020\n\013T_ColumnDef\020\227\007\022\020\n\013T_Inde"
  "xElem\020\230\007\022\021\n\014T_Constraint\020\231\007\022\016\n\tT_DefElem"
  "\020\232\007\022\024\n\017T_RangeTblEntry\020\233\007\022\026\n\021T_WithCheck"
  "Option\020\234\007\022\030\n\023T_TableSampleClause\020\235\007\022\030\n\023T"
  "_TimeCapsuleClause\020\236\007\022\032\n\025T_IndexHintDefi"
  "nition\020\237\007\022\034\n\027T_IndexHintRelationData\020\240\007\022"
  "\026\n\021T_SortGroupClause\020\241\007\022\022\n\rT_GroupingSet"
  "\020\242\007\022\023\n\016T_WindowClause\020\243\007\022\022\n\rT_PrivGrante"
  "e\020\244\007\022\023\n\016T_FuncWithArgs\020\245\007\022\021\n\014T_AccessPri"
  "v\020\246\007\022\r\n\010T_DbPriv\020\247\007\022\030\n\023T_CreateOpClassIt"
  "em\020\250\007\022\026\n\021T_TableLikeClause\020\251\007\022\030\n\023T_Funct"
  "ionParameter\020\252\007\022\024\n\017T_LockingClause\020\253\007\022\024\n"
  "\017T_RowMarkClause\020\254\007\022\023\n\016T_XmlSerialize\020\255\007"
  "\022\021\n\014T_WithClause\020\256\007\022\026\n\021T_CommonTableExpr"
  "\020\257\007\022\027\n\022T_StartWithOptions\020\260\007\022\024\n\017T_Prunin"
  "gResult\020\261\007\022 \n\033T_SubPartitionPruningResul"
  "t\020\262\007\022\017\n\nT_Position\020\263\007\022\023\n\016T_LoadWhenExpr\020"
  "\264\007\022\026\n\021T_MergeWhenClause\020\265\007\022\023\n\016T_UpsertCl"
  "ause\020\266\007\022\022\n\rT_CopyColExpr\020\267\007\022\026\n\021T_StartWi"
  "thClause\020\270\007\022\035\n\030T_StartWithTargetRelInfo\020"
  "\271\007\022\024\n\017T_StartWithInfo\020\272\007\022\030\n\023T_SqlLoadCol"
  "PosInfo\020\273\007\022\030\n\023T_SqlLoadScalarSpec\020\274\007\022\026\n\021"
  "T_SqlLoadSequInfo\020\275\007\022\030\n\023T_SqlLoadFillerI"
  "nfo\020\276\007\022\026\n\021T_SqlLoadConsInfo\020\277\007\022\025\n\020T_SqlL"
  "oadColExpr\020\300\007\022\024\n\017T_AutoIncrement\020\301\007\022\021\n\014T"
  "_RenameCell\020\302\007\022\030\n\023T_IdentifySystemCmd\020\303\007"
  "\022\031\n\024T_IdentifyVersionCmd\020\304\007\022\026\n\021T_Identif"
  "yModeCmd\020\305\007\022\030\n\023T_IdentifyMaxLsnCmd\020\306\007\022\035\n"
  "\030T_IdentifyConsistenceCmd\020\307\007\022\031\n\024T_Identi"
  "fyChannelCmd\020\310\007\022\024\n\017T_IdentifyAZCmd\020\311\007\022\024\n"
  "\017T_BaseBackupCmd\020\312\007\022\037\n\032T_CreateReplicati"
  "onSlotCmd\020\313\007\022\035\n\030T_DropReplicationSlotCmd"
  "\020\314\007\022\032\n\025T_StartReplicationCmd\020\315\007\022\034\n\027T_Adv"
  "anceReplicationCmd\020\316\007\022\036\n\031T_StartDataRepl"
  "icationCmd\020\317\007\022\034\n\027T_FetchMotCheckpointCmd"
  "\020\320\007\022\r\n\010T_SQLCmd\020\321\007\022\022\n\rT_TriggerData\020\324\007\022\027"
  "\n\022T_EventTriggerData\020\325\007\022\024\n\017T_ReturnSetIn"
  "fo\020\326\007\022\027\n\022T_WindowObjectData\020\327\007\022\020\n\013T_TIDB"
  "itmap\020\330\007\022\026\n\021T_InlineCodeBlock\020\331\007\022\021\n\014T_Fd"
  "wRoutine\020\332\007\022\032\n\025T_DistFdwDataNodeTask\020\333\007\022"
  "\031\n\024T_DistFdwFileSegment\020\334\007\022\020\n\013T_SplitInf"
  "o\020\335\007\022\017\n\nT_SplitMap\020\336\007\022\025\n\020T_DfsPrivateIte"
  "m\020\337\007\022\026\n\021T_ErrorCacheEntry\020\340\007\022\027\n\022T_Foreig"
  "nPartState\020\341\007\022\023\n\016T_RoachRoutine\020\342\007\022\016\n\tT_"
  "VecPlan\020\350\007\022\020\n\013T_VecResult\020\351\007\022\025\n\020T_VecMod"
  "ifyTable\020\352\007\022\020\n\013T_VecAppend\020\353\007\022\026\n\021T_VecPa"
  "rtIterator\020\354\007\022\025\n\020T_VecMergeAppend\020\355\007\022\030\n\023"
  "T_VecRecursiveUnion\020\356\007\022\016\n\tT_VecScan\020\357\007\022\021"
  "\n\014T_CStoreScan\020\360\007\022\023\n\016T_VecIndexScan\020\361\007\022\027"
  "\n\022T_VecIndexOnlyScan\020\362\007\022\031\n\024T_VecBitmapIn"
  "dexScan\020\363\007\022\030\n\023T_VecBitmapHeapScan\020\364\007\022\026\n\021"
  "T_VecSubqueryScan\020\365\007\022\025\n\020T_VecForeignScan"
  "\020\366\007\022\022\n\rT_VecNestLoop\020\367\007\022\023\n\016T_VecMergeJoi"
  "n\020\370\007\022\022\n\rT_VecHashJoin\020\371\007\022\022\n\rT_VecMateria"
  "l\020\372\007\022\016\n\tT_VecSort\020\373\007\022\017\n\nT_VecGroup\020\374\007\022\r\n"
  "\010T_VecAgg\020\375\007\022\023\n\016T_VecWindowAgg\020\376\007\022\020\n\013T_V"
  "ecUnique\020\377\007\022\016\n\tT_VecHash\020\200\010\022\017\n\nT_VecSetO"
  "p\020\201\010\022\022\n\rT_VecLockRows\020\202\010\022\017\n\nT_VecLimit\020\203"
  "\010\022\020\n\013T_VecStream\020\204\010\022\017\n\nT_RowToVec\020\205\010\022\017\n\n"
  "T_VecToRow\020\206\010\022\026\n\021T_CStoreIndexScan\020\207\010\022\032\n"
  "\025T_CStoreIndexCtidScan\020\210\010\022\032\n\025T_CStoreInd"
  "exHeapScan\020\211\010\022\025\n\020T_CStoreIndexAnd\020\212\010\022\024\n\017"
  "T_CStoreIndexOr\020\213\010\022\025\n\020T_VecRemoteQuery\020\214"
  "\010\022\026\n\021T_CBTreeScanState\020\215\010\022\032\n\025T_CBTreeOnl"
  "yScanState\020\216\010\022!\n\034T_CstoreBitmapIndexScan"
  "State\020\217\010\022\024\n\017T_VecStartState\020\321\017\022\024\n\017T_RowT"
  "oVecState\020\322\017\022\022\n\rT_VecAggState\020\323\017\022\027\n\022T_Ve"
  "cHashJoinState\020\324\017\022\025\n\020T_VecStreamState\020\325\017"
  "\022\023\n\016T_VecSortState\020\326\017\022\032\n\025T_VecForeignSca"
  "nState\020\327\017\022\026\n\021T_CStoreScanState\020\330\017\022\033\n\026T_C"
  "StoreIndexScanState\020\331\017\022\037\n\032T_CStoreIndexC"
  "tidScanState\020\332\017\022\037\n\032T_CStoreIndexHeapScan"
  "State\020\333\017\022\032\n\025T_CStoreIndexAndState\020\334\017\022\031\n\024"
  "T_CStoreIndexOrState\020\335\017\022\032\n\025T_VecRemoteQu"
  "eryState\020\336\017\022\025\n\020T_VecResultState\020\337\017\022\033\n\026T_"
  "VecSubqueryScanState\020\340\017\022\032\n\025T_VecModifyTa"
  "bleState\020\341\017\022\033\n\026T_VecPartIteratorState\020\342\017"
  "\022\025\n\020T_VecAppendState\020\343\017\022\024\n\017T_VecLimitSta"
  "te\020\344\017\022\024\n\017T_VecGroupState\020\345\017\022\025\n\020T_VecUniq"
  "ueState\020\346\017\022\024\n\017T_VecSetOpState\020\347\017\022\027\n\022T_Ve"
  "cNestLoopState\020\350\017\022\027\n\022T_VecMaterialState\020"
  "\351\017\022\030\n\023T_VecMergeJoinState\020\352\017\022\030\n\023T_VecWin"
  "dowAggState\020\353\017\022\027\n\022T_HDFSTableAnalyze\020\354\017\022"
  "\027\n\022T_ForeignTableDesc\020\355\017\022\023\n\016T_AttrMetaDa"
  "ta\020\356\017\022\027\n\022T_RelationMetaData\020\357\017\022\025\n\020T_Fore"
  "ignOptions\020\360\017\022\036\n\031T_InformationalConstrai"
  "nt\020\361\017\022\021\n\014T_GroupingId\020\362\017\022\032\n\025T_GroupingId"
  "ExprState\020\363\017\022\025\n\020T_BloomFilterSet\020\364\017\022\020\n\013T"
  "_HintState\020\365\017\022\025\n\020T_OuterInnerRels\020\366\017\022\025\n\020"
  "T_JoinMethodHint\020\367\017\022\022\n\rT_LeadingHint\020\370\017\022"
  "\017\n\nT_RowsHint\020\371\017\022\021\n\014T_StreamHint\020\372\017\022\024\n\017T"
  "_BlockNameHint\020\373\017\022\025\n\020T_ScanMethodHint\020\374\017"
  "\022\024\n\017T_MultiNodeHint\020\375\017\022\023\n\016T_PredpushHint"
  "\020\376\017\022\034\n\027T_PredpushSameLevelHint\020\377\017\022\017\n\nT_S"
  "kewHint\020\200\020\022\022\n\rT_RewriteHint\020\201\020\022\021\n\014T_Gath"
  "erHint\020\202\020\022\016\n\tT_SetHint\020\203\020\022\024\n\017T_PlanCache"
  "Hint\020\204\020\022\023\n\016T_NoExpandHint\020\205\020\022\024\n\017T_SqlIgn"
  "oreHint\020\206\020\022\020\n\013T_NoGPCHint\020\207\020\022\026\n\021T_PgFdwR"
  "emoteInfo\020\210\020\022\023\n\016T_TableLikeCtx\020\211\020\022\025\n\020T_S"
  "kewHintTransf\020\212\020\022\022\n\rT_SkewRelInfo\020\213\020\022\025\n\020"
  "T_SkewColumnInfo\020\214\020\022\024\n\017T_SkewValueInfo\020\215"
  "\020\022\023\n\016T_QualSkewInfo\020\216\020\022\030\n\023T_CreateSynony"
  "mStmt\020\217\020\022\026\n\021T_DropSynonymStmt\020\220\020\022\021\n\014T_Bu"
  "cketInfo\020\221\020\022\035\n\030T_ClientLogicGlobalParam\020"
  "\222\020\022\036\n\031T_CreateClientLogicGlobal\020\223\020\022\035\n\030T_"
  "ClientLogicColumnParam\020\224\020\022\036\n\031T_CreateCli"
  "entLogicColumn\020\225\020\022\033\n\026T_ClientLogicColumn"
  "Ref\020\226\020\022\024\n\017T_ExprWithComma\020\227\020\022\026\n\021T_Create"
  "ModelStmt\020\210\'\022\030\n\023T_PredictByFunction\020\211\'\022\021"
  "\n\014T_TrainModel\020\212\'\022\027\n\022T_ExplainModelStmt\020"
  "\213\'\022\027\n\022T_PLDebug_variable\020\214\'\022\031\n\024T_PLDebug"
  "_breakPoint\020\215\'\022\024\n\017T_PLDebug_frame\020\216\'\022\022\n\r"
  "T_TdigestData\020\217\'\022\034\n\027T_AdvanceCatalogXmin"
  "Cmd\020\220\'\022\025\n\020T_CachedPlanInfo\020\221\'\022\023\n\016T_CondI"
  "nterval\020\222\'\022\016\n\tT_IndexCI\020\223\'\022\014\n\007T_RelCI\020\224\'"
  "\022\024\n\017T_CentroidPoint\020\225\'\022\022\n\rT_UserSetElem\020"
  "\226\'\022\016\n\tT_UserVar\020\227\'\022\034\n\027T_CharsetCollateOp"
  "tions\020\230\'\022\026\n\021T_FunctionSources\020\231\'\022\024\n\017T_Ch"
  "arsetClause\020\232\'*i\n\023RemoteQueryExecType\022\025\n"
  "\021EXEC_ON_DATANODES\020\000\022\022\n\016EXEC_ON_COORDS\020\001"
  "\022\025\n\021EXEC_ON_ALL_NODES\020\002\022\020\n\014EXEC_ON_NONE\020"
  "\003*\213\001\n\022RelationAccessType\022\030\n\024RELATION_ACC"
  "ESS_READ\020\000\022#\n\037RELATION_ACCESS_READ_FOR_U"
  "PDATE\020\001\022\032\n\026RELATION_ACCESS_UPDATE\020\002\022\032\n\026R"
  "ELATION_ACCESS_INSERT\020\003*\230\002\n\007CmdType\022\017\n\013C"
  "MD_UNKNOWN\020\000\022\016\n\nCMD_SELECT\020\001\022\016\n\nCMD_UPDA"
  "TE\020\002\022\016\n\nCMD_INSERT\020\003\022\016\n\nCMD_DELETE\020\004\022\r\n\t"
  "CMD_MERGE\020\005\022\017\n\013CMD_UTILITY\020\006\022\017\n\013CMD_PREP"
  "ARE\020\007\022\022\n\016CMD_DEALLOCATE\020\010\022\017\n\013CMD_EXECUTE"
  "\020\t\022\020\n\014CMD_TRUNCATE\020\n\022\017\n\013CMD_REINDEX\020\013\022\017\n"
  "\013CMD_NOTHING\020\014\022\013\n\007CMD_DDL\020\r\022\013\n\007CMD_DCL\020\016"
  "\022\013\n\007CMD_DML\020\017\022\013\n\007CMD_TCL\020\020b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_enumtag_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_enumtag_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_enumtag_2eproto_once;
static bool descriptor_table_enumtag_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enumtag_2eproto = {
  &descriptor_table_enumtag_2eproto_initialized, descriptor_table_protodef_enumtag_2eproto, "enumtag.proto", 15514,
  &descriptor_table_enumtag_2eproto_once, descriptor_table_enumtag_2eproto_sccs, descriptor_table_enumtag_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_enumtag_2eproto::offsets,
  file_level_metadata_enumtag_2eproto, 0, file_level_enum_descriptors_enumtag_2eproto, file_level_service_descriptors_enumtag_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_enumtag_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_enumtag_2eproto), true);
namespace proto_plan {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enumtag_2eproto);
  return file_level_enum_descriptors_enumtag_2eproto[0];
}
bool NodeTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 316:
    case 317:
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 325:
    case 326:
    case 327:
    case 328:
    case 329:
    case 330:
    case 331:
    case 332:
    case 333:
    case 334:
    case 335:
    case 336:
    case 337:
    case 338:
    case 339:
    case 340:
    case 341:
    case 342:
    case 343:
    case 344:
    case 345:
    case 346:
    case 347:
    case 348:
    case 349:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 356:
    case 357:
    case 358:
    case 359:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
    case 424:
    case 425:
    case 426:
    case 427:
    case 428:
    case 429:
    case 430:
    case 431:
    case 432:
    case 433:
    case 434:
    case 435:
    case 436:
    case 437:
    case 438:
    case 439:
    case 440:
    case 441:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 649:
    case 650:
    case 651:
    case 652:
    case 653:
    case 654:
    case 655:
    case 656:
    case 657:
    case 658:
    case 659:
    case 660:
    case 661:
    case 700:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 713:
    case 714:
    case 715:
    case 716:
    case 717:
    case 718:
    case 719:
    case 720:
    case 721:
    case 722:
    case 723:
    case 724:
    case 725:
    case 726:
    case 727:
    case 728:
    case 729:
    case 730:
    case 731:
    case 732:
    case 733:
    case 734:
    case 735:
    case 736:
    case 737:
    case 738:
    case 739:
    case 740:
    case 741:
    case 742:
    case 743:
    case 744:
    case 745:
    case 746:
    case 747:
    case 748:
    case 749:
    case 750:
    case 751:
    case 752:
    case 753:
    case 754:
    case 755:
    case 756:
    case 757:
    case 758:
    case 759:
    case 760:
    case 761:
    case 762:
    case 763:
    case 764:
    case 765:
    case 766:
    case 767:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 773:
    case 774:
    case 775:
    case 776:
    case 777:
    case 778:
    case 779:
    case 780:
    case 781:
    case 782:
    case 783:
    case 784:
    case 785:
    case 786:
    case 787:
    case 788:
    case 789:
    case 790:
    case 791:
    case 792:
    case 793:
    case 794:
    case 795:
    case 796:
    case 797:
    case 798:
    case 799:
    case 800:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 912:
    case 913:
    case 914:
    case 915:
    case 916:
    case 917:
    case 918:
    case 919:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 927:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 935:
    case 936:
    case 937:
    case 938:
    case 939:
    case 940:
    case 941:
    case 942:
    case 943:
    case 944:
    case 945:
    case 946:
    case 947:
    case 948:
    case 949:
    case 950:
    case 951:
    case 952:
    case 953:
    case 954:
    case 955:
    case 956:
    case 957:
    case 958:
    case 959:
    case 960:
    case 961:
    case 962:
    case 963:
    case 964:
    case 965:
    case 966:
    case 967:
    case 968:
    case 969:
    case 970:
    case 971:
    case 972:
    case 973:
    case 974:
    case 975:
    case 976:
    case 977:
    case 980:
    case 981:
    case 982:
    case 983:
    case 984:
    case 985:
    case 986:
    case 987:
    case 988:
    case 989:
    case 990:
    case 991:
    case 992:
    case 993:
    case 994:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 2029:
    case 2030:
    case 2031:
    case 2032:
    case 2033:
    case 2034:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2044:
    case 2045:
    case 2046:
    case 2047:
    case 2048:
    case 2049:
    case 2050:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2060:
    case 2061:
    case 2062:
    case 2063:
    case 2064:
    case 2065:
    case 2066:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 5000:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5013:
    case 5014:
    case 5015:
    case 5016:
    case 5017:
    case 5018:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteQueryExecType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enumtag_2eproto);
  return file_level_enum_descriptors_enumtag_2eproto[1];
}
bool RemoteQueryExecType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationAccessType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enumtag_2eproto);
  return file_level_enum_descriptors_enumtag_2eproto[2];
}
bool RelationAccessType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enumtag_2eproto);
  return file_level_enum_descriptors_enumtag_2eproto[3];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

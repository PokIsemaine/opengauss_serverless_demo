// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_stmt.proto

#include "query_stmt.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bitmapset_execNodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_List_execNodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_5fstmt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_query_5fstmt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_5fstmt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeDefinition_query_5fstmt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_5fstmt_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeGroupQueryMem_query_5fstmt_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Plan_query_5fplan_2eproto;
namespace proto_plan {
class NodeDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeDefinition> _instance;
} _NodeDefinition_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
} _Node_default_instance_;
class NodeGroupQueryMemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeGroupQueryMem> _instance;
} _NodeGroupQueryMem_default_instance_;
class PlannedStmtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlannedStmt> _instance;
} _PlannedStmt_default_instance_;
}  // namespace proto_plan
static void InitDefaultsscc_info_Node_query_5fstmt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_plan::_Node_default_instance_;
    new (ptr) ::proto_plan::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_plan::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Node_query_5fstmt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Node_query_5fstmt_2eproto}, {}};

static void InitDefaultsscc_info_NodeDefinition_query_5fstmt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_plan::_NodeDefinition_default_instance_;
    new (ptr) ::proto_plan::NodeDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_plan::NodeDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeDefinition_query_5fstmt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeDefinition_query_5fstmt_2eproto}, {}};

static void InitDefaultsscc_info_NodeGroupQueryMem_query_5fstmt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_plan::_NodeGroupQueryMem_default_instance_;
    new (ptr) ::proto_plan::NodeGroupQueryMem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_plan::NodeGroupQueryMem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeGroupQueryMem_query_5fstmt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeGroupQueryMem_query_5fstmt_2eproto}, {}};

static void InitDefaultsscc_info_PlannedStmt_query_5fstmt_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_plan::_PlannedStmt_default_instance_;
    new (ptr) ::proto_plan::PlannedStmt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_plan::PlannedStmt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_PlannedStmt_query_5fstmt_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_PlannedStmt_query_5fstmt_2eproto}, {
      &scc_info_Plan_query_5fplan_2eproto.base,
      &scc_info_List_execNodes_2eproto.base,
      &scc_info_Node_query_5fstmt_2eproto.base,
      &scc_info_Bitmapset_execNodes_2eproto.base,
      &scc_info_NodeDefinition_query_5fstmt_2eproto.base,
      &scc_info_NodeGroupQueryMem_query_5fstmt_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_query_5fstmt_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_query_5fstmt_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_query_5fstmt_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_query_5fstmt_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeoid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodename_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodehost_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeport_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodectlport_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodesctpport_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodehost1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeport1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodectlport1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodesctpport1_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, hostisprimary_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeisprimary_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeispreferred_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeis_central_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, nodeis_active_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeDefinition, shard_oid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Node, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, ng_oid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, nodegroup_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::NodeGroupQueryMem, query_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, commandtype_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, queryid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, hasreturning_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, hasmodifyingcte_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, hasignore_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, cansettag_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, transientplan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dependsonrole_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, is_flt_frame_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, plantree_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, rtable_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, resultrelations_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, utilitystmt_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, subplans_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, rewindplanids_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, rowmarks_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, relationoids_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, invalitems_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, nparamexec_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_streams_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, max_push_sql_num_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, gather_count_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_nodes_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, nodesdefinition_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, instrument_option_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_plannodes_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, query_mem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, assigned_query_mem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, is_dynmaic_smp_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_max_cpu_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_avail_cpu_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_cpu_util_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_active_statement_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_query_estimate_cpu_usge_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_plan_optimal_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_plan_original_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_dop_mem_limit_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, dynsmp_min_non_spill_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, num_bucketmaps_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, bucketmap_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, bucketcnt_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, query_string_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, subplan_ids_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, initplan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, datadestrelindex_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, maxbloomfilternum_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, query_dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, plannertime_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, in_compute_pool_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, has_obsrel_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, plan_hint_warning_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, noanalyze_rellist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, ng_num_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, ng_querymem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, ng_use_plana_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, isrowtriggershippable_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, is_stream_plan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, multi_node_hint_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, uniquesqlid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::PlannedStmt, cause_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto_plan::NodeDefinition)},
  { 22, -1, sizeof(::proto_plan::Node)},
  { 28, -1, sizeof(::proto_plan::NodeGroupQueryMem)},
  { 36, -1, sizeof(::proto_plan::PlannedStmt)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_NodeDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_NodeGroupQueryMem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_PlannedStmt_default_instance_),
};

const char descriptor_table_protodef_query_5fstmt_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020query_stmt.proto\022\nproto_plan\032\020query_pl"
  "an.proto\032\renumtag.proto\032\017execNodes.proto"
  "\"\356\002\n\016NodeDefinition\022\017\n\007nodeoid\030\001 \001(\r\022\016\n\006"
  "nodeid\030\002 \001(\005\022\020\n\010nodename\030\003 \001(\t\022\020\n\010nodeho"
  "st\030\004 \001(\t\022\020\n\010nodeport\030\005 \001(\005\022\023\n\013nodectlpor"
  "t\030\006 \001(\005\022\024\n\014nodesctpport\030\007 \001(\005\022\021\n\tnodehos"
  "t1\030\010 \001(\t\022\021\n\tnodeport1\030\t \001(\005\022\024\n\014nodectlpo"
  "rt1\030\n \001(\005\022\025\n\rnodesctpport1\030\013 \001(\005\022\025\n\rhost"
  "isprimary\030\014 \001(\010\022\025\n\rnodeisprimary\030\r \001(\010\022\027"
  "\n\017nodeispreferred\030\016 \001(\010\022\026\n\016nodeis_centra"
  "l\030\017 \001(\010\022\025\n\rnodeis_active\030\020 \001(\010\022\021\n\tshard_"
  "oid\030\021 \001(\r\")\n\004Node\022!\n\004type\030\001 \001(\0162\023.proto_"
  "plan.NodeTag\"I\n\021NodeGroupQueryMem\022\016\n\006ng_"
  "oid\030\001 \001(\r\022\021\n\tnodegroup\030\002 \001(\t\022\021\n\tquery_me"
  "m\030\003 \003(\005\"\347\r\n\013PlannedStmt\022!\n\004type\030\001 \001(\0162\023."
  "proto_plan.NodeTag\022(\n\013commandType\030\002 \001(\0162"
  "\023.proto_plan.CmdType\022\017\n\007queryId\030\003 \001(\004\022\024\n"
  "\014hasReturning\030\004 \001(\010\022\027\n\017hasModifyingCTE\030\005"
  " \001(\010\022\021\n\thasIgnore\030\006 \001(\010\022\021\n\tcanSetTag\030\007 \001"
  "(\010\022\025\n\rtransientPlan\030\010 \001(\010\022\025\n\rdependsOnRo"
  "le\030\t \001(\010\022\024\n\014is_flt_frame\030\n \001(\010\022\"\n\010planTr"
  "ee\030\013 \001(\0132\020.proto_plan.Plan\022 \n\006rtable\030\014 \001"
  "(\0132\020.proto_plan.List\022)\n\017resultRelations\030"
  "\r \001(\0132\020.proto_plan.List\022%\n\013utilityStmt\030\016"
  " \001(\0132\020.proto_plan.Node\022\"\n\010subplans\030\017 \001(\013"
  "2\020.proto_plan.List\022,\n\rrewindPlanIDs\030\020 \001("
  "\0132\025.proto_plan.Bitmapset\022\"\n\010rowMarks\030\021 \001"
  "(\0132\020.proto_plan.List\022&\n\014relationOids\030\022 \001"
  "(\0132\020.proto_plan.List\022$\n\ninvalItems\030\023 \001(\013"
  "2\020.proto_plan.List\022\022\n\nnParamExec\030\024 \001(\005\022\023"
  "\n\013num_streams\030\025 \001(\005\022\030\n\020max_push_sql_num\030"
  "\026 \001(\005\022\024\n\014gather_count\030\027 \001(\005\022\021\n\tnum_nodes"
  "\030\030 \001(\005\0223\n\017nodesDefinition\030\031 \001(\0132\032.proto_"
  "plan.NodeDefinition\022\031\n\021instrument_option"
  "\030\032 \001(\005\022\025\n\rnum_plannodes\030\033 \001(\005\022\021\n\tquery_m"
  "em\030\034 \003(\005\022\032\n\022assigned_query_mem\030\035 \003(\005\022\026\n\016"
  "is_dynmaic_smp\030\036 \001(\010\022\026\n\016dynsmp_max_cpu\030\037"
  " \001(\005\022\030\n\020dynsmp_avail_cpu\030  \001(\005\022\027\n\017dynsmp"
  "_cpu_util\030! \001(\005\022\037\n\027dynsmp_active_stateme"
  "nt\030\" \001(\005\022&\n\036dynsmp_query_estimate_cpu_us"
  "ge\030# \001(\001\022\037\n\027dynsmp_plan_optimal_dop\030$ \001("
  "\005\022 \n\030dynsmp_plan_original_dop\030% \001(\005\022\034\n\024d"
  "ynsmp_dop_mem_limit\030& \001(\005\022 \n\030dynsmp_min_"
  "non_spill_dop\030\' \001(\005\022\026\n\016num_bucketmaps\030( "
  "\001(\005\022\021\n\tbucketMap\030) \003(\r\022\021\n\tbucketCnt\030* \003("
  "\005\022\024\n\014query_string\030+ \001(\t\022%\n\013subplan_ids\030,"
  " \001(\0132\020.proto_plan.List\022\"\n\010initPlan\030- \001(\013"
  "2\020.proto_plan.List\022\030\n\020dataDestRelIndex\030."
  " \001(\r\022\031\n\021MaxBloomFilterNum\030/ \001(\005\022\021\n\tquery"
  "_dop\0300 \001(\005\022\023\n\013plannertime\0301 \001(\001\022\027\n\017in_co"
  "mpute_pool\0302 \001(\010\022\022\n\nhas_obsrel\0303 \001(\010\022+\n\021"
  "plan_hint_warning\0304 \001(\0132\020.proto_plan.Lis"
  "t\022+\n\021noanalyze_rellist\0305 \001(\0132\020.proto_pla"
  "n.List\022\016\n\006ng_num\0306 \001(\005\0222\n\013ng_queryMem\0307 "
  "\001(\0132\035.proto_plan.NodeGroupQueryMem\022\024\n\014ng"
  "_use_planA\0308 \001(\010\022\035\n\025isRowTriggerShippabl"
  "e\0309 \001(\010\022\026\n\016is_stream_plan\030: \001(\010\022\027\n\017multi"
  "_node_hint\030; \001(\010\022\023\n\013uniqueSQLId\030< \001(\004\022\022\n"
  "\ncause_type\030= \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_query_5fstmt_2eproto_deps[3] = {
  &::descriptor_table_enumtag_2eproto,
  &::descriptor_table_execNodes_2eproto,
  &::descriptor_table_query_5fplan_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_query_5fstmt_2eproto_sccs[4] = {
  &scc_info_Node_query_5fstmt_2eproto.base,
  &scc_info_NodeDefinition_query_5fstmt_2eproto.base,
  &scc_info_NodeGroupQueryMem_query_5fstmt_2eproto.base,
  &scc_info_PlannedStmt_query_5fstmt_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_query_5fstmt_2eproto_once;
static bool descriptor_table_query_5fstmt_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fstmt_2eproto = {
  &descriptor_table_query_5fstmt_2eproto_initialized, descriptor_table_protodef_query_5fstmt_2eproto, "query_stmt.proto", 2345,
  &descriptor_table_query_5fstmt_2eproto_once, descriptor_table_query_5fstmt_2eproto_sccs, descriptor_table_query_5fstmt_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_query_5fstmt_2eproto::offsets,
  file_level_metadata_query_5fstmt_2eproto, 4, file_level_enum_descriptors_query_5fstmt_2eproto, file_level_service_descriptors_query_5fstmt_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_query_5fstmt_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_query_5fstmt_2eproto), true);
namespace proto_plan {

// ===================================================================

void NodeDefinition::InitAsDefaultInstance() {
}
class NodeDefinition::_Internal {
 public:
};

NodeDefinition::NodeDefinition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_plan.NodeDefinition)
}
NodeDefinition::NodeDefinition(const NodeDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodename().empty()) {
    nodename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  nodehost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodehost().empty()) {
    nodehost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodehost_);
  }
  nodehost1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodehost1().empty()) {
    nodehost1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodehost1_);
  }
  ::memcpy(&nodeoid_, &from.nodeoid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shard_oid_) -
    reinterpret_cast<char*>(&nodeoid_)) + sizeof(shard_oid_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.NodeDefinition)
}

void NodeDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeDefinition_query_5fstmt_2eproto.base);
  nodename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_oid_) -
      reinterpret_cast<char*>(&nodeoid_)) + sizeof(shard_oid_));
}

NodeDefinition::~NodeDefinition() {
  // @@protoc_insertion_point(destructor:proto_plan.NodeDefinition)
  SharedDtor();
}

void NodeDefinition::SharedDtor() {
  nodename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeDefinition& NodeDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeDefinition_query_5fstmt_2eproto.base);
  return *internal_default_instance();
}


void NodeDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.NodeDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodehost1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodeoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shard_oid_) -
      reinterpret_cast<char*>(&nodeoid_)) + sizeof(shard_oid_));
  _internal_metadata_.Clear();
}

const char* NodeDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 nodeoid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nodeoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nodename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeDefinition.nodename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodehost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_nodehost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeDefinition.nodehost"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodeport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          nodeport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodectlport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nodectlport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodesctpport = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nodesctpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodehost1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_nodehost1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeDefinition.nodehost1"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodeport1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          nodeport1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodectlport1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nodectlport1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodesctpport1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          nodesctpport1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hostisprimary = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          hostisprimary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nodeisprimary = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          nodeisprimary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nodeispreferred = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          nodeispreferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nodeis_central = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          nodeis_central_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool nodeis_active = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          nodeis_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 shard_oid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          shard_oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.NodeDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 nodeoid = 1;
  if (this->nodeoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_nodeoid(), target);
  }

  // int32 nodeid = 2;
  if (this->nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeid(), target);
  }

  // string nodename = 3;
  if (this->nodename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeDefinition.nodename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nodename(), target);
  }

  // string nodehost = 4;
  if (this->nodehost().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodehost().data(), static_cast<int>(this->_internal_nodehost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeDefinition.nodehost");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_nodehost(), target);
  }

  // int32 nodeport = 5;
  if (this->nodeport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nodeport(), target);
  }

  // int32 nodectlport = 6;
  if (this->nodectlport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nodectlport(), target);
  }

  // int32 nodesctpport = 7;
  if (this->nodesctpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nodesctpport(), target);
  }

  // string nodehost1 = 8;
  if (this->nodehost1().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodehost1().data(), static_cast<int>(this->_internal_nodehost1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeDefinition.nodehost1");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_nodehost1(), target);
  }

  // int32 nodeport1 = 9;
  if (this->nodeport1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_nodeport1(), target);
  }

  // int32 nodectlport1 = 10;
  if (this->nodectlport1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_nodectlport1(), target);
  }

  // int32 nodesctpport1 = 11;
  if (this->nodesctpport1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_nodesctpport1(), target);
  }

  // bool hostisprimary = 12;
  if (this->hostisprimary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_hostisprimary(), target);
  }

  // bool nodeisprimary = 13;
  if (this->nodeisprimary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_nodeisprimary(), target);
  }

  // bool nodeispreferred = 14;
  if (this->nodeispreferred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_nodeispreferred(), target);
  }

  // bool nodeis_central = 15;
  if (this->nodeis_central() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_nodeis_central(), target);
  }

  // bool nodeis_active = 16;
  if (this->nodeis_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_nodeis_active(), target);
  }

  // uint32 shard_oid = 17;
  if (this->shard_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_shard_oid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.NodeDefinition)
  return target;
}

size_t NodeDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.NodeDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodename = 3;
  if (this->nodename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // string nodehost = 4;
  if (this->nodehost().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodehost());
  }

  // string nodehost1 = 8;
  if (this->nodehost1().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodehost1());
  }

  // uint32 nodeoid = 1;
  if (this->nodeoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nodeoid());
  }

  // int32 nodeid = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodeid());
  }

  // int32 nodeport = 5;
  if (this->nodeport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodeport());
  }

  // int32 nodectlport = 6;
  if (this->nodectlport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodectlport());
  }

  // int32 nodesctpport = 7;
  if (this->nodesctpport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodesctpport());
  }

  // int32 nodeport1 = 9;
  if (this->nodeport1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodeport1());
  }

  // int32 nodectlport1 = 10;
  if (this->nodectlport1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodectlport1());
  }

  // int32 nodesctpport1 = 11;
  if (this->nodesctpport1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nodesctpport1());
  }

  // bool hostisprimary = 12;
  if (this->hostisprimary() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeisprimary = 13;
  if (this->nodeisprimary() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeispreferred = 14;
  if (this->nodeispreferred() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeis_central = 15;
  if (this->nodeis_central() != 0) {
    total_size += 1 + 1;
  }

  // bool nodeis_active = 16;
  if (this->nodeis_active() != 0) {
    total_size += 2 + 1;
  }

  // uint32 shard_oid = 17;
  if (this->shard_oid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shard_oid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_plan.NodeDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_plan.NodeDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_plan.NodeDefinition)
    MergeFrom(*source);
  }
}

void NodeDefinition::MergeFrom(const NodeDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.NodeDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodename().size() > 0) {

    nodename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodename_);
  }
  if (from.nodehost().size() > 0) {

    nodehost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodehost_);
  }
  if (from.nodehost1().size() > 0) {

    nodehost1_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodehost1_);
  }
  if (from.nodeoid() != 0) {
    _internal_set_nodeoid(from._internal_nodeoid());
  }
  if (from.nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from.nodeport() != 0) {
    _internal_set_nodeport(from._internal_nodeport());
  }
  if (from.nodectlport() != 0) {
    _internal_set_nodectlport(from._internal_nodectlport());
  }
  if (from.nodesctpport() != 0) {
    _internal_set_nodesctpport(from._internal_nodesctpport());
  }
  if (from.nodeport1() != 0) {
    _internal_set_nodeport1(from._internal_nodeport1());
  }
  if (from.nodectlport1() != 0) {
    _internal_set_nodectlport1(from._internal_nodectlport1());
  }
  if (from.nodesctpport1() != 0) {
    _internal_set_nodesctpport1(from._internal_nodesctpport1());
  }
  if (from.hostisprimary() != 0) {
    _internal_set_hostisprimary(from._internal_hostisprimary());
  }
  if (from.nodeisprimary() != 0) {
    _internal_set_nodeisprimary(from._internal_nodeisprimary());
  }
  if (from.nodeispreferred() != 0) {
    _internal_set_nodeispreferred(from._internal_nodeispreferred());
  }
  if (from.nodeis_central() != 0) {
    _internal_set_nodeis_central(from._internal_nodeis_central());
  }
  if (from.nodeis_active() != 0) {
    _internal_set_nodeis_active(from._internal_nodeis_active());
  }
  if (from.shard_oid() != 0) {
    _internal_set_shard_oid(from._internal_shard_oid());
  }
}

void NodeDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_plan.NodeDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDefinition::CopyFrom(const NodeDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.NodeDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDefinition::IsInitialized() const {
  return true;
}

void NodeDefinition::InternalSwap(NodeDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodename_.Swap(&other->nodename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodehost_.Swap(&other->nodehost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodehost1_.Swap(&other->nodehost1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nodeoid_, other->nodeoid_);
  swap(nodeid_, other->nodeid_);
  swap(nodeport_, other->nodeport_);
  swap(nodectlport_, other->nodectlport_);
  swap(nodesctpport_, other->nodesctpport_);
  swap(nodeport1_, other->nodeport1_);
  swap(nodectlport1_, other->nodectlport1_);
  swap(nodesctpport1_, other->nodesctpport1_);
  swap(hostisprimary_, other->hostisprimary_);
  swap(nodeisprimary_, other->nodeisprimary_);
  swap(nodeispreferred_, other->nodeispreferred_);
  swap(nodeis_central_, other->nodeis_central_);
  swap(nodeis_active_, other->nodeis_active_);
  swap(shard_oid_, other->shard_oid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Node::InitAsDefaultInstance() {
}
class Node::_Internal {
 public:
};

Node::Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_plan.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto_plan.Node)
}

void Node::SharedCtor() {
  type_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:proto_plan.Node)
  SharedDtor();
}

void Node::SharedDtor() {
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_query_5fstmt_2eproto.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_plan.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_plan.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_plan.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_plan.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeGroupQueryMem::InitAsDefaultInstance() {
}
class NodeGroupQueryMem::_Internal {
 public:
};

NodeGroupQueryMem::NodeGroupQueryMem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_plan.NodeGroupQueryMem)
}
NodeGroupQueryMem::NodeGroupQueryMem(const NodeGroupQueryMem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      query_mem_(from.query_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodegroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodegroup().empty()) {
    nodegroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodegroup_);
  }
  ng_oid_ = from.ng_oid_;
  // @@protoc_insertion_point(copy_constructor:proto_plan.NodeGroupQueryMem)
}

void NodeGroupQueryMem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeGroupQueryMem_query_5fstmt_2eproto.base);
  nodegroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ng_oid_ = 0u;
}

NodeGroupQueryMem::~NodeGroupQueryMem() {
  // @@protoc_insertion_point(destructor:proto_plan.NodeGroupQueryMem)
  SharedDtor();
}

void NodeGroupQueryMem::SharedDtor() {
  nodegroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeGroupQueryMem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeGroupQueryMem& NodeGroupQueryMem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeGroupQueryMem_query_5fstmt_2eproto.base);
  return *internal_default_instance();
}


void NodeGroupQueryMem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.NodeGroupQueryMem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_mem_.Clear();
  nodegroup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ng_oid_ = 0u;
  _internal_metadata_.Clear();
}

const char* NodeGroupQueryMem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 ng_oid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ng_oid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodegroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nodegroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.NodeGroupQueryMem.nodegroup"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 query_mem = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_query_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeGroupQueryMem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.NodeGroupQueryMem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ng_oid = 1;
  if (this->ng_oid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ng_oid(), target);
  }

  // string nodegroup = 2;
  if (this->nodegroup().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodegroup().data(), static_cast<int>(this->_internal_nodegroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.NodeGroupQueryMem.nodegroup");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodegroup(), target);
  }

  // repeated int32 query_mem = 3;
  {
    int byte_size = _query_mem_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_query_mem(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.NodeGroupQueryMem)
  return target;
}

size_t NodeGroupQueryMem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.NodeGroupQueryMem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 query_mem = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->query_mem_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _query_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string nodegroup = 2;
  if (this->nodegroup().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodegroup());
  }

  // uint32 ng_oid = 1;
  if (this->ng_oid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ng_oid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeGroupQueryMem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_plan.NodeGroupQueryMem)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeGroupQueryMem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeGroupQueryMem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_plan.NodeGroupQueryMem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_plan.NodeGroupQueryMem)
    MergeFrom(*source);
  }
}

void NodeGroupQueryMem::MergeFrom(const NodeGroupQueryMem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.NodeGroupQueryMem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_mem_.MergeFrom(from.query_mem_);
  if (from.nodegroup().size() > 0) {

    nodegroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodegroup_);
  }
  if (from.ng_oid() != 0) {
    _internal_set_ng_oid(from._internal_ng_oid());
  }
}

void NodeGroupQueryMem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_plan.NodeGroupQueryMem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeGroupQueryMem::CopyFrom(const NodeGroupQueryMem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.NodeGroupQueryMem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeGroupQueryMem::IsInitialized() const {
  return true;
}

void NodeGroupQueryMem::InternalSwap(NodeGroupQueryMem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_mem_.InternalSwap(&other->query_mem_);
  nodegroup_.Swap(&other->nodegroup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ng_oid_, other->ng_oid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeGroupQueryMem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlannedStmt::InitAsDefaultInstance() {
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->plantree_ = const_cast< ::proto_plan::Plan*>(
      ::proto_plan::Plan::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->rtable_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->resultrelations_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->utilitystmt_ = const_cast< ::proto_plan::Node*>(
      ::proto_plan::Node::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->subplans_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->rewindplanids_ = const_cast< ::proto_plan::Bitmapset*>(
      ::proto_plan::Bitmapset::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->rowmarks_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->relationoids_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->invalitems_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->nodesdefinition_ = const_cast< ::proto_plan::NodeDefinition*>(
      ::proto_plan::NodeDefinition::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->subplan_ids_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->initplan_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->plan_hint_warning_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->noanalyze_rellist_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_PlannedStmt_default_instance_._instance.get_mutable()->ng_querymem_ = const_cast< ::proto_plan::NodeGroupQueryMem*>(
      ::proto_plan::NodeGroupQueryMem::internal_default_instance());
}
class PlannedStmt::_Internal {
 public:
  static const ::proto_plan::Plan& plantree(const PlannedStmt* msg);
  static const ::proto_plan::List& rtable(const PlannedStmt* msg);
  static const ::proto_plan::List& resultrelations(const PlannedStmt* msg);
  static const ::proto_plan::Node& utilitystmt(const PlannedStmt* msg);
  static const ::proto_plan::List& subplans(const PlannedStmt* msg);
  static const ::proto_plan::Bitmapset& rewindplanids(const PlannedStmt* msg);
  static const ::proto_plan::List& rowmarks(const PlannedStmt* msg);
  static const ::proto_plan::List& relationoids(const PlannedStmt* msg);
  static const ::proto_plan::List& invalitems(const PlannedStmt* msg);
  static const ::proto_plan::NodeDefinition& nodesdefinition(const PlannedStmt* msg);
  static const ::proto_plan::List& subplan_ids(const PlannedStmt* msg);
  static const ::proto_plan::List& initplan(const PlannedStmt* msg);
  static const ::proto_plan::List& plan_hint_warning(const PlannedStmt* msg);
  static const ::proto_plan::List& noanalyze_rellist(const PlannedStmt* msg);
  static const ::proto_plan::NodeGroupQueryMem& ng_querymem(const PlannedStmt* msg);
};

const ::proto_plan::Plan&
PlannedStmt::_Internal::plantree(const PlannedStmt* msg) {
  return *msg->plantree_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::rtable(const PlannedStmt* msg) {
  return *msg->rtable_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::resultrelations(const PlannedStmt* msg) {
  return *msg->resultrelations_;
}
const ::proto_plan::Node&
PlannedStmt::_Internal::utilitystmt(const PlannedStmt* msg) {
  return *msg->utilitystmt_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::subplans(const PlannedStmt* msg) {
  return *msg->subplans_;
}
const ::proto_plan::Bitmapset&
PlannedStmt::_Internal::rewindplanids(const PlannedStmt* msg) {
  return *msg->rewindplanids_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::rowmarks(const PlannedStmt* msg) {
  return *msg->rowmarks_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::relationoids(const PlannedStmt* msg) {
  return *msg->relationoids_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::invalitems(const PlannedStmt* msg) {
  return *msg->invalitems_;
}
const ::proto_plan::NodeDefinition&
PlannedStmt::_Internal::nodesdefinition(const PlannedStmt* msg) {
  return *msg->nodesdefinition_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::subplan_ids(const PlannedStmt* msg) {
  return *msg->subplan_ids_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::initplan(const PlannedStmt* msg) {
  return *msg->initplan_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::plan_hint_warning(const PlannedStmt* msg) {
  return *msg->plan_hint_warning_;
}
const ::proto_plan::List&
PlannedStmt::_Internal::noanalyze_rellist(const PlannedStmt* msg) {
  return *msg->noanalyze_rellist_;
}
const ::proto_plan::NodeGroupQueryMem&
PlannedStmt::_Internal::ng_querymem(const PlannedStmt* msg) {
  return *msg->ng_querymem_;
}
void PlannedStmt::clear_plantree() {
  if (GetArenaNoVirtual() == nullptr && plantree_ != nullptr) {
    delete plantree_;
  }
  plantree_ = nullptr;
}
void PlannedStmt::clear_rtable() {
  if (GetArenaNoVirtual() == nullptr && rtable_ != nullptr) {
    delete rtable_;
  }
  rtable_ = nullptr;
}
void PlannedStmt::clear_resultrelations() {
  if (GetArenaNoVirtual() == nullptr && resultrelations_ != nullptr) {
    delete resultrelations_;
  }
  resultrelations_ = nullptr;
}
void PlannedStmt::clear_subplans() {
  if (GetArenaNoVirtual() == nullptr && subplans_ != nullptr) {
    delete subplans_;
  }
  subplans_ = nullptr;
}
void PlannedStmt::clear_rewindplanids() {
  if (GetArenaNoVirtual() == nullptr && rewindplanids_ != nullptr) {
    delete rewindplanids_;
  }
  rewindplanids_ = nullptr;
}
void PlannedStmt::clear_rowmarks() {
  if (GetArenaNoVirtual() == nullptr && rowmarks_ != nullptr) {
    delete rowmarks_;
  }
  rowmarks_ = nullptr;
}
void PlannedStmt::clear_relationoids() {
  if (GetArenaNoVirtual() == nullptr && relationoids_ != nullptr) {
    delete relationoids_;
  }
  relationoids_ = nullptr;
}
void PlannedStmt::clear_invalitems() {
  if (GetArenaNoVirtual() == nullptr && invalitems_ != nullptr) {
    delete invalitems_;
  }
  invalitems_ = nullptr;
}
void PlannedStmt::clear_subplan_ids() {
  if (GetArenaNoVirtual() == nullptr && subplan_ids_ != nullptr) {
    delete subplan_ids_;
  }
  subplan_ids_ = nullptr;
}
void PlannedStmt::clear_initplan() {
  if (GetArenaNoVirtual() == nullptr && initplan_ != nullptr) {
    delete initplan_;
  }
  initplan_ = nullptr;
}
void PlannedStmt::clear_plan_hint_warning() {
  if (GetArenaNoVirtual() == nullptr && plan_hint_warning_ != nullptr) {
    delete plan_hint_warning_;
  }
  plan_hint_warning_ = nullptr;
}
void PlannedStmt::clear_noanalyze_rellist() {
  if (GetArenaNoVirtual() == nullptr && noanalyze_rellist_ != nullptr) {
    delete noanalyze_rellist_;
  }
  noanalyze_rellist_ = nullptr;
}
PlannedStmt::PlannedStmt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_plan.PlannedStmt)
}
PlannedStmt::PlannedStmt(const PlannedStmt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      query_mem_(from.query_mem_),
      assigned_query_mem_(from.assigned_query_mem_),
      bucketmap_(from.bucketmap_),
      bucketcnt_(from.bucketcnt_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query_string().empty()) {
    query_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  if (from._internal_has_plantree()) {
    plantree_ = new ::proto_plan::Plan(*from.plantree_);
  } else {
    plantree_ = nullptr;
  }
  if (from._internal_has_rtable()) {
    rtable_ = new ::proto_plan::List(*from.rtable_);
  } else {
    rtable_ = nullptr;
  }
  if (from._internal_has_resultrelations()) {
    resultrelations_ = new ::proto_plan::List(*from.resultrelations_);
  } else {
    resultrelations_ = nullptr;
  }
  if (from._internal_has_utilitystmt()) {
    utilitystmt_ = new ::proto_plan::Node(*from.utilitystmt_);
  } else {
    utilitystmt_ = nullptr;
  }
  if (from._internal_has_subplans()) {
    subplans_ = new ::proto_plan::List(*from.subplans_);
  } else {
    subplans_ = nullptr;
  }
  if (from._internal_has_rewindplanids()) {
    rewindplanids_ = new ::proto_plan::Bitmapset(*from.rewindplanids_);
  } else {
    rewindplanids_ = nullptr;
  }
  if (from._internal_has_rowmarks()) {
    rowmarks_ = new ::proto_plan::List(*from.rowmarks_);
  } else {
    rowmarks_ = nullptr;
  }
  if (from._internal_has_relationoids()) {
    relationoids_ = new ::proto_plan::List(*from.relationoids_);
  } else {
    relationoids_ = nullptr;
  }
  if (from._internal_has_invalitems()) {
    invalitems_ = new ::proto_plan::List(*from.invalitems_);
  } else {
    invalitems_ = nullptr;
  }
  if (from._internal_has_nodesdefinition()) {
    nodesdefinition_ = new ::proto_plan::NodeDefinition(*from.nodesdefinition_);
  } else {
    nodesdefinition_ = nullptr;
  }
  if (from._internal_has_subplan_ids()) {
    subplan_ids_ = new ::proto_plan::List(*from.subplan_ids_);
  } else {
    subplan_ids_ = nullptr;
  }
  if (from._internal_has_initplan()) {
    initplan_ = new ::proto_plan::List(*from.initplan_);
  } else {
    initplan_ = nullptr;
  }
  if (from._internal_has_plan_hint_warning()) {
    plan_hint_warning_ = new ::proto_plan::List(*from.plan_hint_warning_);
  } else {
    plan_hint_warning_ = nullptr;
  }
  if (from._internal_has_noanalyze_rellist()) {
    noanalyze_rellist_ = new ::proto_plan::List(*from.noanalyze_rellist_);
  } else {
    noanalyze_rellist_ = nullptr;
  }
  if (from._internal_has_ng_querymem()) {
    ng_querymem_ = new ::proto_plan::NodeGroupQueryMem(*from.ng_querymem_);
  } else {
    ng_querymem_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&cause_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(cause_type_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.PlannedStmt)
}

void PlannedStmt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlannedStmt_query_5fstmt_2eproto.base);
  query_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plantree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cause_type_) -
      reinterpret_cast<char*>(&plantree_)) + sizeof(cause_type_));
}

PlannedStmt::~PlannedStmt() {
  // @@protoc_insertion_point(destructor:proto_plan.PlannedStmt)
  SharedDtor();
}

void PlannedStmt::SharedDtor() {
  query_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plantree_;
  if (this != internal_default_instance()) delete rtable_;
  if (this != internal_default_instance()) delete resultrelations_;
  if (this != internal_default_instance()) delete utilitystmt_;
  if (this != internal_default_instance()) delete subplans_;
  if (this != internal_default_instance()) delete rewindplanids_;
  if (this != internal_default_instance()) delete rowmarks_;
  if (this != internal_default_instance()) delete relationoids_;
  if (this != internal_default_instance()) delete invalitems_;
  if (this != internal_default_instance()) delete nodesdefinition_;
  if (this != internal_default_instance()) delete subplan_ids_;
  if (this != internal_default_instance()) delete initplan_;
  if (this != internal_default_instance()) delete plan_hint_warning_;
  if (this != internal_default_instance()) delete noanalyze_rellist_;
  if (this != internal_default_instance()) delete ng_querymem_;
}

void PlannedStmt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlannedStmt& PlannedStmt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlannedStmt_query_5fstmt_2eproto.base);
  return *internal_default_instance();
}


void PlannedStmt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.PlannedStmt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_mem_.Clear();
  assigned_query_mem_.Clear();
  bucketmap_.Clear();
  bucketcnt_.Clear();
  query_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && plantree_ != nullptr) {
    delete plantree_;
  }
  plantree_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rtable_ != nullptr) {
    delete rtable_;
  }
  rtable_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resultrelations_ != nullptr) {
    delete resultrelations_;
  }
  resultrelations_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && utilitystmt_ != nullptr) {
    delete utilitystmt_;
  }
  utilitystmt_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subplans_ != nullptr) {
    delete subplans_;
  }
  subplans_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rewindplanids_ != nullptr) {
    delete rewindplanids_;
  }
  rewindplanids_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rowmarks_ != nullptr) {
    delete rowmarks_;
  }
  rowmarks_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relationoids_ != nullptr) {
    delete relationoids_;
  }
  relationoids_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && invalitems_ != nullptr) {
    delete invalitems_;
  }
  invalitems_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && nodesdefinition_ != nullptr) {
    delete nodesdefinition_;
  }
  nodesdefinition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && subplan_ids_ != nullptr) {
    delete subplan_ids_;
  }
  subplan_ids_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initplan_ != nullptr) {
    delete initplan_;
  }
  initplan_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && plan_hint_warning_ != nullptr) {
    delete plan_hint_warning_;
  }
  plan_hint_warning_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && noanalyze_rellist_ != nullptr) {
    delete noanalyze_rellist_;
  }
  noanalyze_rellist_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ng_querymem_ != nullptr) {
    delete ng_querymem_;
  }
  ng_querymem_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cause_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(cause_type_));
  _internal_metadata_.Clear();
}

const char* PlannedStmt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .proto_plan.NodeTag type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto_plan::NodeTag>(val));
        } else goto handle_unusual;
        continue;
      // .proto_plan.CmdType commandType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_commandtype(static_cast<::proto_plan::CmdType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 queryId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          queryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasReturning = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hasreturning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasModifyingCTE = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hasmodifyingcte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasIgnore = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hasignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool canSetTag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          cansettag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool transientPlan = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          transientplan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dependsOnRole = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dependsonrole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_flt_frame = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_flt_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Plan planTree = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_plantree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List rtable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List resultRelations = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_resultrelations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Node utilityStmt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_utilitystmt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List subplans = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_subplans(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Bitmapset rewindPlanIDs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewindplanids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List rowMarks = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List relationOids = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_relationoids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List invalItems = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_invalitems(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nParamExec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          nparamexec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_streams = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_streams_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_push_sql_num = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          max_push_sql_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gather_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          gather_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_nodes = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          num_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.NodeDefinition nodesDefinition = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_nodesdefinition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 instrument_option = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          instrument_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_plannodes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          num_plannodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 query_mem = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_query_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224) {
          _internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 assigned_query_mem = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_assigned_query_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232) {
          _internal_add_assigned_query_mem(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_dynmaic_smp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          is_dynmaic_smp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_max_cpu = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          dynsmp_max_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_avail_cpu = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          dynsmp_avail_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_cpu_util = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          dynsmp_cpu_util_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_active_statement = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dynsmp_active_statement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dynsmp_query_estimate_cpu_usge = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dynsmp_query_estimate_cpu_usge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_plan_optimal_dop = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dynsmp_plan_optimal_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_plan_original_dop = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dynsmp_plan_original_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_dop_mem_limit = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dynsmp_dop_mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dynsmp_min_non_spill_dop = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dynsmp_min_non_spill_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_bucketmaps = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          num_bucketmaps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bucketMap = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bucketmap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_bucketmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bucketCnt = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bucketcnt(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_bucketcnt(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query_string = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_query_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto_plan.PlannedStmt.query_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List subplan_ids = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_subplan_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List initPlan = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_initplan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dataDestRelIndex = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          datadestrelindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 MaxBloomFilterNum = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          maxbloomfilternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 query_dop = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          query_dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double plannertime = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          plannertime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool in_compute_pool = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          in_compute_pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_obsrel = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          has_obsrel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List plan_hint_warning = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan_hint_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List noanalyze_rellist = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_noanalyze_rellist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ng_num = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ng_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ng_querymem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ng_use_planA = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ng_use_plana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isRowTriggerShippable = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          isrowtriggershippable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_stream_plan = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          is_stream_plan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool multi_node_hint = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          multi_node_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uniqueSQLId = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          uniquesqlid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cause_type = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          cause_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlannedStmt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.PlannedStmt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto_plan.NodeTag type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .proto_plan.CmdType commandType = 2;
  if (this->commandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commandtype(), target);
  }

  // uint64 queryId = 3;
  if (this->queryid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_queryid(), target);
  }

  // bool hasReturning = 4;
  if (this->hasreturning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_hasreturning(), target);
  }

  // bool hasModifyingCTE = 5;
  if (this->hasmodifyingcte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_hasmodifyingcte(), target);
  }

  // bool hasIgnore = 6;
  if (this->hasignore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hasignore(), target);
  }

  // bool canSetTag = 7;
  if (this->cansettag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_cansettag(), target);
  }

  // bool transientPlan = 8;
  if (this->transientplan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_transientplan(), target);
  }

  // bool dependsOnRole = 9;
  if (this->dependsonrole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_dependsonrole(), target);
  }

  // bool is_flt_frame = 10;
  if (this->is_flt_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_flt_frame(), target);
  }

  // .proto_plan.Plan planTree = 11;
  if (this->has_plantree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::plantree(this), target, stream);
  }

  // .proto_plan.List rtable = 12;
  if (this->has_rtable()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rtable(this), target, stream);
  }

  // .proto_plan.List resultRelations = 13;
  if (this->has_resultrelations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::resultrelations(this), target, stream);
  }

  // .proto_plan.Node utilityStmt = 14;
  if (this->has_utilitystmt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::utilitystmt(this), target, stream);
  }

  // .proto_plan.List subplans = 15;
  if (this->has_subplans()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::subplans(this), target, stream);
  }

  // .proto_plan.Bitmapset rewindPlanIDs = 16;
  if (this->has_rewindplanids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::rewindplanids(this), target, stream);
  }

  // .proto_plan.List rowMarks = 17;
  if (this->has_rowmarks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::rowmarks(this), target, stream);
  }

  // .proto_plan.List relationOids = 18;
  if (this->has_relationoids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::relationoids(this), target, stream);
  }

  // .proto_plan.List invalItems = 19;
  if (this->has_invalitems()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::invalitems(this), target, stream);
  }

  // int32 nParamExec = 20;
  if (this->nparamexec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_nparamexec(), target);
  }

  // int32 num_streams = 21;
  if (this->num_streams() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_num_streams(), target);
  }

  // int32 max_push_sql_num = 22;
  if (this->max_push_sql_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_max_push_sql_num(), target);
  }

  // int32 gather_count = 23;
  if (this->gather_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_gather_count(), target);
  }

  // int32 num_nodes = 24;
  if (this->num_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_num_nodes(), target);
  }

  // .proto_plan.NodeDefinition nodesDefinition = 25;
  if (this->has_nodesdefinition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::nodesdefinition(this), target, stream);
  }

  // int32 instrument_option = 26;
  if (this->instrument_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_instrument_option(), target);
  }

  // int32 num_plannodes = 27;
  if (this->num_plannodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_num_plannodes(), target);
  }

  // repeated int32 query_mem = 28;
  {
    int byte_size = _query_mem_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          28, _internal_query_mem(), byte_size, target);
    }
  }

  // repeated int32 assigned_query_mem = 29;
  {
    int byte_size = _assigned_query_mem_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          29, _internal_assigned_query_mem(), byte_size, target);
    }
  }

  // bool is_dynmaic_smp = 30;
  if (this->is_dynmaic_smp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_is_dynmaic_smp(), target);
  }

  // int32 dynsmp_max_cpu = 31;
  if (this->dynsmp_max_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_dynsmp_max_cpu(), target);
  }

  // int32 dynsmp_avail_cpu = 32;
  if (this->dynsmp_avail_cpu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_dynsmp_avail_cpu(), target);
  }

  // int32 dynsmp_cpu_util = 33;
  if (this->dynsmp_cpu_util() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_dynsmp_cpu_util(), target);
  }

  // int32 dynsmp_active_statement = 34;
  if (this->dynsmp_active_statement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_dynsmp_active_statement(), target);
  }

  // double dynsmp_query_estimate_cpu_usge = 35;
  if (!(this->dynsmp_query_estimate_cpu_usge() <= 0 && this->dynsmp_query_estimate_cpu_usge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_dynsmp_query_estimate_cpu_usge(), target);
  }

  // int32 dynsmp_plan_optimal_dop = 36;
  if (this->dynsmp_plan_optimal_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_dynsmp_plan_optimal_dop(), target);
  }

  // int32 dynsmp_plan_original_dop = 37;
  if (this->dynsmp_plan_original_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_dynsmp_plan_original_dop(), target);
  }

  // int32 dynsmp_dop_mem_limit = 38;
  if (this->dynsmp_dop_mem_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_dynsmp_dop_mem_limit(), target);
  }

  // int32 dynsmp_min_non_spill_dop = 39;
  if (this->dynsmp_min_non_spill_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_dynsmp_min_non_spill_dop(), target);
  }

  // int32 num_bucketmaps = 40;
  if (this->num_bucketmaps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_num_bucketmaps(), target);
  }

  // repeated uint32 bucketMap = 41;
  {
    int byte_size = _bucketmap_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          41, _internal_bucketmap(), byte_size, target);
    }
  }

  // repeated int32 bucketCnt = 42;
  {
    int byte_size = _bucketcnt_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          42, _internal_bucketcnt(), byte_size, target);
    }
  }

  // string query_string = 43;
  if (this->query_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query_string().data(), static_cast<int>(this->_internal_query_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_plan.PlannedStmt.query_string");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_query_string(), target);
  }

  // .proto_plan.List subplan_ids = 44;
  if (this->has_subplan_ids()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::subplan_ids(this), target, stream);
  }

  // .proto_plan.List initPlan = 45;
  if (this->has_initplan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::initplan(this), target, stream);
  }

  // uint32 dataDestRelIndex = 46;
  if (this->datadestrelindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_datadestrelindex(), target);
  }

  // int32 MaxBloomFilterNum = 47;
  if (this->maxbloomfilternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_maxbloomfilternum(), target);
  }

  // int32 query_dop = 48;
  if (this->query_dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_query_dop(), target);
  }

  // double plannertime = 49;
  if (!(this->plannertime() <= 0 && this->plannertime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_plannertime(), target);
  }

  // bool in_compute_pool = 50;
  if (this->in_compute_pool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_in_compute_pool(), target);
  }

  // bool has_obsrel = 51;
  if (this->has_obsrel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_has_obsrel(), target);
  }

  // .proto_plan.List plan_hint_warning = 52;
  if (this->has_plan_hint_warning()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::plan_hint_warning(this), target, stream);
  }

  // .proto_plan.List noanalyze_rellist = 53;
  if (this->has_noanalyze_rellist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::noanalyze_rellist(this), target, stream);
  }

  // int32 ng_num = 54;
  if (this->ng_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_ng_num(), target);
  }

  // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
  if (this->has_ng_querymem()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        55, _Internal::ng_querymem(this), target, stream);
  }

  // bool ng_use_planA = 56;
  if (this->ng_use_plana() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_ng_use_plana(), target);
  }

  // bool isRowTriggerShippable = 57;
  if (this->isrowtriggershippable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_isrowtriggershippable(), target);
  }

  // bool is_stream_plan = 58;
  if (this->is_stream_plan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(58, this->_internal_is_stream_plan(), target);
  }

  // bool multi_node_hint = 59;
  if (this->multi_node_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(59, this->_internal_multi_node_hint(), target);
  }

  // uint64 uniqueSQLId = 60;
  if (this->uniquesqlid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(60, this->_internal_uniquesqlid(), target);
  }

  // uint32 cause_type = 61;
  if (this->cause_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_cause_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.PlannedStmt)
  return target;
}

size_t PlannedStmt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.PlannedStmt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 query_mem = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->query_mem_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _query_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 assigned_query_mem = 29;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->assigned_query_mem_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _assigned_query_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 bucketMap = 41;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bucketmap_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucketmap_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bucketCnt = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bucketcnt_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucketcnt_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string query_string = 43;
  if (this->query_string().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query_string());
  }

  // .proto_plan.Plan planTree = 11;
  if (this->has_plantree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plantree_);
  }

  // .proto_plan.List rtable = 12;
  if (this->has_rtable()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rtable_);
  }

  // .proto_plan.List resultRelations = 13;
  if (this->has_resultrelations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resultrelations_);
  }

  // .proto_plan.Node utilityStmt = 14;
  if (this->has_utilitystmt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *utilitystmt_);
  }

  // .proto_plan.List subplans = 15;
  if (this->has_subplans()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subplans_);
  }

  // .proto_plan.Bitmapset rewindPlanIDs = 16;
  if (this->has_rewindplanids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewindplanids_);
  }

  // .proto_plan.List rowMarks = 17;
  if (this->has_rowmarks()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowmarks_);
  }

  // .proto_plan.List relationOids = 18;
  if (this->has_relationoids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relationoids_);
  }

  // .proto_plan.List invalItems = 19;
  if (this->has_invalitems()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invalitems_);
  }

  // .proto_plan.NodeDefinition nodesDefinition = 25;
  if (this->has_nodesdefinition()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nodesdefinition_);
  }

  // .proto_plan.List subplan_ids = 44;
  if (this->has_subplan_ids()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subplan_ids_);
  }

  // .proto_plan.List initPlan = 45;
  if (this->has_initplan()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initplan_);
  }

  // .proto_plan.List plan_hint_warning = 52;
  if (this->has_plan_hint_warning()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_hint_warning_);
  }

  // .proto_plan.List noanalyze_rellist = 53;
  if (this->has_noanalyze_rellist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *noanalyze_rellist_);
  }

  // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
  if (this->has_ng_querymem()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ng_querymem_);
  }

  // .proto_plan.NodeTag type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .proto_plan.CmdType commandType = 2;
  if (this->commandtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commandtype());
  }

  // uint64 queryId = 3;
  if (this->queryid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_queryid());
  }

  // bool hasReturning = 4;
  if (this->hasreturning() != 0) {
    total_size += 1 + 1;
  }

  // bool hasModifyingCTE = 5;
  if (this->hasmodifyingcte() != 0) {
    total_size += 1 + 1;
  }

  // bool hasIgnore = 6;
  if (this->hasignore() != 0) {
    total_size += 1 + 1;
  }

  // bool canSetTag = 7;
  if (this->cansettag() != 0) {
    total_size += 1 + 1;
  }

  // bool transientPlan = 8;
  if (this->transientplan() != 0) {
    total_size += 1 + 1;
  }

  // bool dependsOnRole = 9;
  if (this->dependsonrole() != 0) {
    total_size += 1 + 1;
  }

  // bool is_flt_frame = 10;
  if (this->is_flt_frame() != 0) {
    total_size += 1 + 1;
  }

  // bool is_dynmaic_smp = 30;
  if (this->is_dynmaic_smp() != 0) {
    total_size += 2 + 1;
  }

  // int32 nParamExec = 20;
  if (this->nparamexec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nparamexec());
  }

  // int32 num_streams = 21;
  if (this->num_streams() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_streams());
  }

  // int32 max_push_sql_num = 22;
  if (this->max_push_sql_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_push_sql_num());
  }

  // int32 gather_count = 23;
  if (this->gather_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gather_count());
  }

  // int32 num_nodes = 24;
  if (this->num_nodes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_nodes());
  }

  // int32 instrument_option = 26;
  if (this->instrument_option() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_instrument_option());
  }

  // int32 num_plannodes = 27;
  if (this->num_plannodes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_plannodes());
  }

  // int32 dynsmp_max_cpu = 31;
  if (this->dynsmp_max_cpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_max_cpu());
  }

  // int32 dynsmp_avail_cpu = 32;
  if (this->dynsmp_avail_cpu() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_avail_cpu());
  }

  // int32 dynsmp_cpu_util = 33;
  if (this->dynsmp_cpu_util() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_cpu_util());
  }

  // double dynsmp_query_estimate_cpu_usge = 35;
  if (!(this->dynsmp_query_estimate_cpu_usge() <= 0 && this->dynsmp_query_estimate_cpu_usge() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 dynsmp_active_statement = 34;
  if (this->dynsmp_active_statement() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_active_statement());
  }

  // int32 dynsmp_plan_optimal_dop = 36;
  if (this->dynsmp_plan_optimal_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_plan_optimal_dop());
  }

  // int32 dynsmp_plan_original_dop = 37;
  if (this->dynsmp_plan_original_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_plan_original_dop());
  }

  // int32 dynsmp_dop_mem_limit = 38;
  if (this->dynsmp_dop_mem_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_dop_mem_limit());
  }

  // int32 dynsmp_min_non_spill_dop = 39;
  if (this->dynsmp_min_non_spill_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dynsmp_min_non_spill_dop());
  }

  // int32 num_bucketmaps = 40;
  if (this->num_bucketmaps() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_bucketmaps());
  }

  // uint32 dataDestRelIndex = 46;
  if (this->datadestrelindex() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_datadestrelindex());
  }

  // int32 MaxBloomFilterNum = 47;
  if (this->maxbloomfilternum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxbloomfilternum());
  }

  // double plannertime = 49;
  if (!(this->plannertime() <= 0 && this->plannertime() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 query_dop = 48;
  if (this->query_dop() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_query_dop());
  }

  // bool in_compute_pool = 50;
  if (this->in_compute_pool() != 0) {
    total_size += 2 + 1;
  }

  // bool has_obsrel = 51;
  if (this->has_obsrel() != 0) {
    total_size += 2 + 1;
  }

  // bool ng_use_planA = 56;
  if (this->ng_use_plana() != 0) {
    total_size += 2 + 1;
  }

  // bool isRowTriggerShippable = 57;
  if (this->isrowtriggershippable() != 0) {
    total_size += 2 + 1;
  }

  // int32 ng_num = 54;
  if (this->ng_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ng_num());
  }

  // bool is_stream_plan = 58;
  if (this->is_stream_plan() != 0) {
    total_size += 2 + 1;
  }

  // bool multi_node_hint = 59;
  if (this->multi_node_hint() != 0) {
    total_size += 2 + 1;
  }

  // uint64 uniqueSQLId = 60;
  if (this->uniquesqlid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uniquesqlid());
  }

  // uint32 cause_type = 61;
  if (this->cause_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cause_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannedStmt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_plan.PlannedStmt)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannedStmt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlannedStmt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_plan.PlannedStmt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_plan.PlannedStmt)
    MergeFrom(*source);
  }
}

void PlannedStmt::MergeFrom(const PlannedStmt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.PlannedStmt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  query_mem_.MergeFrom(from.query_mem_);
  assigned_query_mem_.MergeFrom(from.assigned_query_mem_);
  bucketmap_.MergeFrom(from.bucketmap_);
  bucketcnt_.MergeFrom(from.bucketcnt_);
  if (from.query_string().size() > 0) {

    query_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.query_string_);
  }
  if (from.has_plantree()) {
    _internal_mutable_plantree()->::proto_plan::Plan::MergeFrom(from._internal_plantree());
  }
  if (from.has_rtable()) {
    _internal_mutable_rtable()->::proto_plan::List::MergeFrom(from._internal_rtable());
  }
  if (from.has_resultrelations()) {
    _internal_mutable_resultrelations()->::proto_plan::List::MergeFrom(from._internal_resultrelations());
  }
  if (from.has_utilitystmt()) {
    _internal_mutable_utilitystmt()->::proto_plan::Node::MergeFrom(from._internal_utilitystmt());
  }
  if (from.has_subplans()) {
    _internal_mutable_subplans()->::proto_plan::List::MergeFrom(from._internal_subplans());
  }
  if (from.has_rewindplanids()) {
    _internal_mutable_rewindplanids()->::proto_plan::Bitmapset::MergeFrom(from._internal_rewindplanids());
  }
  if (from.has_rowmarks()) {
    _internal_mutable_rowmarks()->::proto_plan::List::MergeFrom(from._internal_rowmarks());
  }
  if (from.has_relationoids()) {
    _internal_mutable_relationoids()->::proto_plan::List::MergeFrom(from._internal_relationoids());
  }
  if (from.has_invalitems()) {
    _internal_mutable_invalitems()->::proto_plan::List::MergeFrom(from._internal_invalitems());
  }
  if (from.has_nodesdefinition()) {
    _internal_mutable_nodesdefinition()->::proto_plan::NodeDefinition::MergeFrom(from._internal_nodesdefinition());
  }
  if (from.has_subplan_ids()) {
    _internal_mutable_subplan_ids()->::proto_plan::List::MergeFrom(from._internal_subplan_ids());
  }
  if (from.has_initplan()) {
    _internal_mutable_initplan()->::proto_plan::List::MergeFrom(from._internal_initplan());
  }
  if (from.has_plan_hint_warning()) {
    _internal_mutable_plan_hint_warning()->::proto_plan::List::MergeFrom(from._internal_plan_hint_warning());
  }
  if (from.has_noanalyze_rellist()) {
    _internal_mutable_noanalyze_rellist()->::proto_plan::List::MergeFrom(from._internal_noanalyze_rellist());
  }
  if (from.has_ng_querymem()) {
    _internal_mutable_ng_querymem()->::proto_plan::NodeGroupQueryMem::MergeFrom(from._internal_ng_querymem());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.commandtype() != 0) {
    _internal_set_commandtype(from._internal_commandtype());
  }
  if (from.queryid() != 0) {
    _internal_set_queryid(from._internal_queryid());
  }
  if (from.hasreturning() != 0) {
    _internal_set_hasreturning(from._internal_hasreturning());
  }
  if (from.hasmodifyingcte() != 0) {
    _internal_set_hasmodifyingcte(from._internal_hasmodifyingcte());
  }
  if (from.hasignore() != 0) {
    _internal_set_hasignore(from._internal_hasignore());
  }
  if (from.cansettag() != 0) {
    _internal_set_cansettag(from._internal_cansettag());
  }
  if (from.transientplan() != 0) {
    _internal_set_transientplan(from._internal_transientplan());
  }
  if (from.dependsonrole() != 0) {
    _internal_set_dependsonrole(from._internal_dependsonrole());
  }
  if (from.is_flt_frame() != 0) {
    _internal_set_is_flt_frame(from._internal_is_flt_frame());
  }
  if (from.is_dynmaic_smp() != 0) {
    _internal_set_is_dynmaic_smp(from._internal_is_dynmaic_smp());
  }
  if (from.nparamexec() != 0) {
    _internal_set_nparamexec(from._internal_nparamexec());
  }
  if (from.num_streams() != 0) {
    _internal_set_num_streams(from._internal_num_streams());
  }
  if (from.max_push_sql_num() != 0) {
    _internal_set_max_push_sql_num(from._internal_max_push_sql_num());
  }
  if (from.gather_count() != 0) {
    _internal_set_gather_count(from._internal_gather_count());
  }
  if (from.num_nodes() != 0) {
    _internal_set_num_nodes(from._internal_num_nodes());
  }
  if (from.instrument_option() != 0) {
    _internal_set_instrument_option(from._internal_instrument_option());
  }
  if (from.num_plannodes() != 0) {
    _internal_set_num_plannodes(from._internal_num_plannodes());
  }
  if (from.dynsmp_max_cpu() != 0) {
    _internal_set_dynsmp_max_cpu(from._internal_dynsmp_max_cpu());
  }
  if (from.dynsmp_avail_cpu() != 0) {
    _internal_set_dynsmp_avail_cpu(from._internal_dynsmp_avail_cpu());
  }
  if (from.dynsmp_cpu_util() != 0) {
    _internal_set_dynsmp_cpu_util(from._internal_dynsmp_cpu_util());
  }
  if (!(from.dynsmp_query_estimate_cpu_usge() <= 0 && from.dynsmp_query_estimate_cpu_usge() >= 0)) {
    _internal_set_dynsmp_query_estimate_cpu_usge(from._internal_dynsmp_query_estimate_cpu_usge());
  }
  if (from.dynsmp_active_statement() != 0) {
    _internal_set_dynsmp_active_statement(from._internal_dynsmp_active_statement());
  }
  if (from.dynsmp_plan_optimal_dop() != 0) {
    _internal_set_dynsmp_plan_optimal_dop(from._internal_dynsmp_plan_optimal_dop());
  }
  if (from.dynsmp_plan_original_dop() != 0) {
    _internal_set_dynsmp_plan_original_dop(from._internal_dynsmp_plan_original_dop());
  }
  if (from.dynsmp_dop_mem_limit() != 0) {
    _internal_set_dynsmp_dop_mem_limit(from._internal_dynsmp_dop_mem_limit());
  }
  if (from.dynsmp_min_non_spill_dop() != 0) {
    _internal_set_dynsmp_min_non_spill_dop(from._internal_dynsmp_min_non_spill_dop());
  }
  if (from.num_bucketmaps() != 0) {
    _internal_set_num_bucketmaps(from._internal_num_bucketmaps());
  }
  if (from.datadestrelindex() != 0) {
    _internal_set_datadestrelindex(from._internal_datadestrelindex());
  }
  if (from.maxbloomfilternum() != 0) {
    _internal_set_maxbloomfilternum(from._internal_maxbloomfilternum());
  }
  if (!(from.plannertime() <= 0 && from.plannertime() >= 0)) {
    _internal_set_plannertime(from._internal_plannertime());
  }
  if (from.query_dop() != 0) {
    _internal_set_query_dop(from._internal_query_dop());
  }
  if (from.in_compute_pool() != 0) {
    _internal_set_in_compute_pool(from._internal_in_compute_pool());
  }
  if (from.has_obsrel() != 0) {
    _internal_set_has_obsrel(from._internal_has_obsrel());
  }
  if (from.ng_use_plana() != 0) {
    _internal_set_ng_use_plana(from._internal_ng_use_plana());
  }
  if (from.isrowtriggershippable() != 0) {
    _internal_set_isrowtriggershippable(from._internal_isrowtriggershippable());
  }
  if (from.ng_num() != 0) {
    _internal_set_ng_num(from._internal_ng_num());
  }
  if (from.is_stream_plan() != 0) {
    _internal_set_is_stream_plan(from._internal_is_stream_plan());
  }
  if (from.multi_node_hint() != 0) {
    _internal_set_multi_node_hint(from._internal_multi_node_hint());
  }
  if (from.uniquesqlid() != 0) {
    _internal_set_uniquesqlid(from._internal_uniquesqlid());
  }
  if (from.cause_type() != 0) {
    _internal_set_cause_type(from._internal_cause_type());
  }
}

void PlannedStmt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_plan.PlannedStmt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannedStmt::CopyFrom(const PlannedStmt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.PlannedStmt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannedStmt::IsInitialized() const {
  return true;
}

void PlannedStmt::InternalSwap(PlannedStmt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  query_mem_.InternalSwap(&other->query_mem_);
  assigned_query_mem_.InternalSwap(&other->assigned_query_mem_);
  bucketmap_.InternalSwap(&other->bucketmap_);
  bucketcnt_.InternalSwap(&other->bucketcnt_);
  query_string_.Swap(&other->query_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(plantree_, other->plantree_);
  swap(rtable_, other->rtable_);
  swap(resultrelations_, other->resultrelations_);
  swap(utilitystmt_, other->utilitystmt_);
  swap(subplans_, other->subplans_);
  swap(rewindplanids_, other->rewindplanids_);
  swap(rowmarks_, other->rowmarks_);
  swap(relationoids_, other->relationoids_);
  swap(invalitems_, other->invalitems_);
  swap(nodesdefinition_, other->nodesdefinition_);
  swap(subplan_ids_, other->subplan_ids_);
  swap(initplan_, other->initplan_);
  swap(plan_hint_warning_, other->plan_hint_warning_);
  swap(noanalyze_rellist_, other->noanalyze_rellist_);
  swap(ng_querymem_, other->ng_querymem_);
  swap(type_, other->type_);
  swap(commandtype_, other->commandtype_);
  swap(queryid_, other->queryid_);
  swap(hasreturning_, other->hasreturning_);
  swap(hasmodifyingcte_, other->hasmodifyingcte_);
  swap(hasignore_, other->hasignore_);
  swap(cansettag_, other->cansettag_);
  swap(transientplan_, other->transientplan_);
  swap(dependsonrole_, other->dependsonrole_);
  swap(is_flt_frame_, other->is_flt_frame_);
  swap(is_dynmaic_smp_, other->is_dynmaic_smp_);
  swap(nparamexec_, other->nparamexec_);
  swap(num_streams_, other->num_streams_);
  swap(max_push_sql_num_, other->max_push_sql_num_);
  swap(gather_count_, other->gather_count_);
  swap(num_nodes_, other->num_nodes_);
  swap(instrument_option_, other->instrument_option_);
  swap(num_plannodes_, other->num_plannodes_);
  swap(dynsmp_max_cpu_, other->dynsmp_max_cpu_);
  swap(dynsmp_avail_cpu_, other->dynsmp_avail_cpu_);
  swap(dynsmp_cpu_util_, other->dynsmp_cpu_util_);
  swap(dynsmp_query_estimate_cpu_usge_, other->dynsmp_query_estimate_cpu_usge_);
  swap(dynsmp_active_statement_, other->dynsmp_active_statement_);
  swap(dynsmp_plan_optimal_dop_, other->dynsmp_plan_optimal_dop_);
  swap(dynsmp_plan_original_dop_, other->dynsmp_plan_original_dop_);
  swap(dynsmp_dop_mem_limit_, other->dynsmp_dop_mem_limit_);
  swap(dynsmp_min_non_spill_dop_, other->dynsmp_min_non_spill_dop_);
  swap(num_bucketmaps_, other->num_bucketmaps_);
  swap(datadestrelindex_, other->datadestrelindex_);
  swap(maxbloomfilternum_, other->maxbloomfilternum_);
  swap(plannertime_, other->plannertime_);
  swap(query_dop_, other->query_dop_);
  swap(in_compute_pool_, other->in_compute_pool_);
  swap(has_obsrel_, other->has_obsrel_);
  swap(ng_use_plana_, other->ng_use_plana_);
  swap(isrowtriggershippable_, other->isrowtriggershippable_);
  swap(ng_num_, other->ng_num_);
  swap(is_stream_plan_, other->is_stream_plan_);
  swap(multi_node_hint_, other->multi_node_hint_);
  swap(uniquesqlid_, other->uniquesqlid_);
  swap(cause_type_, other->cause_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannedStmt::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_plan::NodeDefinition* Arena::CreateMaybeMessage< ::proto_plan::NodeDefinition >(Arena* arena) {
  return Arena::CreateInternal< ::proto_plan::NodeDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Node* Arena::CreateMaybeMessage< ::proto_plan::Node >(Arena* arena) {
  return Arena::CreateInternal< ::proto_plan::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::NodeGroupQueryMem* Arena::CreateMaybeMessage< ::proto_plan::NodeGroupQueryMem >(Arena* arena) {
  return Arena::CreateInternal< ::proto_plan::NodeGroupQueryMem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::PlannedStmt* Arena::CreateMaybeMessage< ::proto_plan::PlannedStmt >(Arena* arena) {
  return Arena::CreateInternal< ::proto_plan::PlannedStmt >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_stmt.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_query_5fstmt_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_query_5fstmt_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "query_plan.pb.h"
#include "enumtag.pb.h"
#include "execNodes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_query_5fstmt_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_query_5fstmt_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fstmt_2eproto;
namespace proto_plan {
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeDefinition;
class NodeDefinitionDefaultTypeInternal;
extern NodeDefinitionDefaultTypeInternal _NodeDefinition_default_instance_;
class NodeGroupQueryMem;
class NodeGroupQueryMemDefaultTypeInternal;
extern NodeGroupQueryMemDefaultTypeInternal _NodeGroupQueryMem_default_instance_;
class PlannedStmt;
class PlannedStmtDefaultTypeInternal;
extern PlannedStmtDefaultTypeInternal _PlannedStmt_default_instance_;
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_plan::Node* Arena::CreateMaybeMessage<::proto_plan::Node>(Arena*);
template<> ::proto_plan::NodeDefinition* Arena::CreateMaybeMessage<::proto_plan::NodeDefinition>(Arena*);
template<> ::proto_plan::NodeGroupQueryMem* Arena::CreateMaybeMessage<::proto_plan::NodeGroupQueryMem>(Arena*);
template<> ::proto_plan::PlannedStmt* Arena::CreateMaybeMessage<::proto_plan::PlannedStmt>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_plan {

// ===================================================================

class NodeDefinition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.NodeDefinition) */ {
 public:
  NodeDefinition();
  virtual ~NodeDefinition();

  NodeDefinition(const NodeDefinition& from);
  NodeDefinition(NodeDefinition&& from) noexcept
    : NodeDefinition() {
    *this = ::std::move(from);
  }

  inline NodeDefinition& operator=(const NodeDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeDefinition& operator=(NodeDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeDefinition* internal_default_instance() {
    return reinterpret_cast<const NodeDefinition*>(
               &_NodeDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeDefinition& a, NodeDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeDefinition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeDefinition* New() const final {
    return CreateMaybeMessage<NodeDefinition>(nullptr);
  }

  NodeDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeDefinition& from);
  void MergeFrom(const NodeDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.NodeDefinition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_5fstmt_2eproto);
    return ::descriptor_table_query_5fstmt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodenameFieldNumber = 3,
    kNodehostFieldNumber = 4,
    kNodehost1FieldNumber = 8,
    kNodeoidFieldNumber = 1,
    kNodeidFieldNumber = 2,
    kNodeportFieldNumber = 5,
    kNodectlportFieldNumber = 6,
    kNodesctpportFieldNumber = 7,
    kNodeport1FieldNumber = 9,
    kNodectlport1FieldNumber = 10,
    kNodesctpport1FieldNumber = 11,
    kHostisprimaryFieldNumber = 12,
    kNodeisprimaryFieldNumber = 13,
    kNodeispreferredFieldNumber = 14,
    kNodeisCentralFieldNumber = 15,
    kNodeisActiveFieldNumber = 16,
    kShardOidFieldNumber = 17,
  };
  // string nodename = 3;
  void clear_nodename();
  const std::string& nodename() const;
  void set_nodename(const std::string& value);
  void set_nodename(std::string&& value);
  void set_nodename(const char* value);
  void set_nodename(const char* value, size_t size);
  std::string* mutable_nodename();
  std::string* release_nodename();
  void set_allocated_nodename(std::string* nodename);
  private:
  const std::string& _internal_nodename() const;
  void _internal_set_nodename(const std::string& value);
  std::string* _internal_mutable_nodename();
  public:

  // string nodehost = 4;
  void clear_nodehost();
  const std::string& nodehost() const;
  void set_nodehost(const std::string& value);
  void set_nodehost(std::string&& value);
  void set_nodehost(const char* value);
  void set_nodehost(const char* value, size_t size);
  std::string* mutable_nodehost();
  std::string* release_nodehost();
  void set_allocated_nodehost(std::string* nodehost);
  private:
  const std::string& _internal_nodehost() const;
  void _internal_set_nodehost(const std::string& value);
  std::string* _internal_mutable_nodehost();
  public:

  // string nodehost1 = 8;
  void clear_nodehost1();
  const std::string& nodehost1() const;
  void set_nodehost1(const std::string& value);
  void set_nodehost1(std::string&& value);
  void set_nodehost1(const char* value);
  void set_nodehost1(const char* value, size_t size);
  std::string* mutable_nodehost1();
  std::string* release_nodehost1();
  void set_allocated_nodehost1(std::string* nodehost1);
  private:
  const std::string& _internal_nodehost1() const;
  void _internal_set_nodehost1(const std::string& value);
  std::string* _internal_mutable_nodehost1();
  public:

  // uint32 nodeoid = 1;
  void clear_nodeoid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeoid() const;
  void set_nodeoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nodeoid() const;
  void _internal_set_nodeoid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 nodeid = 2;
  void clear_nodeid();
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid() const;
  void set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodeid() const;
  void _internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nodeport = 5;
  void clear_nodeport();
  ::PROTOBUF_NAMESPACE_ID::int32 nodeport() const;
  void set_nodeport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodeport() const;
  void _internal_set_nodeport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nodectlport = 6;
  void clear_nodectlport();
  ::PROTOBUF_NAMESPACE_ID::int32 nodectlport() const;
  void set_nodectlport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodectlport() const;
  void _internal_set_nodectlport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nodesctpport = 7;
  void clear_nodesctpport();
  ::PROTOBUF_NAMESPACE_ID::int32 nodesctpport() const;
  void set_nodesctpport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodesctpport() const;
  void _internal_set_nodesctpport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nodeport1 = 9;
  void clear_nodeport1();
  ::PROTOBUF_NAMESPACE_ID::int32 nodeport1() const;
  void set_nodeport1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodeport1() const;
  void _internal_set_nodeport1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nodectlport1 = 10;
  void clear_nodectlport1();
  ::PROTOBUF_NAMESPACE_ID::int32 nodectlport1() const;
  void set_nodectlport1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodectlport1() const;
  void _internal_set_nodectlport1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nodesctpport1 = 11;
  void clear_nodesctpport1();
  ::PROTOBUF_NAMESPACE_ID::int32 nodesctpport1() const;
  void set_nodesctpport1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nodesctpport1() const;
  void _internal_set_nodesctpport1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool hostisprimary = 12;
  void clear_hostisprimary();
  bool hostisprimary() const;
  void set_hostisprimary(bool value);
  private:
  bool _internal_hostisprimary() const;
  void _internal_set_hostisprimary(bool value);
  public:

  // bool nodeisprimary = 13;
  void clear_nodeisprimary();
  bool nodeisprimary() const;
  void set_nodeisprimary(bool value);
  private:
  bool _internal_nodeisprimary() const;
  void _internal_set_nodeisprimary(bool value);
  public:

  // bool nodeispreferred = 14;
  void clear_nodeispreferred();
  bool nodeispreferred() const;
  void set_nodeispreferred(bool value);
  private:
  bool _internal_nodeispreferred() const;
  void _internal_set_nodeispreferred(bool value);
  public:

  // bool nodeis_central = 15;
  void clear_nodeis_central();
  bool nodeis_central() const;
  void set_nodeis_central(bool value);
  private:
  bool _internal_nodeis_central() const;
  void _internal_set_nodeis_central(bool value);
  public:

  // bool nodeis_active = 16;
  void clear_nodeis_active();
  bool nodeis_active() const;
  void set_nodeis_active(bool value);
  private:
  bool _internal_nodeis_active() const;
  void _internal_set_nodeis_active(bool value);
  public:

  // uint32 shard_oid = 17;
  void clear_shard_oid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_oid() const;
  void set_shard_oid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shard_oid() const;
  void _internal_set_shard_oid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.NodeDefinition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodehost_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodehost1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nodeoid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodeport_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodectlport_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodesctpport_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodeport1_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodectlport1_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodesctpport1_;
  bool hostisprimary_;
  bool nodeisprimary_;
  bool nodeispreferred_;
  bool nodeis_central_;
  bool nodeis_active_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_oid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_5fstmt_2eproto;
};
// -------------------------------------------------------------------

class Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(nullptr);
  }

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_5fstmt_2eproto);
    return ::descriptor_table_query_5fstmt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_5fstmt_2eproto;
};
// -------------------------------------------------------------------

class NodeGroupQueryMem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.NodeGroupQueryMem) */ {
 public:
  NodeGroupQueryMem();
  virtual ~NodeGroupQueryMem();

  NodeGroupQueryMem(const NodeGroupQueryMem& from);
  NodeGroupQueryMem(NodeGroupQueryMem&& from) noexcept
    : NodeGroupQueryMem() {
    *this = ::std::move(from);
  }

  inline NodeGroupQueryMem& operator=(const NodeGroupQueryMem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeGroupQueryMem& operator=(NodeGroupQueryMem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeGroupQueryMem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeGroupQueryMem* internal_default_instance() {
    return reinterpret_cast<const NodeGroupQueryMem*>(
               &_NodeGroupQueryMem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeGroupQueryMem& a, NodeGroupQueryMem& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeGroupQueryMem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeGroupQueryMem* New() const final {
    return CreateMaybeMessage<NodeGroupQueryMem>(nullptr);
  }

  NodeGroupQueryMem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeGroupQueryMem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeGroupQueryMem& from);
  void MergeFrom(const NodeGroupQueryMem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeGroupQueryMem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.NodeGroupQueryMem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_5fstmt_2eproto);
    return ::descriptor_table_query_5fstmt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryMemFieldNumber = 3,
    kNodegroupFieldNumber = 2,
    kNgOidFieldNumber = 1,
  };
  // repeated int32 query_mem = 3;
  int query_mem_size() const;
  private:
  int _internal_query_mem_size() const;
  public:
  void clear_query_mem();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query_mem(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_query_mem() const;
  void _internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_query_mem();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 query_mem(int index) const;
  void set_query_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      query_mem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_query_mem();

  // string nodegroup = 2;
  void clear_nodegroup();
  const std::string& nodegroup() const;
  void set_nodegroup(const std::string& value);
  void set_nodegroup(std::string&& value);
  void set_nodegroup(const char* value);
  void set_nodegroup(const char* value, size_t size);
  std::string* mutable_nodegroup();
  std::string* release_nodegroup();
  void set_allocated_nodegroup(std::string* nodegroup);
  private:
  const std::string& _internal_nodegroup() const;
  void _internal_set_nodegroup(const std::string& value);
  std::string* _internal_mutable_nodegroup();
  public:

  // uint32 ng_oid = 1;
  void clear_ng_oid();
  ::PROTOBUF_NAMESPACE_ID::uint32 ng_oid() const;
  void set_ng_oid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ng_oid() const;
  void _internal_set_ng_oid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.NodeGroupQueryMem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > query_mem_;
  mutable std::atomic<int> _query_mem_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodegroup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ng_oid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_5fstmt_2eproto;
};
// -------------------------------------------------------------------

class PlannedStmt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_plan.PlannedStmt) */ {
 public:
  PlannedStmt();
  virtual ~PlannedStmt();

  PlannedStmt(const PlannedStmt& from);
  PlannedStmt(PlannedStmt&& from) noexcept
    : PlannedStmt() {
    *this = ::std::move(from);
  }

  inline PlannedStmt& operator=(const PlannedStmt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannedStmt& operator=(PlannedStmt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlannedStmt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlannedStmt* internal_default_instance() {
    return reinterpret_cast<const PlannedStmt*>(
               &_PlannedStmt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlannedStmt& a, PlannedStmt& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannedStmt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlannedStmt* New() const final {
    return CreateMaybeMessage<PlannedStmt>(nullptr);
  }

  PlannedStmt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlannedStmt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlannedStmt& from);
  void MergeFrom(const PlannedStmt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannedStmt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_plan.PlannedStmt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_query_5fstmt_2eproto);
    return ::descriptor_table_query_5fstmt_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryMemFieldNumber = 28,
    kAssignedQueryMemFieldNumber = 29,
    kBucketMapFieldNumber = 41,
    kBucketCntFieldNumber = 42,
    kQueryStringFieldNumber = 43,
    kPlanTreeFieldNumber = 11,
    kRtableFieldNumber = 12,
    kResultRelationsFieldNumber = 13,
    kUtilityStmtFieldNumber = 14,
    kSubplansFieldNumber = 15,
    kRewindPlanIDsFieldNumber = 16,
    kRowMarksFieldNumber = 17,
    kRelationOidsFieldNumber = 18,
    kInvalItemsFieldNumber = 19,
    kNodesDefinitionFieldNumber = 25,
    kSubplanIdsFieldNumber = 44,
    kInitPlanFieldNumber = 45,
    kPlanHintWarningFieldNumber = 52,
    kNoanalyzeRellistFieldNumber = 53,
    kNgQueryMemFieldNumber = 55,
    kTypeFieldNumber = 1,
    kCommandTypeFieldNumber = 2,
    kQueryIdFieldNumber = 3,
    kHasReturningFieldNumber = 4,
    kHasModifyingCTEFieldNumber = 5,
    kHasIgnoreFieldNumber = 6,
    kCanSetTagFieldNumber = 7,
    kTransientPlanFieldNumber = 8,
    kDependsOnRoleFieldNumber = 9,
    kIsFltFrameFieldNumber = 10,
    kIsDynmaicSmpFieldNumber = 30,
    kNParamExecFieldNumber = 20,
    kNumStreamsFieldNumber = 21,
    kMaxPushSqlNumFieldNumber = 22,
    kGatherCountFieldNumber = 23,
    kNumNodesFieldNumber = 24,
    kInstrumentOptionFieldNumber = 26,
    kNumPlannodesFieldNumber = 27,
    kDynsmpMaxCpuFieldNumber = 31,
    kDynsmpAvailCpuFieldNumber = 32,
    kDynsmpCpuUtilFieldNumber = 33,
    kDynsmpQueryEstimateCpuUsgeFieldNumber = 35,
    kDynsmpActiveStatementFieldNumber = 34,
    kDynsmpPlanOptimalDopFieldNumber = 36,
    kDynsmpPlanOriginalDopFieldNumber = 37,
    kDynsmpDopMemLimitFieldNumber = 38,
    kDynsmpMinNonSpillDopFieldNumber = 39,
    kNumBucketmapsFieldNumber = 40,
    kDataDestRelIndexFieldNumber = 46,
    kMaxBloomFilterNumFieldNumber = 47,
    kPlannertimeFieldNumber = 49,
    kQueryDopFieldNumber = 48,
    kInComputePoolFieldNumber = 50,
    kHasObsrelFieldNumber = 51,
    kNgUsePlanAFieldNumber = 56,
    kIsRowTriggerShippableFieldNumber = 57,
    kNgNumFieldNumber = 54,
    kIsStreamPlanFieldNumber = 58,
    kMultiNodeHintFieldNumber = 59,
    kUniqueSQLIdFieldNumber = 60,
    kCauseTypeFieldNumber = 61,
  };
  // repeated int32 query_mem = 28;
  int query_mem_size() const;
  private:
  int _internal_query_mem_size() const;
  public:
  void clear_query_mem();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query_mem(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_query_mem() const;
  void _internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_query_mem();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 query_mem(int index) const;
  void set_query_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      query_mem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_query_mem();

  // repeated int32 assigned_query_mem = 29;
  int assigned_query_mem_size() const;
  private:
  int _internal_assigned_query_mem_size() const;
  public:
  void clear_assigned_query_mem();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_assigned_query_mem(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_assigned_query_mem() const;
  void _internal_add_assigned_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_assigned_query_mem();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 assigned_query_mem(int index) const;
  void set_assigned_query_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_assigned_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      assigned_query_mem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_assigned_query_mem();

  // repeated uint32 bucketMap = 41;
  int bucketmap_size() const;
  private:
  int _internal_bucketmap_size() const;
  public:
  void clear_bucketmap();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bucketmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_bucketmap() const;
  void _internal_add_bucketmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_bucketmap();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 bucketmap(int index) const;
  void set_bucketmap(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_bucketmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      bucketmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_bucketmap();

  // repeated int32 bucketCnt = 42;
  int bucketcnt_size() const;
  private:
  int _internal_bucketcnt_size() const;
  public:
  void clear_bucketcnt();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bucketcnt(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bucketcnt() const;
  void _internal_add_bucketcnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bucketcnt();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bucketcnt(int index) const;
  void set_bucketcnt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bucketcnt(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bucketcnt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bucketcnt();

  // string query_string = 43;
  void clear_query_string();
  const std::string& query_string() const;
  void set_query_string(const std::string& value);
  void set_query_string(std::string&& value);
  void set_query_string(const char* value);
  void set_query_string(const char* value, size_t size);
  std::string* mutable_query_string();
  std::string* release_query_string();
  void set_allocated_query_string(std::string* query_string);
  private:
  const std::string& _internal_query_string() const;
  void _internal_set_query_string(const std::string& value);
  std::string* _internal_mutable_query_string();
  public:

  // .proto_plan.Plan planTree = 11;
  bool has_plantree() const;
  private:
  bool _internal_has_plantree() const;
  public:
  void clear_plantree();
  const ::proto_plan::Plan& plantree() const;
  ::proto_plan::Plan* release_plantree();
  ::proto_plan::Plan* mutable_plantree();
  void set_allocated_plantree(::proto_plan::Plan* plantree);
  private:
  const ::proto_plan::Plan& _internal_plantree() const;
  ::proto_plan::Plan* _internal_mutable_plantree();
  public:

  // .proto_plan.List rtable = 12;
  bool has_rtable() const;
  private:
  bool _internal_has_rtable() const;
  public:
  void clear_rtable();
  const ::proto_plan::List& rtable() const;
  ::proto_plan::List* release_rtable();
  ::proto_plan::List* mutable_rtable();
  void set_allocated_rtable(::proto_plan::List* rtable);
  private:
  const ::proto_plan::List& _internal_rtable() const;
  ::proto_plan::List* _internal_mutable_rtable();
  public:

  // .proto_plan.List resultRelations = 13;
  bool has_resultrelations() const;
  private:
  bool _internal_has_resultrelations() const;
  public:
  void clear_resultrelations();
  const ::proto_plan::List& resultrelations() const;
  ::proto_plan::List* release_resultrelations();
  ::proto_plan::List* mutable_resultrelations();
  void set_allocated_resultrelations(::proto_plan::List* resultrelations);
  private:
  const ::proto_plan::List& _internal_resultrelations() const;
  ::proto_plan::List* _internal_mutable_resultrelations();
  public:

  // .proto_plan.Node utilityStmt = 14;
  bool has_utilitystmt() const;
  private:
  bool _internal_has_utilitystmt() const;
  public:
  void clear_utilitystmt();
  const ::proto_plan::Node& utilitystmt() const;
  ::proto_plan::Node* release_utilitystmt();
  ::proto_plan::Node* mutable_utilitystmt();
  void set_allocated_utilitystmt(::proto_plan::Node* utilitystmt);
  private:
  const ::proto_plan::Node& _internal_utilitystmt() const;
  ::proto_plan::Node* _internal_mutable_utilitystmt();
  public:

  // .proto_plan.List subplans = 15;
  bool has_subplans() const;
  private:
  bool _internal_has_subplans() const;
  public:
  void clear_subplans();
  const ::proto_plan::List& subplans() const;
  ::proto_plan::List* release_subplans();
  ::proto_plan::List* mutable_subplans();
  void set_allocated_subplans(::proto_plan::List* subplans);
  private:
  const ::proto_plan::List& _internal_subplans() const;
  ::proto_plan::List* _internal_mutable_subplans();
  public:

  // .proto_plan.Bitmapset rewindPlanIDs = 16;
  bool has_rewindplanids() const;
  private:
  bool _internal_has_rewindplanids() const;
  public:
  void clear_rewindplanids();
  const ::proto_plan::Bitmapset& rewindplanids() const;
  ::proto_plan::Bitmapset* release_rewindplanids();
  ::proto_plan::Bitmapset* mutable_rewindplanids();
  void set_allocated_rewindplanids(::proto_plan::Bitmapset* rewindplanids);
  private:
  const ::proto_plan::Bitmapset& _internal_rewindplanids() const;
  ::proto_plan::Bitmapset* _internal_mutable_rewindplanids();
  public:

  // .proto_plan.List rowMarks = 17;
  bool has_rowmarks() const;
  private:
  bool _internal_has_rowmarks() const;
  public:
  void clear_rowmarks();
  const ::proto_plan::List& rowmarks() const;
  ::proto_plan::List* release_rowmarks();
  ::proto_plan::List* mutable_rowmarks();
  void set_allocated_rowmarks(::proto_plan::List* rowmarks);
  private:
  const ::proto_plan::List& _internal_rowmarks() const;
  ::proto_plan::List* _internal_mutable_rowmarks();
  public:

  // .proto_plan.List relationOids = 18;
  bool has_relationoids() const;
  private:
  bool _internal_has_relationoids() const;
  public:
  void clear_relationoids();
  const ::proto_plan::List& relationoids() const;
  ::proto_plan::List* release_relationoids();
  ::proto_plan::List* mutable_relationoids();
  void set_allocated_relationoids(::proto_plan::List* relationoids);
  private:
  const ::proto_plan::List& _internal_relationoids() const;
  ::proto_plan::List* _internal_mutable_relationoids();
  public:

  // .proto_plan.List invalItems = 19;
  bool has_invalitems() const;
  private:
  bool _internal_has_invalitems() const;
  public:
  void clear_invalitems();
  const ::proto_plan::List& invalitems() const;
  ::proto_plan::List* release_invalitems();
  ::proto_plan::List* mutable_invalitems();
  void set_allocated_invalitems(::proto_plan::List* invalitems);
  private:
  const ::proto_plan::List& _internal_invalitems() const;
  ::proto_plan::List* _internal_mutable_invalitems();
  public:

  // .proto_plan.NodeDefinition nodesDefinition = 25;
  bool has_nodesdefinition() const;
  private:
  bool _internal_has_nodesdefinition() const;
  public:
  void clear_nodesdefinition();
  const ::proto_plan::NodeDefinition& nodesdefinition() const;
  ::proto_plan::NodeDefinition* release_nodesdefinition();
  ::proto_plan::NodeDefinition* mutable_nodesdefinition();
  void set_allocated_nodesdefinition(::proto_plan::NodeDefinition* nodesdefinition);
  private:
  const ::proto_plan::NodeDefinition& _internal_nodesdefinition() const;
  ::proto_plan::NodeDefinition* _internal_mutable_nodesdefinition();
  public:

  // .proto_plan.List subplan_ids = 44;
  bool has_subplan_ids() const;
  private:
  bool _internal_has_subplan_ids() const;
  public:
  void clear_subplan_ids();
  const ::proto_plan::List& subplan_ids() const;
  ::proto_plan::List* release_subplan_ids();
  ::proto_plan::List* mutable_subplan_ids();
  void set_allocated_subplan_ids(::proto_plan::List* subplan_ids);
  private:
  const ::proto_plan::List& _internal_subplan_ids() const;
  ::proto_plan::List* _internal_mutable_subplan_ids();
  public:

  // .proto_plan.List initPlan = 45;
  bool has_initplan() const;
  private:
  bool _internal_has_initplan() const;
  public:
  void clear_initplan();
  const ::proto_plan::List& initplan() const;
  ::proto_plan::List* release_initplan();
  ::proto_plan::List* mutable_initplan();
  void set_allocated_initplan(::proto_plan::List* initplan);
  private:
  const ::proto_plan::List& _internal_initplan() const;
  ::proto_plan::List* _internal_mutable_initplan();
  public:

  // .proto_plan.List plan_hint_warning = 52;
  bool has_plan_hint_warning() const;
  private:
  bool _internal_has_plan_hint_warning() const;
  public:
  void clear_plan_hint_warning();
  const ::proto_plan::List& plan_hint_warning() const;
  ::proto_plan::List* release_plan_hint_warning();
  ::proto_plan::List* mutable_plan_hint_warning();
  void set_allocated_plan_hint_warning(::proto_plan::List* plan_hint_warning);
  private:
  const ::proto_plan::List& _internal_plan_hint_warning() const;
  ::proto_plan::List* _internal_mutable_plan_hint_warning();
  public:

  // .proto_plan.List noanalyze_rellist = 53;
  bool has_noanalyze_rellist() const;
  private:
  bool _internal_has_noanalyze_rellist() const;
  public:
  void clear_noanalyze_rellist();
  const ::proto_plan::List& noanalyze_rellist() const;
  ::proto_plan::List* release_noanalyze_rellist();
  ::proto_plan::List* mutable_noanalyze_rellist();
  void set_allocated_noanalyze_rellist(::proto_plan::List* noanalyze_rellist);
  private:
  const ::proto_plan::List& _internal_noanalyze_rellist() const;
  ::proto_plan::List* _internal_mutable_noanalyze_rellist();
  public:

  // .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
  bool has_ng_querymem() const;
  private:
  bool _internal_has_ng_querymem() const;
  public:
  void clear_ng_querymem();
  const ::proto_plan::NodeGroupQueryMem& ng_querymem() const;
  ::proto_plan::NodeGroupQueryMem* release_ng_querymem();
  ::proto_plan::NodeGroupQueryMem* mutable_ng_querymem();
  void set_allocated_ng_querymem(::proto_plan::NodeGroupQueryMem* ng_querymem);
  private:
  const ::proto_plan::NodeGroupQueryMem& _internal_ng_querymem() const;
  ::proto_plan::NodeGroupQueryMem* _internal_mutable_ng_querymem();
  public:

  // .proto_plan.NodeTag type = 1;
  void clear_type();
  ::proto_plan::NodeTag type() const;
  void set_type(::proto_plan::NodeTag value);
  private:
  ::proto_plan::NodeTag _internal_type() const;
  void _internal_set_type(::proto_plan::NodeTag value);
  public:

  // .proto_plan.CmdType commandType = 2;
  void clear_commandtype();
  ::proto_plan::CmdType commandtype() const;
  void set_commandtype(::proto_plan::CmdType value);
  private:
  ::proto_plan::CmdType _internal_commandtype() const;
  void _internal_set_commandtype(::proto_plan::CmdType value);
  public:

  // uint64 queryId = 3;
  void clear_queryid();
  ::PROTOBUF_NAMESPACE_ID::uint64 queryid() const;
  void set_queryid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_queryid() const;
  void _internal_set_queryid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool hasReturning = 4;
  void clear_hasreturning();
  bool hasreturning() const;
  void set_hasreturning(bool value);
  private:
  bool _internal_hasreturning() const;
  void _internal_set_hasreturning(bool value);
  public:

  // bool hasModifyingCTE = 5;
  void clear_hasmodifyingcte();
  bool hasmodifyingcte() const;
  void set_hasmodifyingcte(bool value);
  private:
  bool _internal_hasmodifyingcte() const;
  void _internal_set_hasmodifyingcte(bool value);
  public:

  // bool hasIgnore = 6;
  void clear_hasignore();
  bool hasignore() const;
  void set_hasignore(bool value);
  private:
  bool _internal_hasignore() const;
  void _internal_set_hasignore(bool value);
  public:

  // bool canSetTag = 7;
  void clear_cansettag();
  bool cansettag() const;
  void set_cansettag(bool value);
  private:
  bool _internal_cansettag() const;
  void _internal_set_cansettag(bool value);
  public:

  // bool transientPlan = 8;
  void clear_transientplan();
  bool transientplan() const;
  void set_transientplan(bool value);
  private:
  bool _internal_transientplan() const;
  void _internal_set_transientplan(bool value);
  public:

  // bool dependsOnRole = 9;
  void clear_dependsonrole();
  bool dependsonrole() const;
  void set_dependsonrole(bool value);
  private:
  bool _internal_dependsonrole() const;
  void _internal_set_dependsonrole(bool value);
  public:

  // bool is_flt_frame = 10;
  void clear_is_flt_frame();
  bool is_flt_frame() const;
  void set_is_flt_frame(bool value);
  private:
  bool _internal_is_flt_frame() const;
  void _internal_set_is_flt_frame(bool value);
  public:

  // bool is_dynmaic_smp = 30;
  void clear_is_dynmaic_smp();
  bool is_dynmaic_smp() const;
  void set_is_dynmaic_smp(bool value);
  private:
  bool _internal_is_dynmaic_smp() const;
  void _internal_set_is_dynmaic_smp(bool value);
  public:

  // int32 nParamExec = 20;
  void clear_nparamexec();
  ::PROTOBUF_NAMESPACE_ID::int32 nparamexec() const;
  void set_nparamexec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nparamexec() const;
  void _internal_set_nparamexec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_streams = 21;
  void clear_num_streams();
  ::PROTOBUF_NAMESPACE_ID::int32 num_streams() const;
  void set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_streams() const;
  void _internal_set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_push_sql_num = 22;
  void clear_max_push_sql_num();
  ::PROTOBUF_NAMESPACE_ID::int32 max_push_sql_num() const;
  void set_max_push_sql_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_push_sql_num() const;
  void _internal_set_max_push_sql_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gather_count = 23;
  void clear_gather_count();
  ::PROTOBUF_NAMESPACE_ID::int32 gather_count() const;
  void set_gather_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gather_count() const;
  void _internal_set_gather_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_nodes = 24;
  void clear_num_nodes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_nodes() const;
  void set_num_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_nodes() const;
  void _internal_set_num_nodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 instrument_option = 26;
  void clear_instrument_option();
  ::PROTOBUF_NAMESPACE_ID::int32 instrument_option() const;
  void set_instrument_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instrument_option() const;
  void _internal_set_instrument_option(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_plannodes = 27;
  void clear_num_plannodes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_plannodes() const;
  void set_num_plannodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_plannodes() const;
  void _internal_set_num_plannodes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_max_cpu = 31;
  void clear_dynsmp_max_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_max_cpu() const;
  void set_dynsmp_max_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_max_cpu() const;
  void _internal_set_dynsmp_max_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_avail_cpu = 32;
  void clear_dynsmp_avail_cpu();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_avail_cpu() const;
  void set_dynsmp_avail_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_avail_cpu() const;
  void _internal_set_dynsmp_avail_cpu(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_cpu_util = 33;
  void clear_dynsmp_cpu_util();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_cpu_util() const;
  void set_dynsmp_cpu_util(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_cpu_util() const;
  void _internal_set_dynsmp_cpu_util(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double dynsmp_query_estimate_cpu_usge = 35;
  void clear_dynsmp_query_estimate_cpu_usge();
  double dynsmp_query_estimate_cpu_usge() const;
  void set_dynsmp_query_estimate_cpu_usge(double value);
  private:
  double _internal_dynsmp_query_estimate_cpu_usge() const;
  void _internal_set_dynsmp_query_estimate_cpu_usge(double value);
  public:

  // int32 dynsmp_active_statement = 34;
  void clear_dynsmp_active_statement();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_active_statement() const;
  void set_dynsmp_active_statement(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_active_statement() const;
  void _internal_set_dynsmp_active_statement(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_plan_optimal_dop = 36;
  void clear_dynsmp_plan_optimal_dop();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_plan_optimal_dop() const;
  void set_dynsmp_plan_optimal_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_plan_optimal_dop() const;
  void _internal_set_dynsmp_plan_optimal_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_plan_original_dop = 37;
  void clear_dynsmp_plan_original_dop();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_plan_original_dop() const;
  void set_dynsmp_plan_original_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_plan_original_dop() const;
  void _internal_set_dynsmp_plan_original_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_dop_mem_limit = 38;
  void clear_dynsmp_dop_mem_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_dop_mem_limit() const;
  void set_dynsmp_dop_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_dop_mem_limit() const;
  void _internal_set_dynsmp_dop_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dynsmp_min_non_spill_dop = 39;
  void clear_dynsmp_min_non_spill_dop();
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_min_non_spill_dop() const;
  void set_dynsmp_min_non_spill_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dynsmp_min_non_spill_dop() const;
  void _internal_set_dynsmp_min_non_spill_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_bucketmaps = 40;
  void clear_num_bucketmaps();
  ::PROTOBUF_NAMESPACE_ID::int32 num_bucketmaps() const;
  void set_num_bucketmaps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_bucketmaps() const;
  void _internal_set_num_bucketmaps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 dataDestRelIndex = 46;
  void clear_datadestrelindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 datadestrelindex() const;
  void set_datadestrelindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datadestrelindex() const;
  void _internal_set_datadestrelindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 MaxBloomFilterNum = 47;
  void clear_maxbloomfilternum();
  ::PROTOBUF_NAMESPACE_ID::int32 maxbloomfilternum() const;
  void set_maxbloomfilternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxbloomfilternum() const;
  void _internal_set_maxbloomfilternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double plannertime = 49;
  void clear_plannertime();
  double plannertime() const;
  void set_plannertime(double value);
  private:
  double _internal_plannertime() const;
  void _internal_set_plannertime(double value);
  public:

  // int32 query_dop = 48;
  void clear_query_dop();
  ::PROTOBUF_NAMESPACE_ID::int32 query_dop() const;
  void set_query_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_query_dop() const;
  void _internal_set_query_dop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool in_compute_pool = 50;
  void clear_in_compute_pool();
  bool in_compute_pool() const;
  void set_in_compute_pool(bool value);
  private:
  bool _internal_in_compute_pool() const;
  void _internal_set_in_compute_pool(bool value);
  public:

  // bool has_obsrel = 51;
  void clear_has_obsrel();
  bool has_obsrel() const;
  void set_has_obsrel(bool value);
  private:
  bool _internal_has_obsrel() const;
  void _internal_set_has_obsrel(bool value);
  public:

  // bool ng_use_planA = 56;
  void clear_ng_use_plana();
  bool ng_use_plana() const;
  void set_ng_use_plana(bool value);
  private:
  bool _internal_ng_use_plana() const;
  void _internal_set_ng_use_plana(bool value);
  public:

  // bool isRowTriggerShippable = 57;
  void clear_isrowtriggershippable();
  bool isrowtriggershippable() const;
  void set_isrowtriggershippable(bool value);
  private:
  bool _internal_isrowtriggershippable() const;
  void _internal_set_isrowtriggershippable(bool value);
  public:

  // int32 ng_num = 54;
  void clear_ng_num();
  ::PROTOBUF_NAMESPACE_ID::int32 ng_num() const;
  void set_ng_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ng_num() const;
  void _internal_set_ng_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_stream_plan = 58;
  void clear_is_stream_plan();
  bool is_stream_plan() const;
  void set_is_stream_plan(bool value);
  private:
  bool _internal_is_stream_plan() const;
  void _internal_set_is_stream_plan(bool value);
  public:

  // bool multi_node_hint = 59;
  void clear_multi_node_hint();
  bool multi_node_hint() const;
  void set_multi_node_hint(bool value);
  private:
  bool _internal_multi_node_hint() const;
  void _internal_set_multi_node_hint(bool value);
  public:

  // uint64 uniqueSQLId = 60;
  void clear_uniquesqlid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uniquesqlid() const;
  void set_uniquesqlid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uniquesqlid() const;
  void _internal_set_uniquesqlid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 cause_type = 61;
  void clear_cause_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 cause_type() const;
  void set_cause_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cause_type() const;
  void _internal_set_cause_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto_plan.PlannedStmt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > query_mem_;
  mutable std::atomic<int> _query_mem_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > assigned_query_mem_;
  mutable std::atomic<int> _assigned_query_mem_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > bucketmap_;
  mutable std::atomic<int> _bucketmap_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bucketcnt_;
  mutable std::atomic<int> _bucketcnt_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_string_;
  ::proto_plan::Plan* plantree_;
  ::proto_plan::List* rtable_;
  ::proto_plan::List* resultrelations_;
  ::proto_plan::Node* utilitystmt_;
  ::proto_plan::List* subplans_;
  ::proto_plan::Bitmapset* rewindplanids_;
  ::proto_plan::List* rowmarks_;
  ::proto_plan::List* relationoids_;
  ::proto_plan::List* invalitems_;
  ::proto_plan::NodeDefinition* nodesdefinition_;
  ::proto_plan::List* subplan_ids_;
  ::proto_plan::List* initplan_;
  ::proto_plan::List* plan_hint_warning_;
  ::proto_plan::List* noanalyze_rellist_;
  ::proto_plan::NodeGroupQueryMem* ng_querymem_;
  int type_;
  int commandtype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 queryid_;
  bool hasreturning_;
  bool hasmodifyingcte_;
  bool hasignore_;
  bool cansettag_;
  bool transientplan_;
  bool dependsonrole_;
  bool is_flt_frame_;
  bool is_dynmaic_smp_;
  ::PROTOBUF_NAMESPACE_ID::int32 nparamexec_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_streams_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_push_sql_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 gather_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_nodes_;
  ::PROTOBUF_NAMESPACE_ID::int32 instrument_option_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_plannodes_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_max_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_avail_cpu_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_cpu_util_;
  double dynsmp_query_estimate_cpu_usge_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_active_statement_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_plan_optimal_dop_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_plan_original_dop_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_dop_mem_limit_;
  ::PROTOBUF_NAMESPACE_ID::int32 dynsmp_min_non_spill_dop_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_bucketmaps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datadestrelindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxbloomfilternum_;
  double plannertime_;
  ::PROTOBUF_NAMESPACE_ID::int32 query_dop_;
  bool in_compute_pool_;
  bool has_obsrel_;
  bool ng_use_plana_;
  bool isrowtriggershippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ng_num_;
  bool is_stream_plan_;
  bool multi_node_hint_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uniquesqlid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cause_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_query_5fstmt_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeDefinition

// uint32 nodeoid = 1;
inline void NodeDefinition::clear_nodeoid() {
  nodeoid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeDefinition::_internal_nodeoid() const {
  return nodeoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeDefinition::nodeoid() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeoid)
  return _internal_nodeoid();
}
inline void NodeDefinition::_internal_set_nodeoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nodeoid_ = value;
}
inline void NodeDefinition::set_nodeoid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nodeoid(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeoid)
}

// int32 nodeid = 2;
inline void NodeDefinition::clear_nodeid() {
  nodeid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodeid() const {
  return nodeid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodeid() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeid)
  return _internal_nodeid();
}
inline void NodeDefinition::_internal_set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodeid_ = value;
}
inline void NodeDefinition::set_nodeid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodeid(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeid)
}

// string nodename = 3;
inline void NodeDefinition::clear_nodename() {
  nodename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeDefinition::nodename() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodename)
  return _internal_nodename();
}
inline void NodeDefinition::set_nodename(const std::string& value) {
  _internal_set_nodename(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodename)
}
inline std::string* NodeDefinition::mutable_nodename() {
  // @@protoc_insertion_point(field_mutable:proto_plan.NodeDefinition.nodename)
  return _internal_mutable_nodename();
}
inline const std::string& NodeDefinition::_internal_nodename() const {
  return nodename_.GetNoArena();
}
inline void NodeDefinition::_internal_set_nodename(const std::string& value) {
  
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeDefinition::set_nodename(std::string&& value) {
  
  nodename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_plan.NodeDefinition.nodename)
}
inline void NodeDefinition::set_nodename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_plan.NodeDefinition.nodename)
}
inline void NodeDefinition::set_nodename(const char* value, size_t size) {
  
  nodename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_plan.NodeDefinition.nodename)
}
inline std::string* NodeDefinition::_internal_mutable_nodename() {
  
  return nodename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeDefinition::release_nodename() {
  // @@protoc_insertion_point(field_release:proto_plan.NodeDefinition.nodename)
  
  return nodename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeDefinition::set_allocated_nodename(std::string* nodename) {
  if (nodename != nullptr) {
    
  } else {
    
  }
  nodename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodename);
  // @@protoc_insertion_point(field_set_allocated:proto_plan.NodeDefinition.nodename)
}

// string nodehost = 4;
inline void NodeDefinition::clear_nodehost() {
  nodehost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeDefinition::nodehost() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodehost)
  return _internal_nodehost();
}
inline void NodeDefinition::set_nodehost(const std::string& value) {
  _internal_set_nodehost(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodehost)
}
inline std::string* NodeDefinition::mutable_nodehost() {
  // @@protoc_insertion_point(field_mutable:proto_plan.NodeDefinition.nodehost)
  return _internal_mutable_nodehost();
}
inline const std::string& NodeDefinition::_internal_nodehost() const {
  return nodehost_.GetNoArena();
}
inline void NodeDefinition::_internal_set_nodehost(const std::string& value) {
  
  nodehost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeDefinition::set_nodehost(std::string&& value) {
  
  nodehost_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_plan.NodeDefinition.nodehost)
}
inline void NodeDefinition::set_nodehost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodehost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_plan.NodeDefinition.nodehost)
}
inline void NodeDefinition::set_nodehost(const char* value, size_t size) {
  
  nodehost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_plan.NodeDefinition.nodehost)
}
inline std::string* NodeDefinition::_internal_mutable_nodehost() {
  
  return nodehost_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeDefinition::release_nodehost() {
  // @@protoc_insertion_point(field_release:proto_plan.NodeDefinition.nodehost)
  
  return nodehost_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeDefinition::set_allocated_nodehost(std::string* nodehost) {
  if (nodehost != nullptr) {
    
  } else {
    
  }
  nodehost_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodehost);
  // @@protoc_insertion_point(field_set_allocated:proto_plan.NodeDefinition.nodehost)
}

// int32 nodeport = 5;
inline void NodeDefinition::clear_nodeport() {
  nodeport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodeport() const {
  return nodeport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodeport() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeport)
  return _internal_nodeport();
}
inline void NodeDefinition::_internal_set_nodeport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodeport_ = value;
}
inline void NodeDefinition::set_nodeport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodeport(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeport)
}

// int32 nodectlport = 6;
inline void NodeDefinition::clear_nodectlport() {
  nodectlport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodectlport() const {
  return nodectlport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodectlport() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodectlport)
  return _internal_nodectlport();
}
inline void NodeDefinition::_internal_set_nodectlport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodectlport_ = value;
}
inline void NodeDefinition::set_nodectlport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodectlport(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodectlport)
}

// int32 nodesctpport = 7;
inline void NodeDefinition::clear_nodesctpport() {
  nodesctpport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodesctpport() const {
  return nodesctpport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodesctpport() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodesctpport)
  return _internal_nodesctpport();
}
inline void NodeDefinition::_internal_set_nodesctpport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodesctpport_ = value;
}
inline void NodeDefinition::set_nodesctpport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodesctpport(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodesctpport)
}

// string nodehost1 = 8;
inline void NodeDefinition::clear_nodehost1() {
  nodehost1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeDefinition::nodehost1() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodehost1)
  return _internal_nodehost1();
}
inline void NodeDefinition::set_nodehost1(const std::string& value) {
  _internal_set_nodehost1(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodehost1)
}
inline std::string* NodeDefinition::mutable_nodehost1() {
  // @@protoc_insertion_point(field_mutable:proto_plan.NodeDefinition.nodehost1)
  return _internal_mutable_nodehost1();
}
inline const std::string& NodeDefinition::_internal_nodehost1() const {
  return nodehost1_.GetNoArena();
}
inline void NodeDefinition::_internal_set_nodehost1(const std::string& value) {
  
  nodehost1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeDefinition::set_nodehost1(std::string&& value) {
  
  nodehost1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_plan.NodeDefinition.nodehost1)
}
inline void NodeDefinition::set_nodehost1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodehost1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_plan.NodeDefinition.nodehost1)
}
inline void NodeDefinition::set_nodehost1(const char* value, size_t size) {
  
  nodehost1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_plan.NodeDefinition.nodehost1)
}
inline std::string* NodeDefinition::_internal_mutable_nodehost1() {
  
  return nodehost1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeDefinition::release_nodehost1() {
  // @@protoc_insertion_point(field_release:proto_plan.NodeDefinition.nodehost1)
  
  return nodehost1_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeDefinition::set_allocated_nodehost1(std::string* nodehost1) {
  if (nodehost1 != nullptr) {
    
  } else {
    
  }
  nodehost1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodehost1);
  // @@protoc_insertion_point(field_set_allocated:proto_plan.NodeDefinition.nodehost1)
}

// int32 nodeport1 = 9;
inline void NodeDefinition::clear_nodeport1() {
  nodeport1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodeport1() const {
  return nodeport1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodeport1() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeport1)
  return _internal_nodeport1();
}
inline void NodeDefinition::_internal_set_nodeport1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodeport1_ = value;
}
inline void NodeDefinition::set_nodeport1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodeport1(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeport1)
}

// int32 nodectlport1 = 10;
inline void NodeDefinition::clear_nodectlport1() {
  nodectlport1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodectlport1() const {
  return nodectlport1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodectlport1() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodectlport1)
  return _internal_nodectlport1();
}
inline void NodeDefinition::_internal_set_nodectlport1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodectlport1_ = value;
}
inline void NodeDefinition::set_nodectlport1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodectlport1(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodectlport1)
}

// int32 nodesctpport1 = 11;
inline void NodeDefinition::clear_nodesctpport1() {
  nodesctpport1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::_internal_nodesctpport1() const {
  return nodesctpport1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeDefinition::nodesctpport1() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodesctpport1)
  return _internal_nodesctpport1();
}
inline void NodeDefinition::_internal_set_nodesctpport1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodesctpport1_ = value;
}
inline void NodeDefinition::set_nodesctpport1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nodesctpport1(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodesctpport1)
}

// bool hostisprimary = 12;
inline void NodeDefinition::clear_hostisprimary() {
  hostisprimary_ = false;
}
inline bool NodeDefinition::_internal_hostisprimary() const {
  return hostisprimary_;
}
inline bool NodeDefinition::hostisprimary() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.hostisprimary)
  return _internal_hostisprimary();
}
inline void NodeDefinition::_internal_set_hostisprimary(bool value) {
  
  hostisprimary_ = value;
}
inline void NodeDefinition::set_hostisprimary(bool value) {
  _internal_set_hostisprimary(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.hostisprimary)
}

// bool nodeisprimary = 13;
inline void NodeDefinition::clear_nodeisprimary() {
  nodeisprimary_ = false;
}
inline bool NodeDefinition::_internal_nodeisprimary() const {
  return nodeisprimary_;
}
inline bool NodeDefinition::nodeisprimary() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeisprimary)
  return _internal_nodeisprimary();
}
inline void NodeDefinition::_internal_set_nodeisprimary(bool value) {
  
  nodeisprimary_ = value;
}
inline void NodeDefinition::set_nodeisprimary(bool value) {
  _internal_set_nodeisprimary(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeisprimary)
}

// bool nodeispreferred = 14;
inline void NodeDefinition::clear_nodeispreferred() {
  nodeispreferred_ = false;
}
inline bool NodeDefinition::_internal_nodeispreferred() const {
  return nodeispreferred_;
}
inline bool NodeDefinition::nodeispreferred() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeispreferred)
  return _internal_nodeispreferred();
}
inline void NodeDefinition::_internal_set_nodeispreferred(bool value) {
  
  nodeispreferred_ = value;
}
inline void NodeDefinition::set_nodeispreferred(bool value) {
  _internal_set_nodeispreferred(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeispreferred)
}

// bool nodeis_central = 15;
inline void NodeDefinition::clear_nodeis_central() {
  nodeis_central_ = false;
}
inline bool NodeDefinition::_internal_nodeis_central() const {
  return nodeis_central_;
}
inline bool NodeDefinition::nodeis_central() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeis_central)
  return _internal_nodeis_central();
}
inline void NodeDefinition::_internal_set_nodeis_central(bool value) {
  
  nodeis_central_ = value;
}
inline void NodeDefinition::set_nodeis_central(bool value) {
  _internal_set_nodeis_central(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeis_central)
}

// bool nodeis_active = 16;
inline void NodeDefinition::clear_nodeis_active() {
  nodeis_active_ = false;
}
inline bool NodeDefinition::_internal_nodeis_active() const {
  return nodeis_active_;
}
inline bool NodeDefinition::nodeis_active() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.nodeis_active)
  return _internal_nodeis_active();
}
inline void NodeDefinition::_internal_set_nodeis_active(bool value) {
  
  nodeis_active_ = value;
}
inline void NodeDefinition::set_nodeis_active(bool value) {
  _internal_set_nodeis_active(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.nodeis_active)
}

// uint32 shard_oid = 17;
inline void NodeDefinition::clear_shard_oid() {
  shard_oid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeDefinition::_internal_shard_oid() const {
  return shard_oid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeDefinition::shard_oid() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeDefinition.shard_oid)
  return _internal_shard_oid();
}
inline void NodeDefinition::_internal_set_shard_oid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  shard_oid_ = value;
}
inline void NodeDefinition::set_shard_oid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shard_oid(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeDefinition.shard_oid)
}

// -------------------------------------------------------------------

// Node

// .proto_plan.NodeTag type = 1;
inline void Node::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag Node::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag Node::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.Node.type)
  return _internal_type();
}
inline void Node::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void Node::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.Node.type)
}

// -------------------------------------------------------------------

// NodeGroupQueryMem

// uint32 ng_oid = 1;
inline void NodeGroupQueryMem::clear_ng_oid() {
  ng_oid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeGroupQueryMem::_internal_ng_oid() const {
  return ng_oid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeGroupQueryMem::ng_oid() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeGroupQueryMem.ng_oid)
  return _internal_ng_oid();
}
inline void NodeGroupQueryMem::_internal_set_ng_oid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ng_oid_ = value;
}
inline void NodeGroupQueryMem::set_ng_oid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ng_oid(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeGroupQueryMem.ng_oid)
}

// string nodegroup = 2;
inline void NodeGroupQueryMem::clear_nodegroup() {
  nodegroup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeGroupQueryMem::nodegroup() const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeGroupQueryMem.nodegroup)
  return _internal_nodegroup();
}
inline void NodeGroupQueryMem::set_nodegroup(const std::string& value) {
  _internal_set_nodegroup(value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeGroupQueryMem.nodegroup)
}
inline std::string* NodeGroupQueryMem::mutable_nodegroup() {
  // @@protoc_insertion_point(field_mutable:proto_plan.NodeGroupQueryMem.nodegroup)
  return _internal_mutable_nodegroup();
}
inline const std::string& NodeGroupQueryMem::_internal_nodegroup() const {
  return nodegroup_.GetNoArena();
}
inline void NodeGroupQueryMem::_internal_set_nodegroup(const std::string& value) {
  
  nodegroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeGroupQueryMem::set_nodegroup(std::string&& value) {
  
  nodegroup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_plan.NodeGroupQueryMem.nodegroup)
}
inline void NodeGroupQueryMem::set_nodegroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodegroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_plan.NodeGroupQueryMem.nodegroup)
}
inline void NodeGroupQueryMem::set_nodegroup(const char* value, size_t size) {
  
  nodegroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_plan.NodeGroupQueryMem.nodegroup)
}
inline std::string* NodeGroupQueryMem::_internal_mutable_nodegroup() {
  
  return nodegroup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeGroupQueryMem::release_nodegroup() {
  // @@protoc_insertion_point(field_release:proto_plan.NodeGroupQueryMem.nodegroup)
  
  return nodegroup_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeGroupQueryMem::set_allocated_nodegroup(std::string* nodegroup) {
  if (nodegroup != nullptr) {
    
  } else {
    
  }
  nodegroup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodegroup);
  // @@protoc_insertion_point(field_set_allocated:proto_plan.NodeGroupQueryMem.nodegroup)
}

// repeated int32 query_mem = 3;
inline int NodeGroupQueryMem::_internal_query_mem_size() const {
  return query_mem_.size();
}
inline int NodeGroupQueryMem::query_mem_size() const {
  return _internal_query_mem_size();
}
inline void NodeGroupQueryMem::clear_query_mem() {
  query_mem_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeGroupQueryMem::_internal_query_mem(int index) const {
  return query_mem_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeGroupQueryMem::query_mem(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.NodeGroupQueryMem.query_mem)
  return _internal_query_mem(index);
}
inline void NodeGroupQueryMem::set_query_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  query_mem_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.NodeGroupQueryMem.query_mem)
}
inline void NodeGroupQueryMem::_internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  query_mem_.Add(value);
}
inline void NodeGroupQueryMem::add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_query_mem(value);
  // @@protoc_insertion_point(field_add:proto_plan.NodeGroupQueryMem.query_mem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NodeGroupQueryMem::_internal_query_mem() const {
  return query_mem_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NodeGroupQueryMem::query_mem() const {
  // @@protoc_insertion_point(field_list:proto_plan.NodeGroupQueryMem.query_mem)
  return _internal_query_mem();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NodeGroupQueryMem::_internal_mutable_query_mem() {
  return &query_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NodeGroupQueryMem::mutable_query_mem() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.NodeGroupQueryMem.query_mem)
  return _internal_mutable_query_mem();
}

// -------------------------------------------------------------------

// PlannedStmt

// .proto_plan.NodeTag type = 1;
inline void PlannedStmt::clear_type() {
  type_ = 0;
}
inline ::proto_plan::NodeTag PlannedStmt::_internal_type() const {
  return static_cast< ::proto_plan::NodeTag >(type_);
}
inline ::proto_plan::NodeTag PlannedStmt::type() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.type)
  return _internal_type();
}
inline void PlannedStmt::_internal_set_type(::proto_plan::NodeTag value) {
  
  type_ = value;
}
inline void PlannedStmt::set_type(::proto_plan::NodeTag value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.type)
}

// .proto_plan.CmdType commandType = 2;
inline void PlannedStmt::clear_commandtype() {
  commandtype_ = 0;
}
inline ::proto_plan::CmdType PlannedStmt::_internal_commandtype() const {
  return static_cast< ::proto_plan::CmdType >(commandtype_);
}
inline ::proto_plan::CmdType PlannedStmt::commandtype() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.commandType)
  return _internal_commandtype();
}
inline void PlannedStmt::_internal_set_commandtype(::proto_plan::CmdType value) {
  
  commandtype_ = value;
}
inline void PlannedStmt::set_commandtype(::proto_plan::CmdType value) {
  _internal_set_commandtype(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.commandType)
}

// uint64 queryId = 3;
inline void PlannedStmt::clear_queryid() {
  queryid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlannedStmt::_internal_queryid() const {
  return queryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlannedStmt::queryid() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.queryId)
  return _internal_queryid();
}
inline void PlannedStmt::_internal_set_queryid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  queryid_ = value;
}
inline void PlannedStmt::set_queryid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_queryid(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.queryId)
}

// bool hasReturning = 4;
inline void PlannedStmt::clear_hasreturning() {
  hasreturning_ = false;
}
inline bool PlannedStmt::_internal_hasreturning() const {
  return hasreturning_;
}
inline bool PlannedStmt::hasreturning() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.hasReturning)
  return _internal_hasreturning();
}
inline void PlannedStmt::_internal_set_hasreturning(bool value) {
  
  hasreturning_ = value;
}
inline void PlannedStmt::set_hasreturning(bool value) {
  _internal_set_hasreturning(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.hasReturning)
}

// bool hasModifyingCTE = 5;
inline void PlannedStmt::clear_hasmodifyingcte() {
  hasmodifyingcte_ = false;
}
inline bool PlannedStmt::_internal_hasmodifyingcte() const {
  return hasmodifyingcte_;
}
inline bool PlannedStmt::hasmodifyingcte() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.hasModifyingCTE)
  return _internal_hasmodifyingcte();
}
inline void PlannedStmt::_internal_set_hasmodifyingcte(bool value) {
  
  hasmodifyingcte_ = value;
}
inline void PlannedStmt::set_hasmodifyingcte(bool value) {
  _internal_set_hasmodifyingcte(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.hasModifyingCTE)
}

// bool hasIgnore = 6;
inline void PlannedStmt::clear_hasignore() {
  hasignore_ = false;
}
inline bool PlannedStmt::_internal_hasignore() const {
  return hasignore_;
}
inline bool PlannedStmt::hasignore() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.hasIgnore)
  return _internal_hasignore();
}
inline void PlannedStmt::_internal_set_hasignore(bool value) {
  
  hasignore_ = value;
}
inline void PlannedStmt::set_hasignore(bool value) {
  _internal_set_hasignore(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.hasIgnore)
}

// bool canSetTag = 7;
inline void PlannedStmt::clear_cansettag() {
  cansettag_ = false;
}
inline bool PlannedStmt::_internal_cansettag() const {
  return cansettag_;
}
inline bool PlannedStmt::cansettag() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.canSetTag)
  return _internal_cansettag();
}
inline void PlannedStmt::_internal_set_cansettag(bool value) {
  
  cansettag_ = value;
}
inline void PlannedStmt::set_cansettag(bool value) {
  _internal_set_cansettag(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.canSetTag)
}

// bool transientPlan = 8;
inline void PlannedStmt::clear_transientplan() {
  transientplan_ = false;
}
inline bool PlannedStmt::_internal_transientplan() const {
  return transientplan_;
}
inline bool PlannedStmt::transientplan() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.transientPlan)
  return _internal_transientplan();
}
inline void PlannedStmt::_internal_set_transientplan(bool value) {
  
  transientplan_ = value;
}
inline void PlannedStmt::set_transientplan(bool value) {
  _internal_set_transientplan(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.transientPlan)
}

// bool dependsOnRole = 9;
inline void PlannedStmt::clear_dependsonrole() {
  dependsonrole_ = false;
}
inline bool PlannedStmt::_internal_dependsonrole() const {
  return dependsonrole_;
}
inline bool PlannedStmt::dependsonrole() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dependsOnRole)
  return _internal_dependsonrole();
}
inline void PlannedStmt::_internal_set_dependsonrole(bool value) {
  
  dependsonrole_ = value;
}
inline void PlannedStmt::set_dependsonrole(bool value) {
  _internal_set_dependsonrole(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dependsOnRole)
}

// bool is_flt_frame = 10;
inline void PlannedStmt::clear_is_flt_frame() {
  is_flt_frame_ = false;
}
inline bool PlannedStmt::_internal_is_flt_frame() const {
  return is_flt_frame_;
}
inline bool PlannedStmt::is_flt_frame() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.is_flt_frame)
  return _internal_is_flt_frame();
}
inline void PlannedStmt::_internal_set_is_flt_frame(bool value) {
  
  is_flt_frame_ = value;
}
inline void PlannedStmt::set_is_flt_frame(bool value) {
  _internal_set_is_flt_frame(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.is_flt_frame)
}

// .proto_plan.Plan planTree = 11;
inline bool PlannedStmt::_internal_has_plantree() const {
  return this != internal_default_instance() && plantree_ != nullptr;
}
inline bool PlannedStmt::has_plantree() const {
  return _internal_has_plantree();
}
inline const ::proto_plan::Plan& PlannedStmt::_internal_plantree() const {
  const ::proto_plan::Plan* p = plantree_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::Plan*>(
      &::proto_plan::_Plan_default_instance_);
}
inline const ::proto_plan::Plan& PlannedStmt::plantree() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.planTree)
  return _internal_plantree();
}
inline ::proto_plan::Plan* PlannedStmt::release_plantree() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.planTree)
  
  ::proto_plan::Plan* temp = plantree_;
  plantree_ = nullptr;
  return temp;
}
inline ::proto_plan::Plan* PlannedStmt::_internal_mutable_plantree() {
  
  if (plantree_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Plan>(GetArenaNoVirtual());
    plantree_ = p;
  }
  return plantree_;
}
inline ::proto_plan::Plan* PlannedStmt::mutable_plantree() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.planTree)
  return _internal_mutable_plantree();
}
inline void PlannedStmt::set_allocated_plantree(::proto_plan::Plan* plantree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plantree_);
  }
  if (plantree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plantree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plantree, submessage_arena);
    }
    
  } else {
    
  }
  plantree_ = plantree;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.planTree)
}

// .proto_plan.List rtable = 12;
inline bool PlannedStmt::_internal_has_rtable() const {
  return this != internal_default_instance() && rtable_ != nullptr;
}
inline bool PlannedStmt::has_rtable() const {
  return _internal_has_rtable();
}
inline const ::proto_plan::List& PlannedStmt::_internal_rtable() const {
  const ::proto_plan::List* p = rtable_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::rtable() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.rtable)
  return _internal_rtable();
}
inline ::proto_plan::List* PlannedStmt::release_rtable() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.rtable)
  
  ::proto_plan::List* temp = rtable_;
  rtable_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_rtable() {
  
  if (rtable_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    rtable_ = p;
  }
  return rtable_;
}
inline ::proto_plan::List* PlannedStmt::mutable_rtable() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.rtable)
  return _internal_mutable_rtable();
}
inline void PlannedStmt::set_allocated_rtable(::proto_plan::List* rtable) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rtable_);
  }
  if (rtable) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rtable = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtable, submessage_arena);
    }
    
  } else {
    
  }
  rtable_ = rtable;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.rtable)
}

// .proto_plan.List resultRelations = 13;
inline bool PlannedStmt::_internal_has_resultrelations() const {
  return this != internal_default_instance() && resultrelations_ != nullptr;
}
inline bool PlannedStmt::has_resultrelations() const {
  return _internal_has_resultrelations();
}
inline const ::proto_plan::List& PlannedStmt::_internal_resultrelations() const {
  const ::proto_plan::List* p = resultrelations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::resultrelations() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.resultRelations)
  return _internal_resultrelations();
}
inline ::proto_plan::List* PlannedStmt::release_resultrelations() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.resultRelations)
  
  ::proto_plan::List* temp = resultrelations_;
  resultrelations_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_resultrelations() {
  
  if (resultrelations_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    resultrelations_ = p;
  }
  return resultrelations_;
}
inline ::proto_plan::List* PlannedStmt::mutable_resultrelations() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.resultRelations)
  return _internal_mutable_resultrelations();
}
inline void PlannedStmt::set_allocated_resultrelations(::proto_plan::List* resultrelations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resultrelations_);
  }
  if (resultrelations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resultrelations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resultrelations, submessage_arena);
    }
    
  } else {
    
  }
  resultrelations_ = resultrelations;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.resultRelations)
}

// .proto_plan.Node utilityStmt = 14;
inline bool PlannedStmt::_internal_has_utilitystmt() const {
  return this != internal_default_instance() && utilitystmt_ != nullptr;
}
inline bool PlannedStmt::has_utilitystmt() const {
  return _internal_has_utilitystmt();
}
inline void PlannedStmt::clear_utilitystmt() {
  if (GetArenaNoVirtual() == nullptr && utilitystmt_ != nullptr) {
    delete utilitystmt_;
  }
  utilitystmt_ = nullptr;
}
inline const ::proto_plan::Node& PlannedStmt::_internal_utilitystmt() const {
  const ::proto_plan::Node* p = utilitystmt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::Node*>(
      &::proto_plan::_Node_default_instance_);
}
inline const ::proto_plan::Node& PlannedStmt::utilitystmt() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.utilityStmt)
  return _internal_utilitystmt();
}
inline ::proto_plan::Node* PlannedStmt::release_utilitystmt() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.utilityStmt)
  
  ::proto_plan::Node* temp = utilitystmt_;
  utilitystmt_ = nullptr;
  return temp;
}
inline ::proto_plan::Node* PlannedStmt::_internal_mutable_utilitystmt() {
  
  if (utilitystmt_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Node>(GetArenaNoVirtual());
    utilitystmt_ = p;
  }
  return utilitystmt_;
}
inline ::proto_plan::Node* PlannedStmt::mutable_utilitystmt() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.utilityStmt)
  return _internal_mutable_utilitystmt();
}
inline void PlannedStmt::set_allocated_utilitystmt(::proto_plan::Node* utilitystmt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete utilitystmt_;
  }
  if (utilitystmt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      utilitystmt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utilitystmt, submessage_arena);
    }
    
  } else {
    
  }
  utilitystmt_ = utilitystmt;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.utilityStmt)
}

// .proto_plan.List subplans = 15;
inline bool PlannedStmt::_internal_has_subplans() const {
  return this != internal_default_instance() && subplans_ != nullptr;
}
inline bool PlannedStmt::has_subplans() const {
  return _internal_has_subplans();
}
inline const ::proto_plan::List& PlannedStmt::_internal_subplans() const {
  const ::proto_plan::List* p = subplans_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::subplans() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.subplans)
  return _internal_subplans();
}
inline ::proto_plan::List* PlannedStmt::release_subplans() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.subplans)
  
  ::proto_plan::List* temp = subplans_;
  subplans_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_subplans() {
  
  if (subplans_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    subplans_ = p;
  }
  return subplans_;
}
inline ::proto_plan::List* PlannedStmt::mutable_subplans() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.subplans)
  return _internal_mutable_subplans();
}
inline void PlannedStmt::set_allocated_subplans(::proto_plan::List* subplans) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subplans_);
  }
  if (subplans) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subplans = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subplans, submessage_arena);
    }
    
  } else {
    
  }
  subplans_ = subplans;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.subplans)
}

// .proto_plan.Bitmapset rewindPlanIDs = 16;
inline bool PlannedStmt::_internal_has_rewindplanids() const {
  return this != internal_default_instance() && rewindplanids_ != nullptr;
}
inline bool PlannedStmt::has_rewindplanids() const {
  return _internal_has_rewindplanids();
}
inline const ::proto_plan::Bitmapset& PlannedStmt::_internal_rewindplanids() const {
  const ::proto_plan::Bitmapset* p = rewindplanids_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::Bitmapset*>(
      &::proto_plan::_Bitmapset_default_instance_);
}
inline const ::proto_plan::Bitmapset& PlannedStmt::rewindplanids() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.rewindPlanIDs)
  return _internal_rewindplanids();
}
inline ::proto_plan::Bitmapset* PlannedStmt::release_rewindplanids() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.rewindPlanIDs)
  
  ::proto_plan::Bitmapset* temp = rewindplanids_;
  rewindplanids_ = nullptr;
  return temp;
}
inline ::proto_plan::Bitmapset* PlannedStmt::_internal_mutable_rewindplanids() {
  
  if (rewindplanids_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::Bitmapset>(GetArenaNoVirtual());
    rewindplanids_ = p;
  }
  return rewindplanids_;
}
inline ::proto_plan::Bitmapset* PlannedStmt::mutable_rewindplanids() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.rewindPlanIDs)
  return _internal_mutable_rewindplanids();
}
inline void PlannedStmt::set_allocated_rewindplanids(::proto_plan::Bitmapset* rewindplanids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rewindplanids_);
  }
  if (rewindplanids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rewindplanids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rewindplanids, submessage_arena);
    }
    
  } else {
    
  }
  rewindplanids_ = rewindplanids;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.rewindPlanIDs)
}

// .proto_plan.List rowMarks = 17;
inline bool PlannedStmt::_internal_has_rowmarks() const {
  return this != internal_default_instance() && rowmarks_ != nullptr;
}
inline bool PlannedStmt::has_rowmarks() const {
  return _internal_has_rowmarks();
}
inline const ::proto_plan::List& PlannedStmt::_internal_rowmarks() const {
  const ::proto_plan::List* p = rowmarks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::rowmarks() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.rowMarks)
  return _internal_rowmarks();
}
inline ::proto_plan::List* PlannedStmt::release_rowmarks() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.rowMarks)
  
  ::proto_plan::List* temp = rowmarks_;
  rowmarks_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_rowmarks() {
  
  if (rowmarks_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    rowmarks_ = p;
  }
  return rowmarks_;
}
inline ::proto_plan::List* PlannedStmt::mutable_rowmarks() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.rowMarks)
  return _internal_mutable_rowmarks();
}
inline void PlannedStmt::set_allocated_rowmarks(::proto_plan::List* rowmarks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rowmarks_);
  }
  if (rowmarks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rowmarks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rowmarks, submessage_arena);
    }
    
  } else {
    
  }
  rowmarks_ = rowmarks;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.rowMarks)
}

// .proto_plan.List relationOids = 18;
inline bool PlannedStmt::_internal_has_relationoids() const {
  return this != internal_default_instance() && relationoids_ != nullptr;
}
inline bool PlannedStmt::has_relationoids() const {
  return _internal_has_relationoids();
}
inline const ::proto_plan::List& PlannedStmt::_internal_relationoids() const {
  const ::proto_plan::List* p = relationoids_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::relationoids() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.relationOids)
  return _internal_relationoids();
}
inline ::proto_plan::List* PlannedStmt::release_relationoids() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.relationOids)
  
  ::proto_plan::List* temp = relationoids_;
  relationoids_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_relationoids() {
  
  if (relationoids_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    relationoids_ = p;
  }
  return relationoids_;
}
inline ::proto_plan::List* PlannedStmt::mutable_relationoids() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.relationOids)
  return _internal_mutable_relationoids();
}
inline void PlannedStmt::set_allocated_relationoids(::proto_plan::List* relationoids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationoids_);
  }
  if (relationoids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relationoids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationoids, submessage_arena);
    }
    
  } else {
    
  }
  relationoids_ = relationoids;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.relationOids)
}

// .proto_plan.List invalItems = 19;
inline bool PlannedStmt::_internal_has_invalitems() const {
  return this != internal_default_instance() && invalitems_ != nullptr;
}
inline bool PlannedStmt::has_invalitems() const {
  return _internal_has_invalitems();
}
inline const ::proto_plan::List& PlannedStmt::_internal_invalitems() const {
  const ::proto_plan::List* p = invalitems_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::invalitems() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.invalItems)
  return _internal_invalitems();
}
inline ::proto_plan::List* PlannedStmt::release_invalitems() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.invalItems)
  
  ::proto_plan::List* temp = invalitems_;
  invalitems_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_invalitems() {
  
  if (invalitems_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    invalitems_ = p;
  }
  return invalitems_;
}
inline ::proto_plan::List* PlannedStmt::mutable_invalitems() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.invalItems)
  return _internal_mutable_invalitems();
}
inline void PlannedStmt::set_allocated_invalitems(::proto_plan::List* invalitems) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invalitems_);
  }
  if (invalitems) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invalitems = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invalitems, submessage_arena);
    }
    
  } else {
    
  }
  invalitems_ = invalitems;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.invalItems)
}

// int32 nParamExec = 20;
inline void PlannedStmt::clear_nparamexec() {
  nparamexec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_nparamexec() const {
  return nparamexec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::nparamexec() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.nParamExec)
  return _internal_nparamexec();
}
inline void PlannedStmt::_internal_set_nparamexec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nparamexec_ = value;
}
inline void PlannedStmt::set_nparamexec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nparamexec(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.nParamExec)
}

// int32 num_streams = 21;
inline void PlannedStmt::clear_num_streams() {
  num_streams_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_num_streams() const {
  return num_streams_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::num_streams() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.num_streams)
  return _internal_num_streams();
}
inline void PlannedStmt::_internal_set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_streams_ = value;
}
inline void PlannedStmt::set_num_streams(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_streams(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.num_streams)
}

// int32 max_push_sql_num = 22;
inline void PlannedStmt::clear_max_push_sql_num() {
  max_push_sql_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_max_push_sql_num() const {
  return max_push_sql_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::max_push_sql_num() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.max_push_sql_num)
  return _internal_max_push_sql_num();
}
inline void PlannedStmt::_internal_set_max_push_sql_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_push_sql_num_ = value;
}
inline void PlannedStmt::set_max_push_sql_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_push_sql_num(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.max_push_sql_num)
}

// int32 gather_count = 23;
inline void PlannedStmt::clear_gather_count() {
  gather_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_gather_count() const {
  return gather_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::gather_count() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.gather_count)
  return _internal_gather_count();
}
inline void PlannedStmt::_internal_set_gather_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gather_count_ = value;
}
inline void PlannedStmt::set_gather_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gather_count(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.gather_count)
}

// int32 num_nodes = 24;
inline void PlannedStmt::clear_num_nodes() {
  num_nodes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_num_nodes() const {
  return num_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::num_nodes() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.num_nodes)
  return _internal_num_nodes();
}
inline void PlannedStmt::_internal_set_num_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_nodes_ = value;
}
inline void PlannedStmt::set_num_nodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_nodes(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.num_nodes)
}

// .proto_plan.NodeDefinition nodesDefinition = 25;
inline bool PlannedStmt::_internal_has_nodesdefinition() const {
  return this != internal_default_instance() && nodesdefinition_ != nullptr;
}
inline bool PlannedStmt::has_nodesdefinition() const {
  return _internal_has_nodesdefinition();
}
inline void PlannedStmt::clear_nodesdefinition() {
  if (GetArenaNoVirtual() == nullptr && nodesdefinition_ != nullptr) {
    delete nodesdefinition_;
  }
  nodesdefinition_ = nullptr;
}
inline const ::proto_plan::NodeDefinition& PlannedStmt::_internal_nodesdefinition() const {
  const ::proto_plan::NodeDefinition* p = nodesdefinition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::NodeDefinition*>(
      &::proto_plan::_NodeDefinition_default_instance_);
}
inline const ::proto_plan::NodeDefinition& PlannedStmt::nodesdefinition() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.nodesDefinition)
  return _internal_nodesdefinition();
}
inline ::proto_plan::NodeDefinition* PlannedStmt::release_nodesdefinition() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.nodesDefinition)
  
  ::proto_plan::NodeDefinition* temp = nodesdefinition_;
  nodesdefinition_ = nullptr;
  return temp;
}
inline ::proto_plan::NodeDefinition* PlannedStmt::_internal_mutable_nodesdefinition() {
  
  if (nodesdefinition_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::NodeDefinition>(GetArenaNoVirtual());
    nodesdefinition_ = p;
  }
  return nodesdefinition_;
}
inline ::proto_plan::NodeDefinition* PlannedStmt::mutable_nodesdefinition() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.nodesDefinition)
  return _internal_mutable_nodesdefinition();
}
inline void PlannedStmt::set_allocated_nodesdefinition(::proto_plan::NodeDefinition* nodesdefinition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nodesdefinition_;
  }
  if (nodesdefinition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nodesdefinition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodesdefinition, submessage_arena);
    }
    
  } else {
    
  }
  nodesdefinition_ = nodesdefinition;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.nodesDefinition)
}

// int32 instrument_option = 26;
inline void PlannedStmt::clear_instrument_option() {
  instrument_option_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_instrument_option() const {
  return instrument_option_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::instrument_option() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.instrument_option)
  return _internal_instrument_option();
}
inline void PlannedStmt::_internal_set_instrument_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instrument_option_ = value;
}
inline void PlannedStmt::set_instrument_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instrument_option(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.instrument_option)
}

// int32 num_plannodes = 27;
inline void PlannedStmt::clear_num_plannodes() {
  num_plannodes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_num_plannodes() const {
  return num_plannodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::num_plannodes() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.num_plannodes)
  return _internal_num_plannodes();
}
inline void PlannedStmt::_internal_set_num_plannodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_plannodes_ = value;
}
inline void PlannedStmt::set_num_plannodes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_plannodes(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.num_plannodes)
}

// repeated int32 query_mem = 28;
inline int PlannedStmt::_internal_query_mem_size() const {
  return query_mem_.size();
}
inline int PlannedStmt::query_mem_size() const {
  return _internal_query_mem_size();
}
inline void PlannedStmt::clear_query_mem() {
  query_mem_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_query_mem(int index) const {
  return query_mem_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::query_mem(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.query_mem)
  return _internal_query_mem(index);
}
inline void PlannedStmt::set_query_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  query_mem_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.query_mem)
}
inline void PlannedStmt::_internal_add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  query_mem_.Add(value);
}
inline void PlannedStmt::add_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_query_mem(value);
  // @@protoc_insertion_point(field_add:proto_plan.PlannedStmt.query_mem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlannedStmt::_internal_query_mem() const {
  return query_mem_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlannedStmt::query_mem() const {
  // @@protoc_insertion_point(field_list:proto_plan.PlannedStmt.query_mem)
  return _internal_query_mem();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlannedStmt::_internal_mutable_query_mem() {
  return &query_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlannedStmt::mutable_query_mem() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.PlannedStmt.query_mem)
  return _internal_mutable_query_mem();
}

// repeated int32 assigned_query_mem = 29;
inline int PlannedStmt::_internal_assigned_query_mem_size() const {
  return assigned_query_mem_.size();
}
inline int PlannedStmt::assigned_query_mem_size() const {
  return _internal_assigned_query_mem_size();
}
inline void PlannedStmt::clear_assigned_query_mem() {
  assigned_query_mem_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_assigned_query_mem(int index) const {
  return assigned_query_mem_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::assigned_query_mem(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.assigned_query_mem)
  return _internal_assigned_query_mem(index);
}
inline void PlannedStmt::set_assigned_query_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  assigned_query_mem_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.assigned_query_mem)
}
inline void PlannedStmt::_internal_add_assigned_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  assigned_query_mem_.Add(value);
}
inline void PlannedStmt::add_assigned_query_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_assigned_query_mem(value);
  // @@protoc_insertion_point(field_add:proto_plan.PlannedStmt.assigned_query_mem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlannedStmt::_internal_assigned_query_mem() const {
  return assigned_query_mem_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlannedStmt::assigned_query_mem() const {
  // @@protoc_insertion_point(field_list:proto_plan.PlannedStmt.assigned_query_mem)
  return _internal_assigned_query_mem();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlannedStmt::_internal_mutable_assigned_query_mem() {
  return &assigned_query_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlannedStmt::mutable_assigned_query_mem() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.PlannedStmt.assigned_query_mem)
  return _internal_mutable_assigned_query_mem();
}

// bool is_dynmaic_smp = 30;
inline void PlannedStmt::clear_is_dynmaic_smp() {
  is_dynmaic_smp_ = false;
}
inline bool PlannedStmt::_internal_is_dynmaic_smp() const {
  return is_dynmaic_smp_;
}
inline bool PlannedStmt::is_dynmaic_smp() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.is_dynmaic_smp)
  return _internal_is_dynmaic_smp();
}
inline void PlannedStmt::_internal_set_is_dynmaic_smp(bool value) {
  
  is_dynmaic_smp_ = value;
}
inline void PlannedStmt::set_is_dynmaic_smp(bool value) {
  _internal_set_is_dynmaic_smp(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.is_dynmaic_smp)
}

// int32 dynsmp_max_cpu = 31;
inline void PlannedStmt::clear_dynsmp_max_cpu() {
  dynsmp_max_cpu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_max_cpu() const {
  return dynsmp_max_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_max_cpu() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_max_cpu)
  return _internal_dynsmp_max_cpu();
}
inline void PlannedStmt::_internal_set_dynsmp_max_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_max_cpu_ = value;
}
inline void PlannedStmt::set_dynsmp_max_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_max_cpu(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_max_cpu)
}

// int32 dynsmp_avail_cpu = 32;
inline void PlannedStmt::clear_dynsmp_avail_cpu() {
  dynsmp_avail_cpu_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_avail_cpu() const {
  return dynsmp_avail_cpu_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_avail_cpu() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_avail_cpu)
  return _internal_dynsmp_avail_cpu();
}
inline void PlannedStmt::_internal_set_dynsmp_avail_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_avail_cpu_ = value;
}
inline void PlannedStmt::set_dynsmp_avail_cpu(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_avail_cpu(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_avail_cpu)
}

// int32 dynsmp_cpu_util = 33;
inline void PlannedStmt::clear_dynsmp_cpu_util() {
  dynsmp_cpu_util_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_cpu_util() const {
  return dynsmp_cpu_util_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_cpu_util() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_cpu_util)
  return _internal_dynsmp_cpu_util();
}
inline void PlannedStmt::_internal_set_dynsmp_cpu_util(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_cpu_util_ = value;
}
inline void PlannedStmt::set_dynsmp_cpu_util(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_cpu_util(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_cpu_util)
}

// int32 dynsmp_active_statement = 34;
inline void PlannedStmt::clear_dynsmp_active_statement() {
  dynsmp_active_statement_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_active_statement() const {
  return dynsmp_active_statement_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_active_statement() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_active_statement)
  return _internal_dynsmp_active_statement();
}
inline void PlannedStmt::_internal_set_dynsmp_active_statement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_active_statement_ = value;
}
inline void PlannedStmt::set_dynsmp_active_statement(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_active_statement(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_active_statement)
}

// double dynsmp_query_estimate_cpu_usge = 35;
inline void PlannedStmt::clear_dynsmp_query_estimate_cpu_usge() {
  dynsmp_query_estimate_cpu_usge_ = 0;
}
inline double PlannedStmt::_internal_dynsmp_query_estimate_cpu_usge() const {
  return dynsmp_query_estimate_cpu_usge_;
}
inline double PlannedStmt::dynsmp_query_estimate_cpu_usge() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_query_estimate_cpu_usge)
  return _internal_dynsmp_query_estimate_cpu_usge();
}
inline void PlannedStmt::_internal_set_dynsmp_query_estimate_cpu_usge(double value) {
  
  dynsmp_query_estimate_cpu_usge_ = value;
}
inline void PlannedStmt::set_dynsmp_query_estimate_cpu_usge(double value) {
  _internal_set_dynsmp_query_estimate_cpu_usge(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_query_estimate_cpu_usge)
}

// int32 dynsmp_plan_optimal_dop = 36;
inline void PlannedStmt::clear_dynsmp_plan_optimal_dop() {
  dynsmp_plan_optimal_dop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_plan_optimal_dop() const {
  return dynsmp_plan_optimal_dop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_plan_optimal_dop() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_plan_optimal_dop)
  return _internal_dynsmp_plan_optimal_dop();
}
inline void PlannedStmt::_internal_set_dynsmp_plan_optimal_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_plan_optimal_dop_ = value;
}
inline void PlannedStmt::set_dynsmp_plan_optimal_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_plan_optimal_dop(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_plan_optimal_dop)
}

// int32 dynsmp_plan_original_dop = 37;
inline void PlannedStmt::clear_dynsmp_plan_original_dop() {
  dynsmp_plan_original_dop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_plan_original_dop() const {
  return dynsmp_plan_original_dop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_plan_original_dop() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_plan_original_dop)
  return _internal_dynsmp_plan_original_dop();
}
inline void PlannedStmt::_internal_set_dynsmp_plan_original_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_plan_original_dop_ = value;
}
inline void PlannedStmt::set_dynsmp_plan_original_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_plan_original_dop(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_plan_original_dop)
}

// int32 dynsmp_dop_mem_limit = 38;
inline void PlannedStmt::clear_dynsmp_dop_mem_limit() {
  dynsmp_dop_mem_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_dop_mem_limit() const {
  return dynsmp_dop_mem_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_dop_mem_limit() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_dop_mem_limit)
  return _internal_dynsmp_dop_mem_limit();
}
inline void PlannedStmt::_internal_set_dynsmp_dop_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_dop_mem_limit_ = value;
}
inline void PlannedStmt::set_dynsmp_dop_mem_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_dop_mem_limit(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_dop_mem_limit)
}

// int32 dynsmp_min_non_spill_dop = 39;
inline void PlannedStmt::clear_dynsmp_min_non_spill_dop() {
  dynsmp_min_non_spill_dop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_dynsmp_min_non_spill_dop() const {
  return dynsmp_min_non_spill_dop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::dynsmp_min_non_spill_dop() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dynsmp_min_non_spill_dop)
  return _internal_dynsmp_min_non_spill_dop();
}
inline void PlannedStmt::_internal_set_dynsmp_min_non_spill_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dynsmp_min_non_spill_dop_ = value;
}
inline void PlannedStmt::set_dynsmp_min_non_spill_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dynsmp_min_non_spill_dop(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dynsmp_min_non_spill_dop)
}

// int32 num_bucketmaps = 40;
inline void PlannedStmt::clear_num_bucketmaps() {
  num_bucketmaps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_num_bucketmaps() const {
  return num_bucketmaps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::num_bucketmaps() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.num_bucketmaps)
  return _internal_num_bucketmaps();
}
inline void PlannedStmt::_internal_set_num_bucketmaps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_bucketmaps_ = value;
}
inline void PlannedStmt::set_num_bucketmaps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_bucketmaps(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.num_bucketmaps)
}

// repeated uint32 bucketMap = 41;
inline int PlannedStmt::_internal_bucketmap_size() const {
  return bucketmap_.size();
}
inline int PlannedStmt::bucketmap_size() const {
  return _internal_bucketmap_size();
}
inline void PlannedStmt::clear_bucketmap() {
  bucketmap_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlannedStmt::_internal_bucketmap(int index) const {
  return bucketmap_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlannedStmt::bucketmap(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.bucketMap)
  return _internal_bucketmap(index);
}
inline void PlannedStmt::set_bucketmap(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bucketmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.bucketMap)
}
inline void PlannedStmt::_internal_add_bucketmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bucketmap_.Add(value);
}
inline void PlannedStmt::add_bucketmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_bucketmap(value);
  // @@protoc_insertion_point(field_add:proto_plan.PlannedStmt.bucketMap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PlannedStmt::_internal_bucketmap() const {
  return bucketmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
PlannedStmt::bucketmap() const {
  // @@protoc_insertion_point(field_list:proto_plan.PlannedStmt.bucketMap)
  return _internal_bucketmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PlannedStmt::_internal_mutable_bucketmap() {
  return &bucketmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
PlannedStmt::mutable_bucketmap() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.PlannedStmt.bucketMap)
  return _internal_mutable_bucketmap();
}

// repeated int32 bucketCnt = 42;
inline int PlannedStmt::_internal_bucketcnt_size() const {
  return bucketcnt_.size();
}
inline int PlannedStmt::bucketcnt_size() const {
  return _internal_bucketcnt_size();
}
inline void PlannedStmt::clear_bucketcnt() {
  bucketcnt_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_bucketcnt(int index) const {
  return bucketcnt_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::bucketcnt(int index) const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.bucketCnt)
  return _internal_bucketcnt(index);
}
inline void PlannedStmt::set_bucketcnt(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bucketcnt_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.bucketCnt)
}
inline void PlannedStmt::_internal_add_bucketcnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bucketcnt_.Add(value);
}
inline void PlannedStmt::add_bucketcnt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bucketcnt(value);
  // @@protoc_insertion_point(field_add:proto_plan.PlannedStmt.bucketCnt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlannedStmt::_internal_bucketcnt() const {
  return bucketcnt_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PlannedStmt::bucketcnt() const {
  // @@protoc_insertion_point(field_list:proto_plan.PlannedStmt.bucketCnt)
  return _internal_bucketcnt();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlannedStmt::_internal_mutable_bucketcnt() {
  return &bucketcnt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PlannedStmt::mutable_bucketcnt() {
  // @@protoc_insertion_point(field_mutable_list:proto_plan.PlannedStmt.bucketCnt)
  return _internal_mutable_bucketcnt();
}

// string query_string = 43;
inline void PlannedStmt::clear_query_string() {
  query_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlannedStmt::query_string() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.query_string)
  return _internal_query_string();
}
inline void PlannedStmt::set_query_string(const std::string& value) {
  _internal_set_query_string(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.query_string)
}
inline std::string* PlannedStmt::mutable_query_string() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.query_string)
  return _internal_mutable_query_string();
}
inline const std::string& PlannedStmt::_internal_query_string() const {
  return query_string_.GetNoArena();
}
inline void PlannedStmt::_internal_set_query_string(const std::string& value) {
  
  query_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlannedStmt::set_query_string(std::string&& value) {
  
  query_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto_plan.PlannedStmt.query_string)
}
inline void PlannedStmt::set_query_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_plan.PlannedStmt.query_string)
}
inline void PlannedStmt::set_query_string(const char* value, size_t size) {
  
  query_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_plan.PlannedStmt.query_string)
}
inline std::string* PlannedStmt::_internal_mutable_query_string() {
  
  return query_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlannedStmt::release_query_string() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.query_string)
  
  return query_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlannedStmt::set_allocated_query_string(std::string* query_string) {
  if (query_string != nullptr) {
    
  } else {
    
  }
  query_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_string);
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.query_string)
}

// .proto_plan.List subplan_ids = 44;
inline bool PlannedStmt::_internal_has_subplan_ids() const {
  return this != internal_default_instance() && subplan_ids_ != nullptr;
}
inline bool PlannedStmt::has_subplan_ids() const {
  return _internal_has_subplan_ids();
}
inline const ::proto_plan::List& PlannedStmt::_internal_subplan_ids() const {
  const ::proto_plan::List* p = subplan_ids_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::subplan_ids() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.subplan_ids)
  return _internal_subplan_ids();
}
inline ::proto_plan::List* PlannedStmt::release_subplan_ids() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.subplan_ids)
  
  ::proto_plan::List* temp = subplan_ids_;
  subplan_ids_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_subplan_ids() {
  
  if (subplan_ids_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    subplan_ids_ = p;
  }
  return subplan_ids_;
}
inline ::proto_plan::List* PlannedStmt::mutable_subplan_ids() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.subplan_ids)
  return _internal_mutable_subplan_ids();
}
inline void PlannedStmt::set_allocated_subplan_ids(::proto_plan::List* subplan_ids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subplan_ids_);
  }
  if (subplan_ids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subplan_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subplan_ids, submessage_arena);
    }
    
  } else {
    
  }
  subplan_ids_ = subplan_ids;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.subplan_ids)
}

// .proto_plan.List initPlan = 45;
inline bool PlannedStmt::_internal_has_initplan() const {
  return this != internal_default_instance() && initplan_ != nullptr;
}
inline bool PlannedStmt::has_initplan() const {
  return _internal_has_initplan();
}
inline const ::proto_plan::List& PlannedStmt::_internal_initplan() const {
  const ::proto_plan::List* p = initplan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::initplan() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.initPlan)
  return _internal_initplan();
}
inline ::proto_plan::List* PlannedStmt::release_initplan() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.initPlan)
  
  ::proto_plan::List* temp = initplan_;
  initplan_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_initplan() {
  
  if (initplan_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    initplan_ = p;
  }
  return initplan_;
}
inline ::proto_plan::List* PlannedStmt::mutable_initplan() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.initPlan)
  return _internal_mutable_initplan();
}
inline void PlannedStmt::set_allocated_initplan(::proto_plan::List* initplan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(initplan_);
  }
  if (initplan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initplan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initplan, submessage_arena);
    }
    
  } else {
    
  }
  initplan_ = initplan;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.initPlan)
}

// uint32 dataDestRelIndex = 46;
inline void PlannedStmt::clear_datadestrelindex() {
  datadestrelindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlannedStmt::_internal_datadestrelindex() const {
  return datadestrelindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlannedStmt::datadestrelindex() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.dataDestRelIndex)
  return _internal_datadestrelindex();
}
inline void PlannedStmt::_internal_set_datadestrelindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  datadestrelindex_ = value;
}
inline void PlannedStmt::set_datadestrelindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datadestrelindex(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.dataDestRelIndex)
}

// int32 MaxBloomFilterNum = 47;
inline void PlannedStmt::clear_maxbloomfilternum() {
  maxbloomfilternum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_maxbloomfilternum() const {
  return maxbloomfilternum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::maxbloomfilternum() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.MaxBloomFilterNum)
  return _internal_maxbloomfilternum();
}
inline void PlannedStmt::_internal_set_maxbloomfilternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxbloomfilternum_ = value;
}
inline void PlannedStmt::set_maxbloomfilternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxbloomfilternum(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.MaxBloomFilterNum)
}

// int32 query_dop = 48;
inline void PlannedStmt::clear_query_dop() {
  query_dop_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_query_dop() const {
  return query_dop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::query_dop() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.query_dop)
  return _internal_query_dop();
}
inline void PlannedStmt::_internal_set_query_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  query_dop_ = value;
}
inline void PlannedStmt::set_query_dop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_query_dop(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.query_dop)
}

// double plannertime = 49;
inline void PlannedStmt::clear_plannertime() {
  plannertime_ = 0;
}
inline double PlannedStmt::_internal_plannertime() const {
  return plannertime_;
}
inline double PlannedStmt::plannertime() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.plannertime)
  return _internal_plannertime();
}
inline void PlannedStmt::_internal_set_plannertime(double value) {
  
  plannertime_ = value;
}
inline void PlannedStmt::set_plannertime(double value) {
  _internal_set_plannertime(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.plannertime)
}

// bool in_compute_pool = 50;
inline void PlannedStmt::clear_in_compute_pool() {
  in_compute_pool_ = false;
}
inline bool PlannedStmt::_internal_in_compute_pool() const {
  return in_compute_pool_;
}
inline bool PlannedStmt::in_compute_pool() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.in_compute_pool)
  return _internal_in_compute_pool();
}
inline void PlannedStmt::_internal_set_in_compute_pool(bool value) {
  
  in_compute_pool_ = value;
}
inline void PlannedStmt::set_in_compute_pool(bool value) {
  _internal_set_in_compute_pool(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.in_compute_pool)
}

// bool has_obsrel = 51;
inline void PlannedStmt::clear_has_obsrel() {
  has_obsrel_ = false;
}
inline bool PlannedStmt::_internal_has_obsrel() const {
  return has_obsrel_;
}
inline bool PlannedStmt::has_obsrel() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.has_obsrel)
  return _internal_has_obsrel();
}
inline void PlannedStmt::_internal_set_has_obsrel(bool value) {
  
  has_obsrel_ = value;
}
inline void PlannedStmt::set_has_obsrel(bool value) {
  _internal_set_has_obsrel(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.has_obsrel)
}

// .proto_plan.List plan_hint_warning = 52;
inline bool PlannedStmt::_internal_has_plan_hint_warning() const {
  return this != internal_default_instance() && plan_hint_warning_ != nullptr;
}
inline bool PlannedStmt::has_plan_hint_warning() const {
  return _internal_has_plan_hint_warning();
}
inline const ::proto_plan::List& PlannedStmt::_internal_plan_hint_warning() const {
  const ::proto_plan::List* p = plan_hint_warning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::plan_hint_warning() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.plan_hint_warning)
  return _internal_plan_hint_warning();
}
inline ::proto_plan::List* PlannedStmt::release_plan_hint_warning() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.plan_hint_warning)
  
  ::proto_plan::List* temp = plan_hint_warning_;
  plan_hint_warning_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_plan_hint_warning() {
  
  if (plan_hint_warning_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    plan_hint_warning_ = p;
  }
  return plan_hint_warning_;
}
inline ::proto_plan::List* PlannedStmt::mutable_plan_hint_warning() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.plan_hint_warning)
  return _internal_mutable_plan_hint_warning();
}
inline void PlannedStmt::set_allocated_plan_hint_warning(::proto_plan::List* plan_hint_warning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan_hint_warning_);
  }
  if (plan_hint_warning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      plan_hint_warning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan_hint_warning, submessage_arena);
    }
    
  } else {
    
  }
  plan_hint_warning_ = plan_hint_warning;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.plan_hint_warning)
}

// .proto_plan.List noanalyze_rellist = 53;
inline bool PlannedStmt::_internal_has_noanalyze_rellist() const {
  return this != internal_default_instance() && noanalyze_rellist_ != nullptr;
}
inline bool PlannedStmt::has_noanalyze_rellist() const {
  return _internal_has_noanalyze_rellist();
}
inline const ::proto_plan::List& PlannedStmt::_internal_noanalyze_rellist() const {
  const ::proto_plan::List* p = noanalyze_rellist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::List*>(
      &::proto_plan::_List_default_instance_);
}
inline const ::proto_plan::List& PlannedStmt::noanalyze_rellist() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.noanalyze_rellist)
  return _internal_noanalyze_rellist();
}
inline ::proto_plan::List* PlannedStmt::release_noanalyze_rellist() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.noanalyze_rellist)
  
  ::proto_plan::List* temp = noanalyze_rellist_;
  noanalyze_rellist_ = nullptr;
  return temp;
}
inline ::proto_plan::List* PlannedStmt::_internal_mutable_noanalyze_rellist() {
  
  if (noanalyze_rellist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::List>(GetArenaNoVirtual());
    noanalyze_rellist_ = p;
  }
  return noanalyze_rellist_;
}
inline ::proto_plan::List* PlannedStmt::mutable_noanalyze_rellist() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.noanalyze_rellist)
  return _internal_mutable_noanalyze_rellist();
}
inline void PlannedStmt::set_allocated_noanalyze_rellist(::proto_plan::List* noanalyze_rellist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(noanalyze_rellist_);
  }
  if (noanalyze_rellist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      noanalyze_rellist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noanalyze_rellist, submessage_arena);
    }
    
  } else {
    
  }
  noanalyze_rellist_ = noanalyze_rellist;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.noanalyze_rellist)
}

// int32 ng_num = 54;
inline void PlannedStmt::clear_ng_num() {
  ng_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::_internal_ng_num() const {
  return ng_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlannedStmt::ng_num() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.ng_num)
  return _internal_ng_num();
}
inline void PlannedStmt::_internal_set_ng_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ng_num_ = value;
}
inline void PlannedStmt::set_ng_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ng_num(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.ng_num)
}

// .proto_plan.NodeGroupQueryMem ng_queryMem = 55;
inline bool PlannedStmt::_internal_has_ng_querymem() const {
  return this != internal_default_instance() && ng_querymem_ != nullptr;
}
inline bool PlannedStmt::has_ng_querymem() const {
  return _internal_has_ng_querymem();
}
inline void PlannedStmt::clear_ng_querymem() {
  if (GetArenaNoVirtual() == nullptr && ng_querymem_ != nullptr) {
    delete ng_querymem_;
  }
  ng_querymem_ = nullptr;
}
inline const ::proto_plan::NodeGroupQueryMem& PlannedStmt::_internal_ng_querymem() const {
  const ::proto_plan::NodeGroupQueryMem* p = ng_querymem_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto_plan::NodeGroupQueryMem*>(
      &::proto_plan::_NodeGroupQueryMem_default_instance_);
}
inline const ::proto_plan::NodeGroupQueryMem& PlannedStmt::ng_querymem() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.ng_queryMem)
  return _internal_ng_querymem();
}
inline ::proto_plan::NodeGroupQueryMem* PlannedStmt::release_ng_querymem() {
  // @@protoc_insertion_point(field_release:proto_plan.PlannedStmt.ng_queryMem)
  
  ::proto_plan::NodeGroupQueryMem* temp = ng_querymem_;
  ng_querymem_ = nullptr;
  return temp;
}
inline ::proto_plan::NodeGroupQueryMem* PlannedStmt::_internal_mutable_ng_querymem() {
  
  if (ng_querymem_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto_plan::NodeGroupQueryMem>(GetArenaNoVirtual());
    ng_querymem_ = p;
  }
  return ng_querymem_;
}
inline ::proto_plan::NodeGroupQueryMem* PlannedStmt::mutable_ng_querymem() {
  // @@protoc_insertion_point(field_mutable:proto_plan.PlannedStmt.ng_queryMem)
  return _internal_mutable_ng_querymem();
}
inline void PlannedStmt::set_allocated_ng_querymem(::proto_plan::NodeGroupQueryMem* ng_querymem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ng_querymem_;
  }
  if (ng_querymem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ng_querymem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ng_querymem, submessage_arena);
    }
    
  } else {
    
  }
  ng_querymem_ = ng_querymem;
  // @@protoc_insertion_point(field_set_allocated:proto_plan.PlannedStmt.ng_queryMem)
}

// bool ng_use_planA = 56;
inline void PlannedStmt::clear_ng_use_plana() {
  ng_use_plana_ = false;
}
inline bool PlannedStmt::_internal_ng_use_plana() const {
  return ng_use_plana_;
}
inline bool PlannedStmt::ng_use_plana() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.ng_use_planA)
  return _internal_ng_use_plana();
}
inline void PlannedStmt::_internal_set_ng_use_plana(bool value) {
  
  ng_use_plana_ = value;
}
inline void PlannedStmt::set_ng_use_plana(bool value) {
  _internal_set_ng_use_plana(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.ng_use_planA)
}

// bool isRowTriggerShippable = 57;
inline void PlannedStmt::clear_isrowtriggershippable() {
  isrowtriggershippable_ = false;
}
inline bool PlannedStmt::_internal_isrowtriggershippable() const {
  return isrowtriggershippable_;
}
inline bool PlannedStmt::isrowtriggershippable() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.isRowTriggerShippable)
  return _internal_isrowtriggershippable();
}
inline void PlannedStmt::_internal_set_isrowtriggershippable(bool value) {
  
  isrowtriggershippable_ = value;
}
inline void PlannedStmt::set_isrowtriggershippable(bool value) {
  _internal_set_isrowtriggershippable(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.isRowTriggerShippable)
}

// bool is_stream_plan = 58;
inline void PlannedStmt::clear_is_stream_plan() {
  is_stream_plan_ = false;
}
inline bool PlannedStmt::_internal_is_stream_plan() const {
  return is_stream_plan_;
}
inline bool PlannedStmt::is_stream_plan() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.is_stream_plan)
  return _internal_is_stream_plan();
}
inline void PlannedStmt::_internal_set_is_stream_plan(bool value) {
  
  is_stream_plan_ = value;
}
inline void PlannedStmt::set_is_stream_plan(bool value) {
  _internal_set_is_stream_plan(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.is_stream_plan)
}

// bool multi_node_hint = 59;
inline void PlannedStmt::clear_multi_node_hint() {
  multi_node_hint_ = false;
}
inline bool PlannedStmt::_internal_multi_node_hint() const {
  return multi_node_hint_;
}
inline bool PlannedStmt::multi_node_hint() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.multi_node_hint)
  return _internal_multi_node_hint();
}
inline void PlannedStmt::_internal_set_multi_node_hint(bool value) {
  
  multi_node_hint_ = value;
}
inline void PlannedStmt::set_multi_node_hint(bool value) {
  _internal_set_multi_node_hint(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.multi_node_hint)
}

// uint64 uniqueSQLId = 60;
inline void PlannedStmt::clear_uniquesqlid() {
  uniquesqlid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlannedStmt::_internal_uniquesqlid() const {
  return uniquesqlid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlannedStmt::uniquesqlid() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.uniqueSQLId)
  return _internal_uniquesqlid();
}
inline void PlannedStmt::_internal_set_uniquesqlid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  uniquesqlid_ = value;
}
inline void PlannedStmt::set_uniquesqlid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uniquesqlid(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.uniqueSQLId)
}

// uint32 cause_type = 61;
inline void PlannedStmt::clear_cause_type() {
  cause_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlannedStmt::_internal_cause_type() const {
  return cause_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlannedStmt::cause_type() const {
  // @@protoc_insertion_point(field_get:proto_plan.PlannedStmt.cause_type)
  return _internal_cause_type();
}
inline void PlannedStmt::_internal_set_cause_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cause_type_ = value;
}
inline void PlannedStmt::set_cause_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cause_type(value);
  // @@protoc_insertion_point(field_set:proto_plan.PlannedStmt.cause_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_plan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_query_5fstmt_2eproto

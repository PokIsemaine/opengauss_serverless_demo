// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enumtag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_enumtag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_enumtag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_enumtag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_enumtag_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_enumtag_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace proto_plan {

enum NodeTag : int {
  T_Invalid = 0,
  T_IndexInfo = 10,
  T_ExprContext = 11,
  T_ProjectionInfo = 12,
  T_JunkFilter = 13,
  T_ResultRelInfo = 14,
  T_EState = 15,
  T_TupleTableSlot = 16,
  T_Plan = 100,
  T_BaseResult = 101,
  T_ProjectSet = 102,
  T_ModifyTable = 103,
  T_Append = 104,
  T_PartIterator = 105,
  T_MergeAppend = 106,
  T_RecursiveUnion = 107,
  T_StartWithOp = 108,
  T_BitmapAnd = 109,
  T_BitmapOr = 110,
  T_Scan = 111,
  T_SeqScan = 112,
  T_IndexScan = 113,
  T_IndexOnlyScan = 114,
  T_BitmapIndexScan = 115,
  T_BitmapHeapScan = 116,
  T_TidScan = 117,
  T_SubqueryScan = 118,
  T_FunctionScan = 119,
  T_ValuesScan = 120,
  T_CteScan = 121,
  T_WorkTableScan = 122,
  T_ForeignScan = 123,
  T_ExtensiblePlan = 124,
  T_Join = 125,
  T_NestLoop = 126,
  T_MergeJoin = 127,
  T_HashJoin = 128,
  T_Material = 129,
  T_Sort = 130,
  T_Group = 131,
  T_Agg = 132,
  T_WindowAgg = 133,
  T_Unique = 134,
  T_Hash = 135,
  T_SetOp = 136,
  T_LockRows = 137,
  T_Limit = 138,
  T_Stream = 139,
  T_ExecNodes = 140,
  T_SliceBoundary = 141,
  T_ExecBoundary = 142,
  T_SimpleSort = 143,
  T_RemoteQuery = 144,
  T_PGXCNodeHandle = 145,
  T_AlterNodeStmt = 146,
  T_CreateNodeStmt = 147,
  T_DropNodeStmt = 148,
  T_AlterCoordinatorStmt = 149,
  T_CreateGroupStmt = 150,
  T_AlterGroupStmt = 151,
  T_DropGroupStmt = 152,
  T_CreateResourcePoolStmt = 153,
  T_AlterResourcePoolStmt = 154,
  T_DropResourcePoolStmt = 155,
  T_AlterGlobalConfigStmt = 156,
  T_DropGlobalConfigStmt = 157,
  T_CreateWorkloadGroupStmt = 158,
  T_AlterWorkloadGroupStmt = 159,
  T_DropWorkloadGroupStmt = 160,
  T_CreateAppWorkloadGroupMappingStmt = 161,
  T_AlterAppWorkloadGroupMappingStmt = 162,
  T_DropAppWorkloadGroupMappingStmt = 163,
  T_NestLoopParam = 164,
  T_PartIteratorParam = 165,
  T_PlanRowMark = 166,
  T_PlanInvalItem = 167,
  T_FuncInvalItem = 168,
  T_PolicyFilterNode = 169,
  T_CreatePolicyLabelStmt = 170,
  T_AlterPolicyLabelStmt = 171,
  T_DropPolicyLabelStmt = 172,
  T_CreateAuditPolicyStmt = 173,
  T_AlterAuditPolicyStmt = 174,
  T_DropAuditPolicyStmt = 175,
  T_MaskingPolicyCondition = 176,
  T_CreateMaskingPolicyStmt = 177,
  T_AlterMaskingPolicyStmt = 178,
  T_DropMaskingPolicyStmt = 179,
  T_CreateSecurityPolicyStmt = 180,
  T_AlterSecurityPolicyStmt = 181,
  T_DropSecurityPolicyStmt = 182,
  T_AlterSchemaStmt = 183,
  T_PlanState = 200,
  T_ResultState = 201,
  T_ProjectSetState = 202,
  T_VecToRowState = 203,
  T_MergeActionState = 204,
  T_ModifyTableState = 205,
  T_DistInsertSelectState = 206,
  T_AppendState = 207,
  T_PartIteratorState = 208,
  T_MergeAppendState = 209,
  T_RecursiveUnionState = 210,
  T_StartWithOpState = 211,
  T_BitmapAndState = 212,
  T_BitmapOrState = 213,
  T_ScanState = 214,
  T_SeqScanState = 215,
  T_IndexScanState = 216,
  T_IndexOnlyScanState = 217,
  T_BitmapIndexScanState = 218,
  T_BitmapHeapScanState = 219,
  T_TidScanState = 220,
  T_SubqueryScanState = 221,
  T_FunctionScanState = 222,
  T_ValuesScanState = 223,
  T_CteScanState = 224,
  T_WorkTableScanState = 225,
  T_ForeignScanState = 226,
  T_ExtensiblePlanState = 227,
  T_JoinState = 228,
  T_NestLoopState = 229,
  T_MergeJoinState = 230,
  T_HashJoinState = 231,
  T_MaterialState = 232,
  T_SortState = 233,
  T_GroupState = 234,
  T_AggState = 235,
  T_WindowAggState = 236,
  T_UniqueState = 237,
  T_HashState = 238,
  T_SetOpState = 239,
  T_LockRowsState = 240,
  T_LimitState = 241,
  T_RemoteQueryState = 242,
  T_TrainModelState = 243,
  T_StreamState = 244,
  T_Alias = 300,
  T_RangeVar = 301,
  T_Expr = 302,
  T_Var = 303,
  T_Const = 304,
  T_Param = 305,
  T_Aggref = 306,
  T_GroupingFunc = 307,
  T_WindowFunc = 308,
  T_InitList = 309,
  T_ArrayRef = 310,
  T_FuncExpr = 311,
  T_NamedArgExpr = 312,
  T_OpExpr = 313,
  T_DistinctExpr = 314,
  T_NullIfExpr = 315,
  T_ScalarArrayOpExpr = 316,
  T_BoolExpr = 317,
  T_SubLink = 318,
  T_SubPlan = 319,
  T_AlternativeSubPlan = 320,
  T_FieldSelect = 321,
  T_FieldStore = 322,
  T_RelabelType = 323,
  T_CoerceViaIO = 324,
  T_ArrayCoerceExpr = 325,
  T_ConvertRowtypeExpr = 326,
  T_CollateExpr = 327,
  T_CaseExpr = 328,
  T_CaseWhen = 329,
  T_CaseTestExpr = 330,
  T_ArrayExpr = 331,
  T_RowExpr = 332,
  T_RowCompareExpr = 333,
  T_CoalesceExpr = 334,
  T_MinMaxExpr = 335,
  T_XmlExpr = 336,
  T_NullTest = 337,
  T_BooleanTest = 338,
  T_CoerceToDomain = 339,
  T_CoerceToDomainValue = 340,
  T_SetToDefault = 341,
  T_CurrentOfExpr = 342,
  T_TargetEntry = 343,
  T_RangeTblRef = 344,
  T_JoinExpr = 345,
  T_FromExpr = 346,
  T_UpsertExpr = 347,
  T_IntoClause = 348,
  T_IndexVar = 349,
  T_DistributeBy = 350,
  T_PGXCSubCluster = 351,
  T_DistState = 352,
  T_ListSliceDefState = 353,
  T_HashFilter = 354,
  T_EstSPNode = 355,
  T_Rownum = 356,
  T_PseudoTargetEntry = 357,
  T_PrefixKey = 358,
  T_SetVariableExpr = 359,
  T_ExprState = 400,
  T_GenericExprState = 401,
  T_AggrefExprState = 402,
  T_GroupingFuncExprState = 403,
  T_WindowFuncExprState = 404,
  T_ArrayRefExprState = 405,
  T_FuncExprState = 406,
  T_ScalarArrayOpExprState = 407,
  T_BoolExprState = 408,
  T_SubPlanState = 409,
  T_AlternativeSubPlanState = 410,
  T_FieldSelectState = 411,
  T_FieldStoreState = 412,
  T_CoerceViaIOState = 413,
  T_ArrayCoerceExprState = 414,
  T_ConvertRowtypeExprState = 415,
  T_CaseExprState = 416,
  T_CaseWhenState = 417,
  T_ArrayExprState = 418,
  T_RowExprState = 419,
  T_RowCompareExprState = 420,
  T_CoalesceExprState = 421,
  T_MinMaxExprState = 422,
  T_XmlExprState = 423,
  T_NullTestState = 424,
  T_HashFilterState = 425,
  T_CoerceToDomainState = 426,
  T_DomainConstraintState = 427,
  T_WholeRowVarExprState = 428,
  T_RangePartitionDefState = 429,
  T_IntervalPartitionDefState = 430,
  T_PartitionState = 431,
  T_RangePartitionindexDefState = 432,
  T_SplitPartitionState = 433,
  T_AddPartitionState = 434,
  T_AddSubPartitionState = 435,
  T_RangePartitionStartEndDefState = 436,
  T_RownumState = 437,
  T_UserSetElemState = 438,
  T_ListPartitionDefState = 439,
  T_HashPartitionDefState = 440,
  T_PrefixKeyState = 441,
  T_PlannerInfo = 500,
  T_PlannerGlobal = 501,
  T_RelOptInfo = 502,
  T_IndexOptInfo = 503,
  T_ParamPathInfo = 504,
  T_Path = 505,
  T_IndexPath = 506,
  T_BitmapHeapPath = 507,
  T_BitmapAndPath = 508,
  T_BitmapOrPath = 509,
  T_NestPath = 510,
  T_MergePath = 511,
  T_HashPath = 512,
  T_TidPath = 513,
  T_ForeignPath = 514,
  T_ExtensiblePath = 515,
  T_AppendPath = 516,
  T_MergeAppendPath = 517,
  T_ResultPath = 518,
  T_ProjectionPath = 519,
  T_ProjectSetPath = 520,
  T_MaterialPath = 521,
  T_UniquePath = 522,
  T_PartIteratorPath = 523,
  T_EquivalenceClass = 524,
  T_EquivalenceMember = 525,
  T_PathKey = 526,
  T_PathTarget = 527,
  T_RestrictInfo = 528,
  T_PlaceHolderVar = 529,
  T_SpecialJoinInfo = 530,
  T_LateralJoinInfo = 531,
  T_AppendRelInfo = 532,
  T_PlaceHolderInfo = 533,
  T_MinMaxAggInfo = 534,
  T_PlannerParamItem = 535,
  T_RemoteQueryPath = 536,
  T_StreamPath = 537,
  T_MergeAction = 538,
  T_UpsertState = 539,
  T_SubqueryScanPath = 540,
  T_MemoryContext = 600,
  T_AllocSetContext = 601,
  T_AsanSetContext = 602,
  T_StackAllocSetContext = 603,
  T_SharedAllocSetContext = 604,
  T_MemalignAllocSetContext = 605,
  T_MemalignSharedAllocSetContext = 606,
  T_MemoryTracking = 607,
  T_IndexAmRoutine = 649,
  T_Value = 650,
  T_Integer = 651,
  T_Float = 652,
  T_String = 653,
  T_BitString = 654,
  T_Null = 655,
  T_List = 656,
  T_IntList = 657,
  T_OidList = 658,
  T_DList = 659,
  T_IntDList = 660,
  T_OidDList = 661,
  T_Query = 700,
  T_PlannedStmt = 701,
  T_InsertStmt = 702,
  T_DeleteStmt = 703,
  T_UpdateStmt = 704,
  T_MergeStmt = 705,
  T_SelectStmt = 706,
  T_SelectIntoVarList = 707,
  T_AlterTableStmt = 708,
  T_AlterTableCmd = 709,
  T_AlterForeingTableCmd = 710,
  T_RenameForeingTableCmd = 711,
  T_AlterDomainStmt = 712,
  T_SetOperationStmt = 713,
  T_GrantStmt = 714,
  T_GrantRoleStmt = 715,
  T_GrantDbStmt = 716,
  T_AlterDefaultPrivilegesStmt = 717,
  T_ClosePortalStmt = 718,
  T_ClusterStmt = 719,
  T_CopyStmt = 720,
  T_CreateStmt = 721,
  T_DefineStmt = 722,
  T_DropStmt = 723,
  T_DropForeignStmt = 724,
  T_TruncateStmt = 725,
  T_PurgeStmt = 726,
  T_TimeCapsuleStmt = 727,
  T_CommentStmt = 728,
  T_FetchStmt = 729,
  T_IndexStmt = 730,
  T_CreateFunctionStmt = 731,
  T_AlterFunctionStmt = 732,
  T_CreateEventStmt = 733,
  T_AlterEventStmt = 734,
  T_DropEventStmt = 735,
  T_ShowEventStmt = 736,
  T_CompileStmt = 737,
  T_DoStmt = 738,
  T_RenameStmt = 739,
  T_RuleStmt = 740,
  T_NotifyStmt = 741,
  T_ListenStmt = 742,
  T_UnlistenStmt = 743,
  T_TransactionStmt = 744,
  T_ViewStmt = 745,
  T_LoadStmt = 746,
  T_CreateDomainStmt = 747,
  T_CreatedbStmt = 748,
  T_DropdbStmt = 749,
  T_VacuumStmt = 750,
  T_ExplainStmt = 751,
  T_CreateTableAsStmt = 752,
  T_CreateSeqStmt = 753,
  T_AlterSeqStmt = 754,
  T_VariableSetStmt = 755,
  T_VariableShowStmt = 756,
  T_ShutdownStmt = 757,
  T_DiscardStmt = 758,
  T_CreateTrigStmt = 759,
  T_CreatePLangStmt = 760,
  T_CreateRoleStmt = 761,
  T_AlterRoleStmt = 762,
  T_DropRoleStmt = 763,
  T_LockStmt = 764,
  T_ConstraintsSetStmt = 765,
  T_ReindexStmt = 766,
  T_CheckPointStmt = 767,
  T_BarrierStmt = 768,
  T_CreateSchemaStmt = 769,
  T_AlterDatabaseStmt = 770,
  T_AlterDatabaseSetStmt = 771,
  T_AlterRoleSetStmt = 772,
  T_CreateConversionStmt = 773,
  T_CreateCastStmt = 774,
  T_CreateOpClassStmt = 775,
  T_CreateOpFamilyStmt = 776,
  T_AlterOpFamilyStmt = 777,
  T_PrepareStmt = 778,
  T_ExecuteStmt = 779,
  T_DeallocateStmt = 780,
  T_DeclareCursorStmt = 781,
  T_CreateTableSpaceStmt = 782,
  T_DropTableSpaceStmt = 783,
  T_AlterObjectSchemaStmt = 784,
  T_AlterOwnerStmt = 785,
  T_DropOwnedStmt = 786,
  T_ReassignOwnedStmt = 787,
  T_CompositeTypeStmt = 788,
  T_TableOfTypeStmt = 789,
  T_CreateEnumStmt = 790,
  T_CreateSetStmt = 791,
  T_CreateRangeStmt = 792,
  T_AlterEnumStmt = 793,
  T_AlterTSDictionaryStmt = 794,
  T_AlterTSConfigurationStmt = 795,
  T_CreateFdwStmt = 796,
  T_AlterFdwStmt = 797,
  T_CreateForeignServerStmt = 798,
  T_AlterForeignServerStmt = 799,
  T_CreateUserMappingStmt = 800,
  T_AlterUserMappingStmt = 801,
  T_DropUserMappingStmt = 802,
  T_ExecDirectStmt = 803,
  T_CleanConnStmt = 804,
  T_AlterTableSpaceOptionsStmt = 805,
  T_SecLabelStmt = 806,
  T_CreateForeignTableStmt = 807,
  T_CreateExtensionStmt = 808,
  T_AlterExtensionStmt = 809,
  T_AlterExtensionContentsStmt = 810,
  T_CreateEventTrigStmt = 811,
  T_AlterEventTrigStmt = 812,
  T_CreateDataSourceStmt = 813,
  T_AlterDataSourceStmt = 814,
  T_ReplicaIdentityStmt = 815,
  T_CreateDirectoryStmt = 816,
  T_DropDirectoryStmt = 817,
  T_CreateRlsPolicyStmt = 818,
  T_AlterRlsPolicyStmt = 819,
  T_RefreshMatViewStmt = 820,
  T_AlterSystemStmt = 821,
  T_CreateWeakPasswordDictionaryStmt = 822,
  T_DropWeakPasswordDictionaryStmt = 823,
  T_CreatePackageStmt = 824,
  T_CreatePackageBodyStmt = 825,
  T_AddTableIntoCBIState = 826,
  T_CreatePublicationStmt = 827,
  T_AlterPublicationStmt = 828,
  T_CreateSubscriptionStmt = 829,
  T_AlterSubscriptionStmt = 830,
  T_DropSubscriptionStmt = 831,
  T_ShrinkStmt = 832,
  T_VariableMultiSetStmt = 833,
  T_A_Expr = 900,
  T_ColumnRef = 901,
  T_ParamRef = 902,
  T_A_Const = 903,
  T_FuncCall = 904,
  T_A_Star = 905,
  T_A_Indices = 906,
  T_A_Indirection = 907,
  T_A_ArrayExpr = 908,
  T_ResTarget = 909,
  T_TypeCast = 910,
  T_CollateClause = 911,
  T_SortBy = 912,
  T_WindowDef = 913,
  T_RangeSubselect = 914,
  T_RangeFunction = 915,
  T_RangeTableSample = 916,
  T_RangeTimeCapsule = 917,
  T_TypeName = 918,
  T_ColumnDef = 919,
  T_IndexElem = 920,
  T_Constraint = 921,
  T_DefElem = 922,
  T_RangeTblEntry = 923,
  T_WithCheckOption = 924,
  T_TableSampleClause = 925,
  T_TimeCapsuleClause = 926,
  T_IndexHintDefinition = 927,
  T_IndexHintRelationData = 928,
  T_SortGroupClause = 929,
  T_GroupingSet = 930,
  T_WindowClause = 931,
  T_PrivGrantee = 932,
  T_FuncWithArgs = 933,
  T_AccessPriv = 934,
  T_DbPriv = 935,
  T_CreateOpClassItem = 936,
  T_TableLikeClause = 937,
  T_FunctionParameter = 938,
  T_LockingClause = 939,
  T_RowMarkClause = 940,
  T_XmlSerialize = 941,
  T_WithClause = 942,
  T_CommonTableExpr = 943,
  T_StartWithOptions = 944,
  T_PruningResult = 945,
  T_SubPartitionPruningResult = 946,
  T_Position = 947,
  T_LoadWhenExpr = 948,
  T_MergeWhenClause = 949,
  T_UpsertClause = 950,
  T_CopyColExpr = 951,
  T_StartWithClause = 952,
  T_StartWithTargetRelInfo = 953,
  T_StartWithInfo = 954,
  T_SqlLoadColPosInfo = 955,
  T_SqlLoadScalarSpec = 956,
  T_SqlLoadSequInfo = 957,
  T_SqlLoadFillerInfo = 958,
  T_SqlLoadConsInfo = 959,
  T_SqlLoadColExpr = 960,
  T_AutoIncrement = 961,
  T_RenameCell = 962,
  T_IdentifySystemCmd = 963,
  T_IdentifyVersionCmd = 964,
  T_IdentifyModeCmd = 965,
  T_IdentifyMaxLsnCmd = 966,
  T_IdentifyConsistenceCmd = 967,
  T_IdentifyChannelCmd = 968,
  T_IdentifyAZCmd = 969,
  T_BaseBackupCmd = 970,
  T_CreateReplicationSlotCmd = 971,
  T_DropReplicationSlotCmd = 972,
  T_StartReplicationCmd = 973,
  T_AdvanceReplicationCmd = 974,
  T_StartDataReplicationCmd = 975,
  T_FetchMotCheckpointCmd = 976,
  T_SQLCmd = 977,
  T_TriggerData = 980,
  T_EventTriggerData = 981,
  T_ReturnSetInfo = 982,
  T_WindowObjectData = 983,
  T_TIDBitmap = 984,
  T_InlineCodeBlock = 985,
  T_FdwRoutine = 986,
  T_DistFdwDataNodeTask = 987,
  T_DistFdwFileSegment = 988,
  T_SplitInfo = 989,
  T_SplitMap = 990,
  T_DfsPrivateItem = 991,
  T_ErrorCacheEntry = 992,
  T_ForeignPartState = 993,
  T_RoachRoutine = 994,
  T_VecPlan = 1000,
  T_VecResult = 1001,
  T_VecModifyTable = 1002,
  T_VecAppend = 1003,
  T_VecPartIterator = 1004,
  T_VecMergeAppend = 1005,
  T_VecRecursiveUnion = 1006,
  T_VecScan = 1007,
  T_CStoreScan = 1008,
  T_VecIndexScan = 1009,
  T_VecIndexOnlyScan = 1010,
  T_VecBitmapIndexScan = 1011,
  T_VecBitmapHeapScan = 1012,
  T_VecSubqueryScan = 1013,
  T_VecForeignScan = 1014,
  T_VecNestLoop = 1015,
  T_VecMergeJoin = 1016,
  T_VecHashJoin = 1017,
  T_VecMaterial = 1018,
  T_VecSort = 1019,
  T_VecGroup = 1020,
  T_VecAgg = 1021,
  T_VecWindowAgg = 1022,
  T_VecUnique = 1023,
  T_VecHash = 1024,
  T_VecSetOp = 1025,
  T_VecLockRows = 1026,
  T_VecLimit = 1027,
  T_VecStream = 1028,
  T_RowToVec = 1029,
  T_VecToRow = 1030,
  T_CStoreIndexScan = 1031,
  T_CStoreIndexCtidScan = 1032,
  T_CStoreIndexHeapScan = 1033,
  T_CStoreIndexAnd = 1034,
  T_CStoreIndexOr = 1035,
  T_VecRemoteQuery = 1036,
  T_CBTreeScanState = 1037,
  T_CBTreeOnlyScanState = 1038,
  T_CstoreBitmapIndexScanState = 1039,
  T_VecStartState = 2001,
  T_RowToVecState = 2002,
  T_VecAggState = 2003,
  T_VecHashJoinState = 2004,
  T_VecStreamState = 2005,
  T_VecSortState = 2006,
  T_VecForeignScanState = 2007,
  T_CStoreScanState = 2008,
  T_CStoreIndexScanState = 2009,
  T_CStoreIndexCtidScanState = 2010,
  T_CStoreIndexHeapScanState = 2011,
  T_CStoreIndexAndState = 2012,
  T_CStoreIndexOrState = 2013,
  T_VecRemoteQueryState = 2014,
  T_VecResultState = 2015,
  T_VecSubqueryScanState = 2016,
  T_VecModifyTableState = 2017,
  T_VecPartIteratorState = 2018,
  T_VecAppendState = 2019,
  T_VecLimitState = 2020,
  T_VecGroupState = 2021,
  T_VecUniqueState = 2022,
  T_VecSetOpState = 2023,
  T_VecNestLoopState = 2024,
  T_VecMaterialState = 2025,
  T_VecMergeJoinState = 2026,
  T_VecWindowAggState = 2027,
  T_HDFSTableAnalyze = 2028,
  T_ForeignTableDesc = 2029,
  T_AttrMetaData = 2030,
  T_RelationMetaData = 2031,
  T_ForeignOptions = 2032,
  T_InformationalConstraint = 2033,
  T_GroupingId = 2034,
  T_GroupingIdExprState = 2035,
  T_BloomFilterSet = 2036,
  T_HintState = 2037,
  T_OuterInnerRels = 2038,
  T_JoinMethodHint = 2039,
  T_LeadingHint = 2040,
  T_RowsHint = 2041,
  T_StreamHint = 2042,
  T_BlockNameHint = 2043,
  T_ScanMethodHint = 2044,
  T_MultiNodeHint = 2045,
  T_PredpushHint = 2046,
  T_PredpushSameLevelHint = 2047,
  T_SkewHint = 2048,
  T_RewriteHint = 2049,
  T_GatherHint = 2050,
  T_SetHint = 2051,
  T_PlanCacheHint = 2052,
  T_NoExpandHint = 2053,
  T_SqlIgnoreHint = 2054,
  T_NoGPCHint = 2055,
  T_PgFdwRemoteInfo = 2056,
  T_TableLikeCtx = 2057,
  T_SkewHintTransf = 2058,
  T_SkewRelInfo = 2059,
  T_SkewColumnInfo = 2060,
  T_SkewValueInfo = 2061,
  T_QualSkewInfo = 2062,
  T_CreateSynonymStmt = 2063,
  T_DropSynonymStmt = 2064,
  T_BucketInfo = 2065,
  T_ClientLogicGlobalParam = 2066,
  T_CreateClientLogicGlobal = 2067,
  T_ClientLogicColumnParam = 2068,
  T_CreateClientLogicColumn = 2069,
  T_ClientLogicColumnRef = 2070,
  T_ExprWithComma = 2071,
  T_CreateModelStmt = 5000,
  T_PredictByFunction = 5001,
  T_TrainModel = 5002,
  T_ExplainModelStmt = 5003,
  T_PLDebug_variable = 5004,
  T_PLDebug_breakPoint = 5005,
  T_PLDebug_frame = 5006,
  T_TdigestData = 5007,
  T_AdvanceCatalogXminCmd = 5008,
  T_CachedPlanInfo = 5009,
  T_CondInterval = 5010,
  T_IndexCI = 5011,
  T_RelCI = 5012,
  T_CentroidPoint = 5013,
  T_UserSetElem = 5014,
  T_UserVar = 5015,
  T_CharsetCollateOptions = 5016,
  T_FunctionSources = 5017,
  T_CharsetClause = 5018,
  NodeTag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeTag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeTag_IsValid(int value);
constexpr NodeTag NodeTag_MIN = T_Invalid;
constexpr NodeTag NodeTag_MAX = T_CharsetClause;
constexpr int NodeTag_ARRAYSIZE = NodeTag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeTag_descriptor();
template<typename T>
inline const std::string& NodeTag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeTag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeTag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeTag_descriptor(), enum_t_value);
}
inline bool NodeTag_Parse(
    const std::string& name, NodeTag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeTag>(
    NodeTag_descriptor(), name, value);
}
enum RemoteQueryExecType : int {
  EXEC_ON_DATANODES = 0,
  EXEC_ON_COORDS = 1,
  EXEC_ON_ALL_NODES = 2,
  EXEC_ON_NONE = 3,
  RemoteQueryExecType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RemoteQueryExecType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RemoteQueryExecType_IsValid(int value);
constexpr RemoteQueryExecType RemoteQueryExecType_MIN = EXEC_ON_DATANODES;
constexpr RemoteQueryExecType RemoteQueryExecType_MAX = EXEC_ON_NONE;
constexpr int RemoteQueryExecType_ARRAYSIZE = RemoteQueryExecType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteQueryExecType_descriptor();
template<typename T>
inline const std::string& RemoteQueryExecType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemoteQueryExecType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemoteQueryExecType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemoteQueryExecType_descriptor(), enum_t_value);
}
inline bool RemoteQueryExecType_Parse(
    const std::string& name, RemoteQueryExecType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemoteQueryExecType>(
    RemoteQueryExecType_descriptor(), name, value);
}
enum RelationAccessType : int {
  RELATION_ACCESS_READ = 0,
  RELATION_ACCESS_READ_FOR_UPDATE = 1,
  RELATION_ACCESS_UPDATE = 2,
  RELATION_ACCESS_INSERT = 3,
  RelationAccessType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RelationAccessType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RelationAccessType_IsValid(int value);
constexpr RelationAccessType RelationAccessType_MIN = RELATION_ACCESS_READ;
constexpr RelationAccessType RelationAccessType_MAX = RELATION_ACCESS_INSERT;
constexpr int RelationAccessType_ARRAYSIZE = RelationAccessType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationAccessType_descriptor();
template<typename T>
inline const std::string& RelationAccessType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RelationAccessType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RelationAccessType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RelationAccessType_descriptor(), enum_t_value);
}
inline bool RelationAccessType_Parse(
    const std::string& name, RelationAccessType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelationAccessType>(
    RelationAccessType_descriptor(), name, value);
}
enum CmdType : int {
  CMD_UNKNOWN = 0,
  CMD_SELECT = 1,
  CMD_UPDATE = 2,
  CMD_INSERT = 3,
  CMD_DELETE = 4,
  CMD_MERGE = 5,
  CMD_UTILITY = 6,
  CMD_PREPARE = 7,
  CMD_DEALLOCATE = 8,
  CMD_EXECUTE = 9,
  CMD_TRUNCATE = 10,
  CMD_REINDEX = 11,
  CMD_NOTHING = 12,
  CMD_DDL = 13,
  CMD_DCL = 14,
  CMD_DML = 15,
  CMD_TCL = 16,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmdType_IsValid(int value);
constexpr CmdType CmdType_MIN = CMD_UNKNOWN;
constexpr CmdType CmdType_MAX = CMD_TCL;
constexpr int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor();
template<typename T>
inline const std::string& CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdType_descriptor(), enum_t_value);
}
inline bool CmdType_Parse(
    const std::string& name, CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_plan

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_plan::NodeTag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_plan::NodeTag>() {
  return ::proto_plan::NodeTag_descriptor();
}
template <> struct is_proto_enum< ::proto_plan::RemoteQueryExecType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_plan::RemoteQueryExecType>() {
  return ::proto_plan::RemoteQueryExecType_descriptor();
}
template <> struct is_proto_enum< ::proto_plan::RelationAccessType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_plan::RelationAccessType>() {
  return ::proto_plan::RelationAccessType_descriptor();
}
template <> struct is_proto_enum< ::proto_plan::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_plan::CmdType>() {
  return ::proto_plan::CmdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_enumtag_2eproto

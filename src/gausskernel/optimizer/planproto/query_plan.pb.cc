// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query_plan.proto

#include "query_plan.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bitmapset_execNodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Const_execNodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExecNodes_execNodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_execNodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_List_execNodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Plan_query_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_query_5fplan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RightRefState_query_5fplan_2eproto;
namespace proto_plan {
class RightRefStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RightRefState> _instance;
} _RightRefState_default_instance_;
class PlanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plan> _instance;
} _Plan_default_instance_;
}  // namespace proto_plan
static void InitDefaultsscc_info_Plan_query_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_plan::_Plan_default_instance_;
    new (ptr) ::proto_plan::Plan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_plan::Plan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Plan_query_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Plan_query_5fplan_2eproto}, {
      &scc_info_List_execNodes_2eproto.base,
      &scc_info_ExecNodes_execNodes_2eproto.base,
      &scc_info_Bitmapset_execNodes_2eproto.base,
      &scc_info_RightRefState_query_5fplan_2eproto.base,}};

static void InitDefaultsscc_info_RightRefState_query_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto_plan::_RightRefState_default_instance_;
    new (ptr) ::proto_plan::RightRefState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_plan::RightRefState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RightRefState_query_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RightRefState_query_5fplan_2eproto}, {
      &scc_info_Const_execNodes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_query_5fplan_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_query_5fplan_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_query_5fplan_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_query_5fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, issupported_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, isinserthasrightref_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, explicitattrlen_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, explicitattrnos_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, constvalues_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, colcnt_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, values_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, hasexecs_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, isnulls_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, isupsert_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, isupserthasrightref_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, usexplicitattrlen_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::RightRefState, usexplicitattrnos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, plan_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, parent_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, exec_type_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, startup_cost_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, total_cost_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, plan_rows_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, multiple_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, plan_width_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, dop_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, pred_rows_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, pred_startup_time_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, pred_total_time_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, pred_max_memory_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, recursive_union_plan_nodeid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, recursive_union_controller_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, control_plan_nodeid_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, is_sync_plannode_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, targetlist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, qual_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, lefttree_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, righttree_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, ispwj_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, paramno_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, subparamno_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, initplan_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, distributed_keys_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, exec_nodes_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, extparam_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, allparam_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, vec_output_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, hasuniqueresults_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, isdeltatable_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, operatormemkb_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, operatormaxmem_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, parallel_enabled_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, hashashfilter_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, var_list_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, filterindexlist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, ng_operatormemkbarray_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, ng_num_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, innerdistinct_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, outerdistinct_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, flatlist_),
  PROTOBUF_FIELD_OFFSET(::proto_plan::Plan, rightrefstate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto_plan::RightRefState)},
  { 18, -1, sizeof(::proto_plan::Plan)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_RightRefState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto_plan::_Plan_default_instance_),
};

const char descriptor_table_protodef_query_5fplan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020query_plan.proto\022\nproto_plan\032\017execNode"
  "s.proto\032\renumtag.proto\"\303\002\n\rRightRefState"
  "\022\023\n\013isSupported\030\001 \001(\010\022\033\n\023isInsertHasRigh"
  "tRef\030\002 \001(\010\022\027\n\017explicitAttrLen\030\003 \001(\005\022\027\n\017e"
  "xplicitAttrNos\030\004 \003(\005\022&\n\013constValues\030\005 \003("
  "\0132\021.proto_plan.Const\022\016\n\006colCnt\030\006 \001(\005\022\016\n\006"
  "values\030\007 \003(\004\022\020\n\010hasExecs\030\010 \003(\010\022\017\n\007isNull"
  "s\030\t \003(\010\022\020\n\010isUpsert\030\n \001(\010\022\033\n\023isUpsertHas"
  "RightRef\030\013 \001(\010\022\031\n\021usExplicitAttrLen\030\014 \001("
  "\005\022\031\n\021usExplicitAttrNos\030\r \003(\005\"\356\t\n\004Plan\022\024\n"
  "\014plan_node_id\030\001 \001(\r\022\026\n\016parent_node_id\030\002 "
  "\001(\r\0222\n\texec_type\030\003 \001(\0162\037.proto_plan.Remo"
  "teQueryExecType\022\024\n\014startup_cost\030\004 \001(\001\022\022\n"
  "\ntotal_cost\030\005 \001(\001\022\021\n\tplan_rows\030\006 \001(\001\022\020\n\010"
  "multiple\030\007 \001(\001\022\022\n\nplan_width\030\010 \001(\005\022\013\n\003do"
  "p\030\t \001(\005\022\021\n\tpred_rows\030\n \001(\001\022\031\n\021pred_start"
  "up_time\030\013 \001(\001\022\027\n\017pred_total_time\030\014 \001(\001\022\027"
  "\n\017pred_max_memory\030\r \001(\003\022#\n\033recursive_uni"
  "on_plan_nodeid\030\016 \001(\005\022\"\n\032recursive_union_"
  "controller\030\017 \001(\010\022\033\n\023control_plan_nodeid\030"
  "\020 \001(\005\022\030\n\020is_sync_plannode\030\021 \001(\010\022$\n\ntarge"
  "tlist\030\022 \001(\0132\020.proto_plan.List\022\036\n\004qual\030\023 "
  "\001(\0132\020.proto_plan.List\022\"\n\010lefttree\030\024 \001(\0132"
  "\020.proto_plan.Plan\022#\n\trighttree\030\025 \001(\0132\020.p"
  "roto_plan.Plan\022\r\n\005ispwj\030\026 \001(\010\022\017\n\007paramno"
  "\030\027 \001(\005\022\022\n\nsubparamno\030\030 \001(\005\022\"\n\010initPlan\030\031"
  " \001(\0132\020.proto_plan.List\022*\n\020distributed_ke"
  "ys\030\032 \001(\0132\020.proto_plan.List\022)\n\nexec_nodes"
  "\030\033 \001(\0132\025.proto_plan.ExecNodes\022\'\n\010extPara"
  "m\030\034 \001(\0132\025.proto_plan.Bitmapset\022\'\n\010allPar"
  "am\030\035 \001(\0132\025.proto_plan.Bitmapset\022\022\n\nvec_o"
  "utput\030\036 \001(\010\022\030\n\020hasUniqueResults\030\037 \001(\010\022\024\n"
  "\014isDeltaTable\030  \001(\010\022\025\n\roperatorMemKB\030! \003"
  "(\005\022\026\n\016operatorMaxMem\030\" \001(\005\022\030\n\020parallel_e"
  "nabled\030# \001(\010\022\025\n\rhasHashFilter\030$ \001(\010\022\"\n\010v"
  "ar_list\030% \001(\0132\020.proto_plan.List\022)\n\017filte"
  "rIndexList\030& \001(\0132\020.proto_plan.List\022\035\n\025ng"
  "_operatorMemKBArray\030\' \003(\005\022\016\n\006ng_num\030( \001("
  "\005\022\025\n\rinnerdistinct\030) \001(\001\022\025\n\routerdistinc"
  "t\030* \001(\001\022\"\n\010flatList\030+ \001(\0132\020.proto_plan.L"
  "ist\0220\n\rrightRefState\030, \001(\0132\031.proto_plan."
  "RightRefStateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_query_5fplan_2eproto_deps[2] = {
  &::descriptor_table_enumtag_2eproto,
  &::descriptor_table_execNodes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_query_5fplan_2eproto_sccs[2] = {
  &scc_info_Plan_query_5fplan_2eproto.base,
  &scc_info_RightRefState_query_5fplan_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_query_5fplan_2eproto_once;
static bool descriptor_table_query_5fplan_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_query_5fplan_2eproto = {
  &descriptor_table_query_5fplan_2eproto_initialized, descriptor_table_protodef_query_5fplan_2eproto, "query_plan.proto", 1661,
  &descriptor_table_query_5fplan_2eproto_once, descriptor_table_query_5fplan_2eproto_sccs, descriptor_table_query_5fplan_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_query_5fplan_2eproto::offsets,
  file_level_metadata_query_5fplan_2eproto, 2, file_level_enum_descriptors_query_5fplan_2eproto, file_level_service_descriptors_query_5fplan_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_query_5fplan_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_query_5fplan_2eproto), true);
namespace proto_plan {

// ===================================================================

void RightRefState::InitAsDefaultInstance() {
}
class RightRefState::_Internal {
 public:
};

void RightRefState::clear_constvalues() {
  constvalues_.Clear();
}
RightRefState::RightRefState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_plan.RightRefState)
}
RightRefState::RightRefState(const RightRefState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      explicitattrnos_(from.explicitattrnos_),
      constvalues_(from.constvalues_),
      values_(from.values_),
      hasexecs_(from.hasexecs_),
      isnulls_(from.isnulls_),
      usexplicitattrnos_(from.usexplicitattrnos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&explicitattrlen_, &from.explicitattrlen_,
    static_cast<size_t>(reinterpret_cast<char*>(&usexplicitattrlen_) -
    reinterpret_cast<char*>(&explicitattrlen_)) + sizeof(usexplicitattrlen_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.RightRefState)
}

void RightRefState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RightRefState_query_5fplan_2eproto.base);
  ::memset(&explicitattrlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usexplicitattrlen_) -
      reinterpret_cast<char*>(&explicitattrlen_)) + sizeof(usexplicitattrlen_));
}

RightRefState::~RightRefState() {
  // @@protoc_insertion_point(destructor:proto_plan.RightRefState)
  SharedDtor();
}

void RightRefState::SharedDtor() {
}

void RightRefState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RightRefState& RightRefState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RightRefState_query_5fplan_2eproto.base);
  return *internal_default_instance();
}


void RightRefState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.RightRefState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  explicitattrnos_.Clear();
  constvalues_.Clear();
  values_.Clear();
  hasexecs_.Clear();
  isnulls_.Clear();
  usexplicitattrnos_.Clear();
  ::memset(&explicitattrlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usexplicitattrlen_) -
      reinterpret_cast<char*>(&explicitattrlen_)) + sizeof(usexplicitattrlen_));
  _internal_metadata_.Clear();
}

const char* RightRefState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isSupported = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issupported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isInsertHasRightRef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isinserthasrightref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 explicitAttrLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          explicitattrlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 explicitAttrNos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_explicitattrnos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_explicitattrnos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto_plan.Const constValues = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_constvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 colCnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          colcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool hasExecs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_hasexecs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          _internal_add_hasexecs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool isNulls = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_isnulls(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_isnulls(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isUpsert = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          isupsert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isUpsertHasRightRef = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          isupserthasrightref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 usExplicitAttrLen = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          usexplicitattrlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 usExplicitAttrNos = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_usexplicitattrnos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_usexplicitattrnos(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RightRefState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.RightRefState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSupported = 1;
  if (this->issupported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_issupported(), target);
  }

  // bool isInsertHasRightRef = 2;
  if (this->isinserthasrightref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isinserthasrightref(), target);
  }

  // int32 explicitAttrLen = 3;
  if (this->explicitattrlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_explicitattrlen(), target);
  }

  // repeated int32 explicitAttrNos = 4;
  {
    int byte_size = _explicitattrnos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_explicitattrnos(), byte_size, target);
    }
  }

  // repeated .proto_plan.Const constValues = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_constvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_constvalues(i), target, stream);
  }

  // int32 colCnt = 6;
  if (this->colcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_colcnt(), target);
  }

  // repeated uint64 values = 7;
  {
    int byte_size = _values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_values(), byte_size, target);
    }
  }

  // repeated bool hasExecs = 8;
  if (this->_internal_hasexecs_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_hasexecs(), target);
  }

  // repeated bool isNulls = 9;
  if (this->_internal_isnulls_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_isnulls(), target);
  }

  // bool isUpsert = 10;
  if (this->isupsert() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_isupsert(), target);
  }

  // bool isUpsertHasRightRef = 11;
  if (this->isupserthasrightref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_isupserthasrightref(), target);
  }

  // int32 usExplicitAttrLen = 12;
  if (this->usexplicitattrlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_usexplicitattrlen(), target);
  }

  // repeated int32 usExplicitAttrNos = 13;
  {
    int byte_size = _usexplicitattrnos_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_usexplicitattrnos(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.RightRefState)
  return target;
}

size_t RightRefState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.RightRefState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 explicitAttrNos = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->explicitattrnos_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _explicitattrnos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .proto_plan.Const constValues = 5;
  total_size += 1UL * this->_internal_constvalues_size();
  for (const auto& msg : this->constvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 values = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool hasExecs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hasexecs_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hasexecs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool isNulls = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_isnulls_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _isnulls_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 usExplicitAttrNos = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->usexplicitattrnos_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _usexplicitattrnos_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 explicitAttrLen = 3;
  if (this->explicitattrlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_explicitattrlen());
  }

  // int32 colCnt = 6;
  if (this->colcnt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colcnt());
  }

  // bool isSupported = 1;
  if (this->issupported() != 0) {
    total_size += 1 + 1;
  }

  // bool isInsertHasRightRef = 2;
  if (this->isinserthasrightref() != 0) {
    total_size += 1 + 1;
  }

  // bool isUpsert = 10;
  if (this->isupsert() != 0) {
    total_size += 1 + 1;
  }

  // bool isUpsertHasRightRef = 11;
  if (this->isupserthasrightref() != 0) {
    total_size += 1 + 1;
  }

  // int32 usExplicitAttrLen = 12;
  if (this->usexplicitattrlen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_usexplicitattrlen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RightRefState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_plan.RightRefState)
  GOOGLE_DCHECK_NE(&from, this);
  const RightRefState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RightRefState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_plan.RightRefState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_plan.RightRefState)
    MergeFrom(*source);
  }
}

void RightRefState::MergeFrom(const RightRefState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.RightRefState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  explicitattrnos_.MergeFrom(from.explicitattrnos_);
  constvalues_.MergeFrom(from.constvalues_);
  values_.MergeFrom(from.values_);
  hasexecs_.MergeFrom(from.hasexecs_);
  isnulls_.MergeFrom(from.isnulls_);
  usexplicitattrnos_.MergeFrom(from.usexplicitattrnos_);
  if (from.explicitattrlen() != 0) {
    _internal_set_explicitattrlen(from._internal_explicitattrlen());
  }
  if (from.colcnt() != 0) {
    _internal_set_colcnt(from._internal_colcnt());
  }
  if (from.issupported() != 0) {
    _internal_set_issupported(from._internal_issupported());
  }
  if (from.isinserthasrightref() != 0) {
    _internal_set_isinserthasrightref(from._internal_isinserthasrightref());
  }
  if (from.isupsert() != 0) {
    _internal_set_isupsert(from._internal_isupsert());
  }
  if (from.isupserthasrightref() != 0) {
    _internal_set_isupserthasrightref(from._internal_isupserthasrightref());
  }
  if (from.usexplicitattrlen() != 0) {
    _internal_set_usexplicitattrlen(from._internal_usexplicitattrlen());
  }
}

void RightRefState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_plan.RightRefState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RightRefState::CopyFrom(const RightRefState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.RightRefState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RightRefState::IsInitialized() const {
  return true;
}

void RightRefState::InternalSwap(RightRefState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  explicitattrnos_.InternalSwap(&other->explicitattrnos_);
  constvalues_.InternalSwap(&other->constvalues_);
  values_.InternalSwap(&other->values_);
  hasexecs_.InternalSwap(&other->hasexecs_);
  isnulls_.InternalSwap(&other->isnulls_);
  usexplicitattrnos_.InternalSwap(&other->usexplicitattrnos_);
  swap(explicitattrlen_, other->explicitattrlen_);
  swap(colcnt_, other->colcnt_);
  swap(issupported_, other->issupported_);
  swap(isinserthasrightref_, other->isinserthasrightref_);
  swap(isupsert_, other->isupsert_);
  swap(isupserthasrightref_, other->isupserthasrightref_);
  swap(usexplicitattrlen_, other->usexplicitattrlen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RightRefState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plan::InitAsDefaultInstance() {
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->targetlist_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->qual_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->lefttree_ = const_cast< ::proto_plan::Plan*>(
      ::proto_plan::Plan::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->righttree_ = const_cast< ::proto_plan::Plan*>(
      ::proto_plan::Plan::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->initplan_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->distributed_keys_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->exec_nodes_ = const_cast< ::proto_plan::ExecNodes*>(
      ::proto_plan::ExecNodes::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->extparam_ = const_cast< ::proto_plan::Bitmapset*>(
      ::proto_plan::Bitmapset::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->allparam_ = const_cast< ::proto_plan::Bitmapset*>(
      ::proto_plan::Bitmapset::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->var_list_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->filterindexlist_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->flatlist_ = const_cast< ::proto_plan::List*>(
      ::proto_plan::List::internal_default_instance());
  ::proto_plan::_Plan_default_instance_._instance.get_mutable()->rightrefstate_ = const_cast< ::proto_plan::RightRefState*>(
      ::proto_plan::RightRefState::internal_default_instance());
}
class Plan::_Internal {
 public:
  static const ::proto_plan::List& targetlist(const Plan* msg);
  static const ::proto_plan::List& qual(const Plan* msg);
  static const ::proto_plan::Plan& lefttree(const Plan* msg);
  static const ::proto_plan::Plan& righttree(const Plan* msg);
  static const ::proto_plan::List& initplan(const Plan* msg);
  static const ::proto_plan::List& distributed_keys(const Plan* msg);
  static const ::proto_plan::ExecNodes& exec_nodes(const Plan* msg);
  static const ::proto_plan::Bitmapset& extparam(const Plan* msg);
  static const ::proto_plan::Bitmapset& allparam(const Plan* msg);
  static const ::proto_plan::List& var_list(const Plan* msg);
  static const ::proto_plan::List& filterindexlist(const Plan* msg);
  static const ::proto_plan::List& flatlist(const Plan* msg);
  static const ::proto_plan::RightRefState& rightrefstate(const Plan* msg);
};

const ::proto_plan::List&
Plan::_Internal::targetlist(const Plan* msg) {
  return *msg->targetlist_;
}
const ::proto_plan::List&
Plan::_Internal::qual(const Plan* msg) {
  return *msg->qual_;
}
const ::proto_plan::Plan&
Plan::_Internal::lefttree(const Plan* msg) {
  return *msg->lefttree_;
}
const ::proto_plan::Plan&
Plan::_Internal::righttree(const Plan* msg) {
  return *msg->righttree_;
}
const ::proto_plan::List&
Plan::_Internal::initplan(const Plan* msg) {
  return *msg->initplan_;
}
const ::proto_plan::List&
Plan::_Internal::distributed_keys(const Plan* msg) {
  return *msg->distributed_keys_;
}
const ::proto_plan::ExecNodes&
Plan::_Internal::exec_nodes(const Plan* msg) {
  return *msg->exec_nodes_;
}
const ::proto_plan::Bitmapset&
Plan::_Internal::extparam(const Plan* msg) {
  return *msg->extparam_;
}
const ::proto_plan::Bitmapset&
Plan::_Internal::allparam(const Plan* msg) {
  return *msg->allparam_;
}
const ::proto_plan::List&
Plan::_Internal::var_list(const Plan* msg) {
  return *msg->var_list_;
}
const ::proto_plan::List&
Plan::_Internal::filterindexlist(const Plan* msg) {
  return *msg->filterindexlist_;
}
const ::proto_plan::List&
Plan::_Internal::flatlist(const Plan* msg) {
  return *msg->flatlist_;
}
const ::proto_plan::RightRefState&
Plan::_Internal::rightrefstate(const Plan* msg) {
  return *msg->rightrefstate_;
}
void Plan::clear_targetlist() {
  if (GetArenaNoVirtual() == nullptr && targetlist_ != nullptr) {
    delete targetlist_;
  }
  targetlist_ = nullptr;
}
void Plan::clear_qual() {
  if (GetArenaNoVirtual() == nullptr && qual_ != nullptr) {
    delete qual_;
  }
  qual_ = nullptr;
}
void Plan::clear_initplan() {
  if (GetArenaNoVirtual() == nullptr && initplan_ != nullptr) {
    delete initplan_;
  }
  initplan_ = nullptr;
}
void Plan::clear_distributed_keys() {
  if (GetArenaNoVirtual() == nullptr && distributed_keys_ != nullptr) {
    delete distributed_keys_;
  }
  distributed_keys_ = nullptr;
}
void Plan::clear_exec_nodes() {
  if (GetArenaNoVirtual() == nullptr && exec_nodes_ != nullptr) {
    delete exec_nodes_;
  }
  exec_nodes_ = nullptr;
}
void Plan::clear_extparam() {
  if (GetArenaNoVirtual() == nullptr && extparam_ != nullptr) {
    delete extparam_;
  }
  extparam_ = nullptr;
}
void Plan::clear_allparam() {
  if (GetArenaNoVirtual() == nullptr && allparam_ != nullptr) {
    delete allparam_;
  }
  allparam_ = nullptr;
}
void Plan::clear_var_list() {
  if (GetArenaNoVirtual() == nullptr && var_list_ != nullptr) {
    delete var_list_;
  }
  var_list_ = nullptr;
}
void Plan::clear_filterindexlist() {
  if (GetArenaNoVirtual() == nullptr && filterindexlist_ != nullptr) {
    delete filterindexlist_;
  }
  filterindexlist_ = nullptr;
}
void Plan::clear_flatlist() {
  if (GetArenaNoVirtual() == nullptr && flatlist_ != nullptr) {
    delete flatlist_;
  }
  flatlist_ = nullptr;
}
Plan::Plan()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_plan.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      operatormemkb_(from.operatormemkb_),
      ng_operatormemkbarray_(from.ng_operatormemkbarray_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_targetlist()) {
    targetlist_ = new ::proto_plan::List(*from.targetlist_);
  } else {
    targetlist_ = nullptr;
  }
  if (from._internal_has_qual()) {
    qual_ = new ::proto_plan::List(*from.qual_);
  } else {
    qual_ = nullptr;
  }
  if (from._internal_has_lefttree()) {
    lefttree_ = new ::proto_plan::Plan(*from.lefttree_);
  } else {
    lefttree_ = nullptr;
  }
  if (from._internal_has_righttree()) {
    righttree_ = new ::proto_plan::Plan(*from.righttree_);
  } else {
    righttree_ = nullptr;
  }
  if (from._internal_has_initplan()) {
    initplan_ = new ::proto_plan::List(*from.initplan_);
  } else {
    initplan_ = nullptr;
  }
  if (from._internal_has_distributed_keys()) {
    distributed_keys_ = new ::proto_plan::List(*from.distributed_keys_);
  } else {
    distributed_keys_ = nullptr;
  }
  if (from._internal_has_exec_nodes()) {
    exec_nodes_ = new ::proto_plan::ExecNodes(*from.exec_nodes_);
  } else {
    exec_nodes_ = nullptr;
  }
  if (from._internal_has_extparam()) {
    extparam_ = new ::proto_plan::Bitmapset(*from.extparam_);
  } else {
    extparam_ = nullptr;
  }
  if (from._internal_has_allparam()) {
    allparam_ = new ::proto_plan::Bitmapset(*from.allparam_);
  } else {
    allparam_ = nullptr;
  }
  if (from._internal_has_var_list()) {
    var_list_ = new ::proto_plan::List(*from.var_list_);
  } else {
    var_list_ = nullptr;
  }
  if (from._internal_has_filterindexlist()) {
    filterindexlist_ = new ::proto_plan::List(*from.filterindexlist_);
  } else {
    filterindexlist_ = nullptr;
  }
  if (from._internal_has_flatlist()) {
    flatlist_ = new ::proto_plan::List(*from.flatlist_);
  } else {
    flatlist_ = nullptr;
  }
  if (from._internal_has_rightrefstate()) {
    rightrefstate_ = new ::proto_plan::RightRefState(*from.rightrefstate_);
  } else {
    rightrefstate_ = nullptr;
  }
  ::memcpy(&plan_node_id_, &from.plan_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ng_num_) -
    reinterpret_cast<char*>(&plan_node_id_)) + sizeof(ng_num_));
  // @@protoc_insertion_point(copy_constructor:proto_plan.Plan)
}

void Plan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plan_query_5fplan_2eproto.base);
  ::memset(&targetlist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ng_num_) -
      reinterpret_cast<char*>(&targetlist_)) + sizeof(ng_num_));
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:proto_plan.Plan)
  SharedDtor();
}

void Plan::SharedDtor() {
  if (this != internal_default_instance()) delete targetlist_;
  if (this != internal_default_instance()) delete qual_;
  if (this != internal_default_instance()) delete lefttree_;
  if (this != internal_default_instance()) delete righttree_;
  if (this != internal_default_instance()) delete initplan_;
  if (this != internal_default_instance()) delete distributed_keys_;
  if (this != internal_default_instance()) delete exec_nodes_;
  if (this != internal_default_instance()) delete extparam_;
  if (this != internal_default_instance()) delete allparam_;
  if (this != internal_default_instance()) delete var_list_;
  if (this != internal_default_instance()) delete filterindexlist_;
  if (this != internal_default_instance()) delete flatlist_;
  if (this != internal_default_instance()) delete rightrefstate_;
}

void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plan& Plan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plan_query_5fplan_2eproto.base);
  return *internal_default_instance();
}


void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_plan.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operatormemkb_.Clear();
  ng_operatormemkbarray_.Clear();
  if (GetArenaNoVirtual() == nullptr && targetlist_ != nullptr) {
    delete targetlist_;
  }
  targetlist_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && qual_ != nullptr) {
    delete qual_;
  }
  qual_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lefttree_ != nullptr) {
    delete lefttree_;
  }
  lefttree_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && righttree_ != nullptr) {
    delete righttree_;
  }
  righttree_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initplan_ != nullptr) {
    delete initplan_;
  }
  initplan_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && distributed_keys_ != nullptr) {
    delete distributed_keys_;
  }
  distributed_keys_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && exec_nodes_ != nullptr) {
    delete exec_nodes_;
  }
  exec_nodes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extparam_ != nullptr) {
    delete extparam_;
  }
  extparam_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && allparam_ != nullptr) {
    delete allparam_;
  }
  allparam_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && var_list_ != nullptr) {
    delete var_list_;
  }
  var_list_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && filterindexlist_ != nullptr) {
    delete filterindexlist_;
  }
  filterindexlist_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && flatlist_ != nullptr) {
    delete flatlist_;
  }
  flatlist_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rightrefstate_ != nullptr) {
    delete rightrefstate_;
  }
  rightrefstate_ = nullptr;
  ::memset(&plan_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ng_num_) -
      reinterpret_cast<char*>(&plan_node_id_)) + sizeof(ng_num_));
  _internal_metadata_.Clear();
}

const char* Plan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 plan_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          plan_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 parent_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parent_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.RemoteQueryExecType exec_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_exec_type(static_cast<::proto_plan::RemoteQueryExecType>(val));
        } else goto handle_unusual;
        continue;
      // double startup_cost = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          startup_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_cost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          total_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double plan_rows = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          plan_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double multiple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 plan_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          plan_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dop = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double pred_rows = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          pred_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pred_startup_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          pred_startup_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pred_total_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          pred_total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 pred_max_memory = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          pred_max_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 recursive_union_plan_nodeid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          recursive_union_plan_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool recursive_union_controller = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          recursive_union_controller_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 control_plan_nodeid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          control_plan_nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_sync_plannode = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          is_sync_plannode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List targetlist = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List qual = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_qual(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Plan lefttree = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_lefttree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Plan righttree = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_righttree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ispwj = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ispwj_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 paramno = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          paramno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subparamno = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          subparamno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List initPlan = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_initplan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List distributed_keys = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_distributed_keys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.ExecNodes exec_nodes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_exec_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Bitmapset extParam = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_extparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.Bitmapset allParam = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_allparam(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool vec_output = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          vec_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasUniqueResults = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          hasuniqueresults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isDeltaTable = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          isdeltatable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 operatorMemKB = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_operatormemkb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_operatormemkb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operatorMaxMem = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operatormaxmem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool parallel_enabled = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          parallel_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool hasHashFilter = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hashashfilter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List var_list = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List filterIndexList = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_filterindexlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ng_operatorMemKBArray = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ng_operatormemkbarray(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_ng_operatormemkbarray(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ng_num = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ng_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double innerdistinct = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          innerdistinct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double outerdistinct = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          outerdistinct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .proto_plan.List flatList = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_flatlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .proto_plan.RightRefState rightRefState = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rightrefstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plan::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_plan.Plan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 plan_node_id = 1;
  if (this->plan_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_plan_node_id(), target);
  }

  // uint32 parent_node_id = 2;
  if (this->parent_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_parent_node_id(), target);
  }

  // .proto_plan.RemoteQueryExecType exec_type = 3;
  if (this->exec_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_exec_type(), target);
  }

  // double startup_cost = 4;
  if (!(this->startup_cost() <= 0 && this->startup_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_startup_cost(), target);
  }

  // double total_cost = 5;
  if (!(this->total_cost() <= 0 && this->total_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_total_cost(), target);
  }

  // double plan_rows = 6;
  if (!(this->plan_rows() <= 0 && this->plan_rows() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_plan_rows(), target);
  }

  // double multiple = 7;
  if (!(this->multiple() <= 0 && this->multiple() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_multiple(), target);
  }

  // int32 plan_width = 8;
  if (this->plan_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_plan_width(), target);
  }

  // int32 dop = 9;
  if (this->dop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_dop(), target);
  }

  // double pred_rows = 10;
  if (!(this->pred_rows() <= 0 && this->pred_rows() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_pred_rows(), target);
  }

  // double pred_startup_time = 11;
  if (!(this->pred_startup_time() <= 0 && this->pred_startup_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_pred_startup_time(), target);
  }

  // double pred_total_time = 12;
  if (!(this->pred_total_time() <= 0 && this->pred_total_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_pred_total_time(), target);
  }

  // int64 pred_max_memory = 13;
  if (this->pred_max_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_pred_max_memory(), target);
  }

  // int32 recursive_union_plan_nodeid = 14;
  if (this->recursive_union_plan_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_recursive_union_plan_nodeid(), target);
  }

  // bool recursive_union_controller = 15;
  if (this->recursive_union_controller() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_recursive_union_controller(), target);
  }

  // int32 control_plan_nodeid = 16;
  if (this->control_plan_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_control_plan_nodeid(), target);
  }

  // bool is_sync_plannode = 17;
  if (this->is_sync_plannode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_sync_plannode(), target);
  }

  // .proto_plan.List targetlist = 18;
  if (this->has_targetlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::targetlist(this), target, stream);
  }

  // .proto_plan.List qual = 19;
  if (this->has_qual()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::qual(this), target, stream);
  }

  // .proto_plan.Plan lefttree = 20;
  if (this->has_lefttree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::lefttree(this), target, stream);
  }

  // .proto_plan.Plan righttree = 21;
  if (this->has_righttree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::righttree(this), target, stream);
  }

  // bool ispwj = 22;
  if (this->ispwj() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_ispwj(), target);
  }

  // int32 paramno = 23;
  if (this->paramno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_paramno(), target);
  }

  // int32 subparamno = 24;
  if (this->subparamno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_subparamno(), target);
  }

  // .proto_plan.List initPlan = 25;
  if (this->has_initplan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::initplan(this), target, stream);
  }

  // .proto_plan.List distributed_keys = 26;
  if (this->has_distributed_keys()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::distributed_keys(this), target, stream);
  }

  // .proto_plan.ExecNodes exec_nodes = 27;
  if (this->has_exec_nodes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::exec_nodes(this), target, stream);
  }

  // .proto_plan.Bitmapset extParam = 28;
  if (this->has_extparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::extparam(this), target, stream);
  }

  // .proto_plan.Bitmapset allParam = 29;
  if (this->has_allparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::allparam(this), target, stream);
  }

  // bool vec_output = 30;
  if (this->vec_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_vec_output(), target);
  }

  // bool hasUniqueResults = 31;
  if (this->hasuniqueresults() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_hasuniqueresults(), target);
  }

  // bool isDeltaTable = 32;
  if (this->isdeltatable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_isdeltatable(), target);
  }

  // repeated int32 operatorMemKB = 33;
  {
    int byte_size = _operatormemkb_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          33, _internal_operatormemkb(), byte_size, target);
    }
  }

  // int32 operatorMaxMem = 34;
  if (this->operatormaxmem() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_operatormaxmem(), target);
  }

  // bool parallel_enabled = 35;
  if (this->parallel_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(35, this->_internal_parallel_enabled(), target);
  }

  // bool hasHashFilter = 36;
  if (this->hashashfilter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(36, this->_internal_hashashfilter(), target);
  }

  // .proto_plan.List var_list = 37;
  if (this->has_var_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::var_list(this), target, stream);
  }

  // .proto_plan.List filterIndexList = 38;
  if (this->has_filterindexlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::filterindexlist(this), target, stream);
  }

  // repeated int32 ng_operatorMemKBArray = 39;
  {
    int byte_size = _ng_operatormemkbarray_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          39, _internal_ng_operatormemkbarray(), byte_size, target);
    }
  }

  // int32 ng_num = 40;
  if (this->ng_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_ng_num(), target);
  }

  // double innerdistinct = 41;
  if (!(this->innerdistinct() <= 0 && this->innerdistinct() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_innerdistinct(), target);
  }

  // double outerdistinct = 42;
  if (!(this->outerdistinct() <= 0 && this->outerdistinct() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_outerdistinct(), target);
  }

  // .proto_plan.List flatList = 43;
  if (this->has_flatlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        43, _Internal::flatlist(this), target, stream);
  }

  // .proto_plan.RightRefState rightRefState = 44;
  if (this->has_rightrefstate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        44, _Internal::rightrefstate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_plan.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_plan.Plan)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 operatorMemKB = 33;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->operatormemkb_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _operatormemkb_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ng_operatorMemKBArray = 39;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ng_operatormemkbarray_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ng_operatormemkbarray_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .proto_plan.List targetlist = 18;
  if (this->has_targetlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetlist_);
  }

  // .proto_plan.List qual = 19;
  if (this->has_qual()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qual_);
  }

  // .proto_plan.Plan lefttree = 20;
  if (this->has_lefttree()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lefttree_);
  }

  // .proto_plan.Plan righttree = 21;
  if (this->has_righttree()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *righttree_);
  }

  // .proto_plan.List initPlan = 25;
  if (this->has_initplan()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initplan_);
  }

  // .proto_plan.List distributed_keys = 26;
  if (this->has_distributed_keys()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distributed_keys_);
  }

  // .proto_plan.ExecNodes exec_nodes = 27;
  if (this->has_exec_nodes()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exec_nodes_);
  }

  // .proto_plan.Bitmapset extParam = 28;
  if (this->has_extparam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extparam_);
  }

  // .proto_plan.Bitmapset allParam = 29;
  if (this->has_allparam()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allparam_);
  }

  // .proto_plan.List var_list = 37;
  if (this->has_var_list()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *var_list_);
  }

  // .proto_plan.List filterIndexList = 38;
  if (this->has_filterindexlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filterindexlist_);
  }

  // .proto_plan.List flatList = 43;
  if (this->has_flatlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flatlist_);
  }

  // .proto_plan.RightRefState rightRefState = 44;
  if (this->has_rightrefstate()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rightrefstate_);
  }

  // uint32 plan_node_id = 1;
  if (this->plan_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_plan_node_id());
  }

  // uint32 parent_node_id = 2;
  if (this->parent_node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_parent_node_id());
  }

  // double startup_cost = 4;
  if (!(this->startup_cost() <= 0 && this->startup_cost() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_cost = 5;
  if (!(this->total_cost() <= 0 && this->total_cost() >= 0)) {
    total_size += 1 + 8;
  }

  // .proto_plan.RemoteQueryExecType exec_type = 3;
  if (this->exec_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_exec_type());
  }

  // int32 plan_width = 8;
  if (this->plan_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plan_width());
  }

  // double plan_rows = 6;
  if (!(this->plan_rows() <= 0 && this->plan_rows() >= 0)) {
    total_size += 1 + 8;
  }

  // double multiple = 7;
  if (!(this->multiple() <= 0 && this->multiple() >= 0)) {
    total_size += 1 + 8;
  }

  // double pred_rows = 10;
  if (!(this->pred_rows() <= 0 && this->pred_rows() >= 0)) {
    total_size += 1 + 8;
  }

  // double pred_startup_time = 11;
  if (!(this->pred_startup_time() <= 0 && this->pred_startup_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 dop = 9;
  if (this->dop() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dop());
  }

  // int32 recursive_union_plan_nodeid = 14;
  if (this->recursive_union_plan_nodeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_recursive_union_plan_nodeid());
  }

  // double pred_total_time = 12;
  if (!(this->pred_total_time() <= 0 && this->pred_total_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 pred_max_memory = 13;
  if (this->pred_max_memory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pred_max_memory());
  }

  // int32 control_plan_nodeid = 16;
  if (this->control_plan_nodeid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_control_plan_nodeid());
  }

  // bool recursive_union_controller = 15;
  if (this->recursive_union_controller() != 0) {
    total_size += 1 + 1;
  }

  // bool is_sync_plannode = 17;
  if (this->is_sync_plannode() != 0) {
    total_size += 2 + 1;
  }

  // bool ispwj = 22;
  if (this->ispwj() != 0) {
    total_size += 2 + 1;
  }

  // bool vec_output = 30;
  if (this->vec_output() != 0) {
    total_size += 2 + 1;
  }

  // int32 paramno = 23;
  if (this->paramno() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_paramno());
  }

  // int32 subparamno = 24;
  if (this->subparamno() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_subparamno());
  }

  // bool hasUniqueResults = 31;
  if (this->hasuniqueresults() != 0) {
    total_size += 2 + 1;
  }

  // bool isDeltaTable = 32;
  if (this->isdeltatable() != 0) {
    total_size += 2 + 1;
  }

  // bool parallel_enabled = 35;
  if (this->parallel_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool hasHashFilter = 36;
  if (this->hashashfilter() != 0) {
    total_size += 2 + 1;
  }

  // int32 operatorMaxMem = 34;
  if (this->operatormaxmem() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operatormaxmem());
  }

  // double innerdistinct = 41;
  if (!(this->innerdistinct() <= 0 && this->innerdistinct() >= 0)) {
    total_size += 2 + 8;
  }

  // double outerdistinct = 42;
  if (!(this->outerdistinct() <= 0 && this->outerdistinct() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 ng_num = 40;
  if (this->ng_num() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ng_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plan::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_plan.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  const Plan* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_plan.Plan)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_plan.Plan)
    MergeFrom(*source);
  }
}

void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_plan.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operatormemkb_.MergeFrom(from.operatormemkb_);
  ng_operatormemkbarray_.MergeFrom(from.ng_operatormemkbarray_);
  if (from.has_targetlist()) {
    _internal_mutable_targetlist()->::proto_plan::List::MergeFrom(from._internal_targetlist());
  }
  if (from.has_qual()) {
    _internal_mutable_qual()->::proto_plan::List::MergeFrom(from._internal_qual());
  }
  if (from.has_lefttree()) {
    _internal_mutable_lefttree()->::proto_plan::Plan::MergeFrom(from._internal_lefttree());
  }
  if (from.has_righttree()) {
    _internal_mutable_righttree()->::proto_plan::Plan::MergeFrom(from._internal_righttree());
  }
  if (from.has_initplan()) {
    _internal_mutable_initplan()->::proto_plan::List::MergeFrom(from._internal_initplan());
  }
  if (from.has_distributed_keys()) {
    _internal_mutable_distributed_keys()->::proto_plan::List::MergeFrom(from._internal_distributed_keys());
  }
  if (from.has_exec_nodes()) {
    _internal_mutable_exec_nodes()->::proto_plan::ExecNodes::MergeFrom(from._internal_exec_nodes());
  }
  if (from.has_extparam()) {
    _internal_mutable_extparam()->::proto_plan::Bitmapset::MergeFrom(from._internal_extparam());
  }
  if (from.has_allparam()) {
    _internal_mutable_allparam()->::proto_plan::Bitmapset::MergeFrom(from._internal_allparam());
  }
  if (from.has_var_list()) {
    _internal_mutable_var_list()->::proto_plan::List::MergeFrom(from._internal_var_list());
  }
  if (from.has_filterindexlist()) {
    _internal_mutable_filterindexlist()->::proto_plan::List::MergeFrom(from._internal_filterindexlist());
  }
  if (from.has_flatlist()) {
    _internal_mutable_flatlist()->::proto_plan::List::MergeFrom(from._internal_flatlist());
  }
  if (from.has_rightrefstate()) {
    _internal_mutable_rightrefstate()->::proto_plan::RightRefState::MergeFrom(from._internal_rightrefstate());
  }
  if (from.plan_node_id() != 0) {
    _internal_set_plan_node_id(from._internal_plan_node_id());
  }
  if (from.parent_node_id() != 0) {
    _internal_set_parent_node_id(from._internal_parent_node_id());
  }
  if (!(from.startup_cost() <= 0 && from.startup_cost() >= 0)) {
    _internal_set_startup_cost(from._internal_startup_cost());
  }
  if (!(from.total_cost() <= 0 && from.total_cost() >= 0)) {
    _internal_set_total_cost(from._internal_total_cost());
  }
  if (from.exec_type() != 0) {
    _internal_set_exec_type(from._internal_exec_type());
  }
  if (from.plan_width() != 0) {
    _internal_set_plan_width(from._internal_plan_width());
  }
  if (!(from.plan_rows() <= 0 && from.plan_rows() >= 0)) {
    _internal_set_plan_rows(from._internal_plan_rows());
  }
  if (!(from.multiple() <= 0 && from.multiple() >= 0)) {
    _internal_set_multiple(from._internal_multiple());
  }
  if (!(from.pred_rows() <= 0 && from.pred_rows() >= 0)) {
    _internal_set_pred_rows(from._internal_pred_rows());
  }
  if (!(from.pred_startup_time() <= 0 && from.pred_startup_time() >= 0)) {
    _internal_set_pred_startup_time(from._internal_pred_startup_time());
  }
  if (from.dop() != 0) {
    _internal_set_dop(from._internal_dop());
  }
  if (from.recursive_union_plan_nodeid() != 0) {
    _internal_set_recursive_union_plan_nodeid(from._internal_recursive_union_plan_nodeid());
  }
  if (!(from.pred_total_time() <= 0 && from.pred_total_time() >= 0)) {
    _internal_set_pred_total_time(from._internal_pred_total_time());
  }
  if (from.pred_max_memory() != 0) {
    _internal_set_pred_max_memory(from._internal_pred_max_memory());
  }
  if (from.control_plan_nodeid() != 0) {
    _internal_set_control_plan_nodeid(from._internal_control_plan_nodeid());
  }
  if (from.recursive_union_controller() != 0) {
    _internal_set_recursive_union_controller(from._internal_recursive_union_controller());
  }
  if (from.is_sync_plannode() != 0) {
    _internal_set_is_sync_plannode(from._internal_is_sync_plannode());
  }
  if (from.ispwj() != 0) {
    _internal_set_ispwj(from._internal_ispwj());
  }
  if (from.vec_output() != 0) {
    _internal_set_vec_output(from._internal_vec_output());
  }
  if (from.paramno() != 0) {
    _internal_set_paramno(from._internal_paramno());
  }
  if (from.subparamno() != 0) {
    _internal_set_subparamno(from._internal_subparamno());
  }
  if (from.hasuniqueresults() != 0) {
    _internal_set_hasuniqueresults(from._internal_hasuniqueresults());
  }
  if (from.isdeltatable() != 0) {
    _internal_set_isdeltatable(from._internal_isdeltatable());
  }
  if (from.parallel_enabled() != 0) {
    _internal_set_parallel_enabled(from._internal_parallel_enabled());
  }
  if (from.hashashfilter() != 0) {
    _internal_set_hashashfilter(from._internal_hashashfilter());
  }
  if (from.operatormaxmem() != 0) {
    _internal_set_operatormaxmem(from._internal_operatormaxmem());
  }
  if (!(from.innerdistinct() <= 0 && from.innerdistinct() >= 0)) {
    _internal_set_innerdistinct(from._internal_innerdistinct());
  }
  if (!(from.outerdistinct() <= 0 && from.outerdistinct() >= 0)) {
    _internal_set_outerdistinct(from._internal_outerdistinct());
  }
  if (from.ng_num() != 0) {
    _internal_set_ng_num(from._internal_ng_num());
  }
}

void Plan::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_plan.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_plan.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  operatormemkb_.InternalSwap(&other->operatormemkb_);
  ng_operatormemkbarray_.InternalSwap(&other->ng_operatormemkbarray_);
  swap(targetlist_, other->targetlist_);
  swap(qual_, other->qual_);
  swap(lefttree_, other->lefttree_);
  swap(righttree_, other->righttree_);
  swap(initplan_, other->initplan_);
  swap(distributed_keys_, other->distributed_keys_);
  swap(exec_nodes_, other->exec_nodes_);
  swap(extparam_, other->extparam_);
  swap(allparam_, other->allparam_);
  swap(var_list_, other->var_list_);
  swap(filterindexlist_, other->filterindexlist_);
  swap(flatlist_, other->flatlist_);
  swap(rightrefstate_, other->rightrefstate_);
  swap(plan_node_id_, other->plan_node_id_);
  swap(parent_node_id_, other->parent_node_id_);
  swap(startup_cost_, other->startup_cost_);
  swap(total_cost_, other->total_cost_);
  swap(exec_type_, other->exec_type_);
  swap(plan_width_, other->plan_width_);
  swap(plan_rows_, other->plan_rows_);
  swap(multiple_, other->multiple_);
  swap(pred_rows_, other->pred_rows_);
  swap(pred_startup_time_, other->pred_startup_time_);
  swap(dop_, other->dop_);
  swap(recursive_union_plan_nodeid_, other->recursive_union_plan_nodeid_);
  swap(pred_total_time_, other->pred_total_time_);
  swap(pred_max_memory_, other->pred_max_memory_);
  swap(control_plan_nodeid_, other->control_plan_nodeid_);
  swap(recursive_union_controller_, other->recursive_union_controller_);
  swap(is_sync_plannode_, other->is_sync_plannode_);
  swap(ispwj_, other->ispwj_);
  swap(vec_output_, other->vec_output_);
  swap(paramno_, other->paramno_);
  swap(subparamno_, other->subparamno_);
  swap(hasuniqueresults_, other->hasuniqueresults_);
  swap(isdeltatable_, other->isdeltatable_);
  swap(parallel_enabled_, other->parallel_enabled_);
  swap(hashashfilter_, other->hashashfilter_);
  swap(operatormaxmem_, other->operatormaxmem_);
  swap(innerdistinct_, other->innerdistinct_);
  swap(outerdistinct_, other->outerdistinct_);
  swap(ng_num_, other->ng_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_plan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_plan::RightRefState* Arena::CreateMaybeMessage< ::proto_plan::RightRefState >(Arena* arena) {
  return Arena::CreateInternal< ::proto_plan::RightRefState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_plan::Plan* Arena::CreateMaybeMessage< ::proto_plan::Plan >(Arena* arena) {
  return Arena::CreateInternal< ::proto_plan::Plan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
